<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on UNIXETC</title>
    
    
    
    <link>/tags/github/</link>
    <description>Recent content in Github on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jul 2015 17:20:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将博客从Typcho转移至Gor</title>
      <link>/post/typecho-converted-to-gor/</link>
      <pubDate>Mon, 20 Jul 2015 17:20:00 +0000</pubDate>
      
      <guid>/post/typecho-converted-to-gor/</guid>
      <description>
        
          
          
          
        
        
        
          缘由 VPS快到期了，不想继续维护，太累，并且香港VPS价格也不菲。
于是打算选择一个静态博客平台，原来用过的不少:jekyll,hexo,gor,pelican，最后决定Gor
选择Gor的理由有两点
 安装方便 执行效率高  安装Gor 参考Gor主页https://github.com/wendal/gor安装Gor
将Typecho文章导出为Markdown文件(.md) Github上有现成的工具typecho-exporter，主页为https://github.com/aneasystone/typecho-exporter
这个工具可以将所有的文章导出为Markdown文件，但是以文章标题为文件名，不利于后期处理，建议使用slug为文件名。
编辑下载的main.py，将75行的p.title = r[1]替换为`p.title = r[2]&#39;，如下:
results = cur.fetchall() for r in results: p = Post() p.id = r[0] p.title = r[2] p.content = r[5] posts.append(p)  原来的r[1]对应typecho_contentsSQL表中的title列，我的r[2]对应slug列，可以根据实际情况更改。
编辑typecho-exporter的config.ini文件，设置数据库访问方式。
运行main.py，完成后会在typecho-exporter目录下生成files文件夹，里面就是导出的Markdown文件。
后期整理 导出后的Markdown没有Gor需要的文件头格式，需要手动整理
这里推荐使用Notepad++批量替换
  查找目标:
  替换为&amp;mdash;\n title: title\ndate: 2015-07-20\ndescription: \npermalink: \ncategories: \ntags: \n&amp;mdash;\n
  记得将查找模式重的扩展打开。
经过以上替换，就大概有了个Gor的Markdown头格式，后面的手动工作就少了多了。
          
        
        </description>
    </item>
    
    <item>
      <title>结合Jekyll与Github Page建立免费博客</title>
      <link>/post/create-a-free-blog-with-jekyll-and-github-page/</link>
      <pubDate>Wed, 16 Jul 2014 07:16:00 +0000</pubDate>
      
      <guid>/post/create-a-free-blog-with-jekyll-and-github-page/</guid>
      <description>
        
          
          
          
        
        
        
          安装Jekyll  Windows下安装Jekyll Debian下安装Jekyll  Jekyll使用 待补充
将Jekyll内容发布到Github 首先登录Github，新建一个用户名.github.com的repositories
然后将该 Repositories clone到本地文件夹。
在本地文件夹生成Jekyll站点，然后使用jekyll server生成内容。
下来将生成后的内容发布到Github
git add --all git commit -m &amp;quot;Update&amp;quot; git remote add origin git@github.com:用户名/用户名.github.com.git git push origin master  设置自定义域名 在Jekyll站点目录中新建CNAME文件，写入域名
然后将域名A记录指向github提供的ip地址204.232.175.78或207.97.227.245
          
        
        </description>
    </item>
    
    <item>
      <title>使用SSH密匙登录Github</title>
      <link>/post/use-the-ssh-key-to-login-github/</link>
      <pubDate>Tue, 03 Sep 2013 19:23:00 +0000</pubDate>
      
      <guid>/post/use-the-ssh-key-to-login-github/</guid>
      <description>
        
          
          
          
        
        
        
          生成ssh密匙文件 ssh-keygen -t rsa -C &amp;quot;user@domain.com&amp;quot;  接下来会提示输入密码，推荐自定义密码，当然也可以置空
Enter passphrase(empty for no passphrase): Enter same passphrase again:  完成后会在用户目录下的.ssh文件夹中新建id_rsa与is_rsa.pub两个文件。
添加ssh密匙到github用户 登录至github.com,点击右上角的Account Settings
在左侧选择SSH Keys菜单，然后在右侧点击Add SSH Key按钮
将上一步生成的id_rsa.pub文件内容复制进去保存。
本地连接至github.com ssh -T git@github.com  如果前面设置了passphrase，那么就按照提示输入passphrase。如果置空的话，就直接点击回车。成功后会有如下提示：
Hi wrchiu! You`ve successfully authenticated, but GitHub does note provide shell access.  参考以上设置完成后，以后git push时就不需要每次输入密码了！
          
        
        </description>
    </item>
    
  </channel>
</rss>