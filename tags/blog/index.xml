<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on UNIXETC</title>
    
    
    
    <link>/tags/blog/</link>
    <description>Recent content in Blog on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jul 2015 17:20:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将博客从Typcho转移至Gor</title>
      <link>/post/typecho-converted-to-gor/</link>
      <pubDate>Mon, 20 Jul 2015 17:20:00 +0000</pubDate>
      
      <guid>/post/typecho-converted-to-gor/</guid>
      <description>
        
          
          
          
        
        
        
          缘由 VPS快到期了，不想继续维护，太累，并且香港VPS价格也不菲。
于是打算选择一个静态博客平台，原来用过的不少:jekyll,hexo,gor,pelican，最后决定Gor
选择Gor的理由有两点
 安装方便 执行效率高  安装Gor 参考Gor主页https://github.com/wendal/gor安装Gor
将Typecho文章导出为Markdown文件(.md) Github上有现成的工具typecho-exporter，主页为https://github.com/aneasystone/typecho-exporter
这个工具可以将所有的文章导出为Markdown文件，但是以文章标题为文件名，不利于后期处理，建议使用slug为文件名。
编辑下载的main.py，将75行的p.title = r[1]替换为`p.title = r[2]&#39;，如下:
results = cur.fetchall() for r in results: p = Post() p.id = r[0] p.title = r[2] p.content = r[5] posts.append(p)  原来的r[1]对应typecho_contentsSQL表中的title列，我的r[2]对应slug列，可以根据实际情况更改。
编辑typecho-exporter的config.ini文件，设置数据库访问方式。
运行main.py，完成后会在typecho-exporter目录下生成files文件夹，里面就是导出的Markdown文件。
后期整理 导出后的Markdown没有Gor需要的文件头格式，需要手动整理
这里推荐使用Notepad++批量替换
  查找目标:
  替换为&amp;mdash;\n title: title\ndate: 2015-07-20\ndescription: \npermalink: \ncategories: \ntags: \n&amp;mdash;\n
  记得将查找模式重的扩展打开。
经过以上替换，就大概有了个Gor的Markdown头格式，后面的手动工作就少了多了。
          
        
        </description>
    </item>
    
    <item>
      <title>Windows下安装Jekyll</title>
      <link>/post/install-jekyll-on-windows/</link>
      <pubDate>Wed, 20 May 2015 15:20:00 +0000</pubDate>
      
      <guid>/post/install-jekyll-on-windows/</guid>
      <description>
        
          
          
          
        
        
        
          安装Ruby/DevKit 首先从 http://rubyinstaller.org/downloads/ 下载以下两个文件进行安装
 rubyinstaller-1.9.3-p194.exe DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe  Ruby安装在D:\Ruby200, DevKit安装在D:\rubydevkit
打开CMD进入到DevKit目录，开始初始化安装
D:\rubydevkit&amp;gt;ruby dk.rb init [INFO] found RubyInstaller v2.0.0 at d:/Ruby200 Initialization complete! Please review and modify the auto-generated &#39;config.yml&#39; file to ensure it contains the root directories to all of the installed Rubies you want enhanced by the DevKit. D:\rubydevkit&amp;gt;ruby dk.rb install [INFO] Updating convenience notice gem override for &#39;d:/Ruby200&#39; [INFO] Installing &#39;d:/Ruby200/lib/ruby/site_ruby/devkit.rb&#39;  替换Gem源
天朝网路可能会引起gem安装失败，建议更换为ruby.taobao,org源
$gem sources -r http://rubygems.org/ $gem sources -a http://ruby.
          
        
        </description>
    </item>
    
    <item>
      <title>Debian下安装Jekyll</title>
      <link>/post/install-jekyll-on-debian/</link>
      <pubDate>Fri, 06 Sep 2013 19:16:00 +0000</pubDate>
      
      <guid>/post/install-jekyll-on-debian/</guid>
      <description>
        
          
          
          
        
        
        
          安装Rvm $sudo aptitude install curl $curl -L get.rvm.io | bash -s stable  加载Rvm
$source ~/.rvm/scripts/rvm  检查安装必备组件
$rvm requirements  安装 Ruby 1.9.3 $rvm install 1.9.3 $ruby -v $gem -v  更改Gem软件源
$gem sources -a http://ruby.taobao.org/ $gem sources -r http://rubygems.org/ $gem sources -l  安装Jekyll $gem install jekyll $jekyll -v  打完收工!
          
        
        </description>
    </item>
    
  </channel>
</rss>