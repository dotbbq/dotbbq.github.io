<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VPS on UNIXETC</title>
    <link>https://unixetc.com/tags/vps/</link>
    <description>UNIXETC (VPS)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 07 Feb 2016 12:32:00 +0000</lastBuildDate>
    
    <atom:link href="https://unixetc.com/tags/vps/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用net_speeder加速VPS</title>
      <link>https://unixetc.com/post/use-net-speeder-accelerate-vps/</link>
      <pubDate>Sun, 07 Feb 2016 12:32:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/use-net-speeder-accelerate-vps/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;当使用国外服务器时，经常会发现，下载速度只有十几k。平时可能不太注意，认为服务器带宽不足，或者自己使用的宽带不给力，其实很有可能原因并不在此。&lt;/p&gt;
&lt;p&gt;由于光速的局限性，延迟会比较高（即使光沿直线传播，太平洋一个往返也要一百多毫秒）。并且由于距离较远，途径路由跳数较多，并且网络拥堵的原因。经常会发生丢包的情况。&lt;/p&gt;
&lt;p&gt;对于平时使用最广泛的TCP协议来讲，发送端发出包后，接收端会回复ACK，表示自己收到了。用这种机制来保证可靠性。但对于高延迟链路来讲，如果每发送一个包都等待应答，那么大部分时间都在等待数据包到达，而链路则空置了。为此一般会采用滑动窗口技术。即在窗口满之前，发送端一直发送包，然后收到应答后将确认收到的包从窗口中移除。这样可以提高链路利用率。&lt;/p&gt;
&lt;p&gt;TCP还有一个特性则是拥塞控制。当发送端检测到链路发生丢包时，则会主动缩小窗口大小以减慢发送速度，避免拥塞。不过对于跳数较多的链路来讲，只要有一个路由不够稳定丢包，就会被发送端判断为拥塞，从而影响网络速度。&lt;/p&gt;
&lt;p&gt;为了解决丢包问题，最简单粗暴的方法就是双倍发送，即同一份数据包发送两份。这样的话在服务器带宽充足情况下，丢包率会平方级降低。&lt;/p&gt;
&lt;p&gt;这种方式下，直接优点是降低丢包率，直接缺点是耗费双倍流量。一些延伸影响是更容易触发快速恢复逻辑，避免了丢包时窗口缩减过快。一定程度也能提高网络速度。&lt;/p&gt;
&lt;p&gt;最近比较忙，空闲时间做了一个最简单的程序，试用效果很好，在一台VPS上测试后发现，未开启时单线程下载、ssh管道速度在十几K级别。开启后可以达到平均300KB+的速度。效果非常明显。但对于不加速就可以跑满带宽的类型来讲（多线程下载），开启后反而由于多出来的无效流量，导致速度减半。所以对于多线程/高速链路，这个方案是不适合的。&lt;/p&gt;
&lt;p&gt;目前版本是最简单的逻辑，未来会进行细化（主动触发快速恢复、快速重传等），降低流量浪费，提升加速效果。&lt;/p&gt;
&lt;p&gt;目前程序起名net-speeder，相对于修改协议栈来讲，由于后者需要重新升级编译内核，使用用户态程序部署更方便，稳定性更高，兼容性更好。缺点则是性能开销稍大和自由度有损失。总体比较起来，个人使用还是使用用户态程序更合适一些，特别是在虚拟机中使用（OpenVZ，LXC等虚拟机无法自己定制内核）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘自http://www.snooda.com/read/324&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;net_speeder项目主页 &lt;a href=&#34;https://github.com/snooda/net-speeder&#34;&gt;https://github.com/snooda/net-speeder&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装net_speeder&#34;&gt;安装net_speeder&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;apt-get install libnet-dev libpcap-dev -y
git clone https://github.com/snooda/net-speeder.git
cd net-speeder
sh build.sh
mv net_speeder /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用net_speeder&#34;&gt;使用net_speeder&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;ifconfig&lt;/code&gt;查看网卡端口，我的端口为&lt;code&gt;venet0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nohup net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加到开机启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;nohup net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#39; &amp;gt;&amp;gt; /etc/rc.local&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用Google Authenticator两步验证加强SSH登录</title>
      <link>https://unixetc.com/post/use-google-authenticator-set-2step-verification-strengthening-ssh-login/</link>
      <pubDate>Thu, 28 Jan 2016 12:33:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/use-google-authenticator-set-2step-verification-strengthening-ssh-login/</guid>
      <description>&lt;p&gt;Google Authenticator开源版主页 &lt;a href=&#34;https://github.com/google/google-authenticator&#34;&gt;https://github.com/google/google-authenticator&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装google-authenticator&#34;&gt;安装Google Authenticator&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;已经包含libpam-google-authenticator软件(Ubuntu 11.10以上版本),可以直接使用&lt;code&gt;apt-get&lt;/code&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install libpam-google-authenticator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他系统可以通过源码编译安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/google/google-authenticator-libpam.git
cd google-authenticator-libpam/
./bootstrap.sh
./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：在Debian7中执行&lt;code&gt;./configure&lt;/code&gt;时可能存在以下错误提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configure: error: Unable to find the PAM library or the PAM header files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在此需要安装&lt;code&gt;libpam0g-dev&lt;/code&gt;和&lt;code&gt;libtool&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get -y install libpam0g-dev libtool
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置google-authenticator&#34;&gt;设置Google Authenticator&lt;/h3&gt;
&lt;p&gt;在手机端搜索安装&lt;strong&gt;Google Authenticator&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;google-authenticator
Do you want authentication tokens to be time-based (y/n) y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后出现二维码，使用手机端&lt;strong&gt;Google Authenticator&lt;/strong&gt;扫码,接下来服务器端继续设置&lt;/p&gt;
&lt;p&gt;如果没有出现二维码，可以将提示的以**&lt;a href=&#34;https://www.google.com/chart?&#34;&gt;https://www.google.com/chart?&lt;/a&gt;**开头的连接复制到浏览器中，就可以看到二维码了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Do you want me to update your &amp;quot;/root/.google_authenticator&amp;quot; file (y/n) y

Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n) Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n) y

By default, tokens are good for 30 seconds and in order to compensate for
possible time-skew between the client and the server, we allow an extra
token before and after the current time. If you experience problems with poor
time synchronization, you can increase the window from its default
size of 1:30min to about 4min. Do you want to do so (y/n) y

If the computer that you are logging into isn&#39;t hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting (y/n) y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来将&lt;strong&gt;Google Authenticator&lt;/strong&gt;验证配置到SSH登录中&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;/etc/pam.d/sshd&lt;/code&gt;文件，添加下行保存&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth required pam_google_authenticator.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;找到下行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChallengeResponseAuthentication no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChallengeResponseAuthentication yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启SSH服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次登录的话输入用户名后就跟着提示两部验证码，然后才输入用户密码，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;login as: root
Using keyboard-interactive authentication.
Verification code:
Using keyboard-interactive authentication.
Password:
Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 2.6.32-042stab108.8 i686)

* Documentation:  https://help.ubuntu.com/
Last login: Thu Jan 28 15:04:20 2016 from 61.185.216.146
root@hkvps:~#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;参考 &lt;a href=&#34;https://wzyboy.im/post/765.html&#34;&gt;https://wzyboy.im/post/765.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>安装Nginx和ngx_pagespeed</title>
      <link>https://unixetc.com/post/install-nginx-and-ngx_pagespeed-on-vps/</link>
      <pubDate>Fri, 24 Jul 2015 17:24:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-nginx-and-ngx_pagespeed-on-vps/</guid>
      <description>&lt;p&gt;VPS配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ubuntu 14.04 x86
RAM 512M
SWAP 64M
DISK 5G
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;准备工作&#34;&gt;准备工作&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update&amp;amp;&amp;amp;apt-get upgrade -y
sudo apt-get install build-essential zlib1g-dev libpcre3 libpcre3-dev unzip libssl-dev -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;下载ngx_pagespeed&#34;&gt;下载ngx_pagespeed&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd
NPS_VERSION=1.9.32.4
wget https://github.com/pagespeed/ngx_pagespeed/archive/release-${NPS_VERSION}-beta.zip
unzip release-${NPS_VERSION}-beta.zip
cd ngx_pagespeed-release-${NPS_VERSION}-beta/
wget https://dl.google.com/dl/page-speed/psol/${NPS_VERSION}.tar.gz
tar -xzvf ${NPS_VERSION}.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装nginx&#34;&gt;安装Nginx&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd
groupadd www
useradd -s /sbin/nologin -g www www
NGINX_VERSION=1.8.0
wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
tar -xvzf nginx-${NGINX_VERSION}.tar.gz
cd nginx-${NGINX_VERSION}/
./configure \
--user=www \
--group=www  \
--prefix=/usr/local/nginx \
--with-http_stub_status_module \
--with-http_ssl_module \
--with-http_spdy_module \
--with-http_gzip_static_module \
--with-http_sub_module \
--add-module=$HOME/ngx_pagespeed-release-${NPS_VERSION}-beta \

sudo make
sudo make install
sudo ln -sf /usr/local/nginx/sbin/nginx /usr/bin/nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;code&gt;/etc/init.d/nginx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx -O /etc/init.d/nginx
sudo chmod +x /etc/init.d/nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;管理Nginx服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试安装结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@bwgvps:~# nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置ngx_pagespeed&#34;&gt;配置ngx_pagespeed&lt;/h3&gt;
&lt;p&gt;编辑Nginx的配置文件(/usr/local/nginx/conf/nginx.conf)&lt;/p&gt;
&lt;p&gt;在server段内添加&lt;code&gt;include gp.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/usr/local/nginx/conf/&lt;/code&gt;内新建&lt;code&gt;gp.conf&lt;/code&gt;,内容如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pagespeed on;
pagespeed FileCachePath /usr/local/nginx/pagespeed/;
pagespeed RewriteLevel PassThrough;
pagespeed EnableFilters collapse_whitespace;
pagespeed EnableFilters canonicalize_javascript_libraries;
pagespeed EnableFilters combine_css;
pagespeed EnableFilters combine_javascript;
pagespeed EnableFilters elide_attributes;
pagespeed EnableFilters extend_cache;
pagespeed EnableFilters flatten_css_imports;
pagespeed CssFlattenMaxBytes 5120;
pagespeed EnableFilters lazyload_images;
pagespeed EnableFilters rewrite_javascript;
pagespeed EnableFilters rewrite_images;
pagespeed EnableFilters insert_dns_prefetch;
pagespeed EnableFilters prioritize_critical_css;	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nginx reload后，用&lt;code&gt;curl&lt;/code&gt;验证是否开启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@bwgvps:~# curl -I 127.0.0.1
HTTP/1.1 200 OK
Server: nginx/1.8.0
Content-Type: text/html
Connection: keep-alive
Date: Sat, 07 Feb 1970 00:54:49 GMT
X-Page-Speed: 1.9.32.4-7251
Cache-Control: max-age=0, no-cache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上X-Page-Speed代表已经OK!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source&#34;&gt;https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JasonGiedymin/nginx-init-ubuntu&#34;&gt;https://github.com/JasonGiedymin/nginx-init-ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lnmp.org&#34;&gt;http://lnmp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>将Nginx更换为H2O</title>
      <link>https://unixetc.com/post/install-h2o-on-bandwagon-vps/</link>
      <pubDate>Tue, 21 Jul 2015 17:31:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-h2o-on-bandwagon-vps/</guid>
      <description>&lt;h3 id=&#34;安装必须的软件&#34;&gt;安装必须的软件&lt;/h3&gt;
&lt;p&gt;预备工具软件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#apt-get install autoconf automake m4 build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;libssl-dev &lt;strong&gt;必选&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#apt-get install openssl libssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下为可选包，可自行搜索安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libuv&lt;/li&gt;
&lt;li&gt;libyaml&lt;/li&gt;
&lt;li&gt;wslay&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装h2o&#34;&gt;安装H2O&lt;/h3&gt;
&lt;p&gt;下载安装最新版h2o  &lt;a href=&#34;https://github.com/h2o/h2o/releases&#34;&gt;https://github.com/h2o/h2o/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#wget https://github.com/h2o/h2o/archive/v1.4.1.tar.gz
#tar zxf v1.4.1.tar.gz
#cd h2o-1.4.1
#cmake -DWITH_BUNDLED_SSL=on .
#make
#sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;编辑h2o站点配置文件&#34;&gt;编辑H2O站点配置文件&lt;/h3&gt;
&lt;p&gt;以下是一个简单的http与https配置文件，可自行参考修改&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hosts:
&amp;quot;www.example.com&amp;quot;:
    listen:
    port: 80
    listen:
    port: 443
    ssl:
        certificate-file: /path/to/server-certificate.crt
        key-file:         /path/to/private-key.crt
    paths:
    &amp;quot;/&amp;quot;:
        file.dir: /path/to/doc-root

access-log: /path/to/the/access-log
error-log: /path/to/the/error-log
pid-file: /path/to/the/pid-file
http2-reprioritize-blocking-assets: ON   # performance tuning option
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动H2O&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#h2o h2o.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以daemon模式启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#h2o -m daemon -c h2o.conf&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>将博客从Typcho转移至Gor</title>
      <link>https://unixetc.com/post/typecho-converted-to-gor/</link>
      <pubDate>Mon, 20 Jul 2015 17:20:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/typecho-converted-to-gor/</guid>
      <description>&lt;h3 id=&#34;缘由&#34;&gt;缘由&lt;/h3&gt;
&lt;p&gt;VPS快到期了，不想继续维护，太累，并且香港VPS价格也不菲。&lt;/p&gt;
&lt;p&gt;于是打算选择一个静态博客平台，原来用过的不少:jekyll,hexo,gor,pelican，最后决定Gor&lt;/p&gt;
&lt;p&gt;选择Gor的理由有两点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装方便&lt;/li&gt;
&lt;li&gt;执行效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装gor&#34;&gt;安装Gor&lt;/h3&gt;
&lt;p&gt;参考Gor主页&lt;a href=&#34;https://github.com/wendal/gor&#34;&gt;https://github.com/wendal/gor&lt;/a&gt;安装Gor&lt;/p&gt;
&lt;h3 id=&#34;将typecho文章导出为markdown文件md&#34;&gt;将Typecho文章导出为Markdown文件(.md)&lt;/h3&gt;
&lt;p&gt;Github上有现成的工具&lt;strong&gt;typecho-exporter&lt;/strong&gt;，主页为&lt;a href=&#34;https://github.com/aneasystone/typecho-exporter&#34;&gt;https://github.com/aneasystone/typecho-exporter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个工具可以将所有的文章导出为Markdown文件，但是以文章标题为文件名，不利于后期处理，建议使用slug为文件名。&lt;/p&gt;
&lt;p&gt;编辑下载的&lt;code&gt;main.py&lt;/code&gt;，将75行的&lt;code&gt;p.title = r[1]&lt;/code&gt;替换为`p.title = r[2]&#39;，如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;results = cur.fetchall()
for r in results:
    p = Post()
    p.id = r[0]
    p.title = r[2]
    p.content = r[5]
    posts.append(p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原来的&lt;code&gt;r[1]&lt;/code&gt;对应&lt;code&gt;typecho_contents&lt;/code&gt;SQL表中的&lt;code&gt;title&lt;/code&gt;列，我的&lt;code&gt;r[2]&lt;/code&gt;对应&lt;code&gt;slug&lt;/code&gt;列，可以根据实际情况更改。&lt;/p&gt;
&lt;p&gt;编辑&lt;strong&gt;typecho-exporter&lt;/strong&gt;的&lt;code&gt;config.ini&lt;/code&gt;文件，设置数据库访问方式。&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;main.py&lt;/code&gt;，完成后会在&lt;strong&gt;typecho-exporter&lt;/strong&gt;目录下生成&lt;strong&gt;files&lt;/strong&gt;文件夹，里面就是导出的Markdown文件。&lt;/p&gt;
&lt;h3 id=&#34;后期整理&#34;&gt;后期整理&lt;/h3&gt;
&lt;p&gt;导出后的Markdown没有Gor需要的文件头格式，需要手动整理&lt;/p&gt;
&lt;p&gt;这里推荐使用Notepad++批量替换&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://cdn.lyq.wiki/imgs/insert_gor_markdown_header.png&#34; alt=&#34;插入Hexo的Markdown头格式&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查找目标:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;替换为&amp;mdash;\n
title: title\ndate: 2015-07-20\ndescription: \npermalink: \ncategories: \ntags: \n&amp;mdash;\n&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记得将查找模式重的扩展打开。&lt;/p&gt;
&lt;p&gt;经过以上替换，就大概有了个Gor的Markdown头格式，后面的手动工作就少了多了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux VPS中安装Shadowsocks</title>
      <link>https://unixetc.com/post/linux-vps-install-shadowsocks/</link>
      <pubDate>Sat, 13 Dec 2014 23:12:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/linux-vps-install-shadowsocks/</guid>
      <description>&lt;p&gt;&lt;strong&gt;VPS系统版本:&lt;/strong&gt; Ubuntu 12.04 32bit&lt;/p&gt;
&lt;h3 id=&#34;最简单的办法&#34;&gt;最简单的办法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#apt-get install python-pip
#pip install shadowsocks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动Shadowsock&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ssserver -p 4000 -k sss4k -d start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-p&lt;/code&gt;后定义端口号，&lt;code&gt;-k&lt;/code&gt;后面设定密码，&lt;code&gt;-d start&lt;/code&gt;代表以&lt;strong&gt;daemon&lt;/strong&gt;方式启动&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面是另外一种方法:&lt;/p&gt;
&lt;h3 id=&#34;安装shadowsocks-libev&#34;&gt;安装shadowsocks-libev&lt;/h3&gt;
&lt;p&gt;先用&lt;code&gt;aptitude show&lt;/code&gt;查看libssl-dev版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aptitude show libssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后根据版本执行以下修改：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;libssl &amp;gt; 1.0.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;添加下行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://shadowsocks.org/debian wheezy main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;libssl &amp;gt; 0.9.8 但 &amp;lt; 1.0.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;添加下行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deb http://shadowsocks.org/debian squeeze main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加GPG&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://shadowsocks.org/debian/1D27208A.gpg
sudo apt-key add 1D27208A.gpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加完成后更新软件源，然后安装shadowsocks&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install python-m2crypto
sudo apt-get install shadowsocks-libev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置管理shadowsocks服务&#34;&gt;配置/管理shadowsocks服务&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/shadowsocks-libev/config.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下为一则配置实例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@hkvps:~# cat /etc/shadowsocks-libev/config.json 
{
    &amp;quot;server&amp;quot;:&amp;quot;118.193.151.193&amp;quot;,
    &amp;quot;server_port&amp;quot;:&amp;quot;8388&amp;quot;,
    &amp;quot;local_port&amp;quot;:&amp;quot;1080&amp;quot;,
    &amp;quot;password&amp;quot;:&amp;quot;foolish&amp;quot;,
    &amp;quot;timeout&amp;quot;:&amp;quot;60&amp;quot;,
    &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;管理shadowsocks服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/shadowsocks-libev start  //开启服务
sudo /etc/init.d/shadowsocks-libev stop   //关闭服务&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>VPS优化</title>
      <link>https://unixetc.com/post/optimization-vps/</link>
      <pubDate>Sat, 01 Feb 2014 12:31:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/optimization-vps/</guid>
      <description>&lt;h3 id=&#34;pdksh替代bash&#34;&gt;pdksh替代bash&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt-get install pdksh
$sudo vi /etc/shells
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加/bin/pdksh到/etc/shells文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$chsh -s /bin/pdksh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新登录即可。&lt;/p&gt;
&lt;h3 id=&#34;修改ssh端口&#34;&gt;修改SSH端口&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#vi /etc/ssh/sshd_config    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将Port 22中的22改为自定义数字即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /etc/init.d/ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dropbear替代openssh&#34;&gt;dropbear替代openssh&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt-get install dropbear
$sudo /etc/init.d/ssh stop
$sudo vi /etc/default/dropbear
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改NO_START=&lt;strong&gt;0&lt;/strong&gt;,修改DROPBEAR_PORT为自定义端口号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo /etc/init.d/dropbear start
$sudo apt-get remove openssh-server
$sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;关闭多余的tty&#34;&gt;关闭多余的TTY&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu 12.04 server&lt;/strong&gt;如下操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#cd /etc/init/
#mv tty2.conf tty2.conf.bak
#mv tty3.conf tty2.conf.bak
#mv tty4.conf tty2.conf.bak
#mv tty5.conf tty2.conf.bak
#mv tty6.conf tty2.conf.bak
#reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Debian 7&lt;/strong&gt;如下操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi /etc/inittab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到如下行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1:2345:respawn:/sbin/getty 38400 tty1
2:23:respawn:/sbin/getty 38400 tty2
3:23:respawn:/sbin/getty 38400 tty3
4:23:respawn:/sbin/getty 38400 tty4
5:23:respawn:/sbin/getty 38400 tty5
6:23:respawn:/sbin/getty 38400 tty6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将不需要的行注释掉(#)即可，重启完成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VPS下自动备份文件和数据库</title>
      <link>https://unixetc.com/post/automatic-backup-files-and-database-on-vps/</link>
      <pubDate>Mon, 13 Jan 2014 01:13:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/automatic-backup-files-and-database-on-vps/</guid>
      <description>&lt;p&gt;新建脚本，名为&lt;strong&gt;autoback.sh&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi autoback.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;脚本(autoback.sh)内容如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

#备份网站目录/home/www/
tar zcvf /home/backup/www$(date + &amp;quot;%Y%m%d&amp;quot;).tar.gz /home/www/*

#备份数据库 www
/usr/local/mysql/bin/mysqldump -uroot -ppassword dbname &amp;gt; /home/backup/dbname$(date +&amp;quot;%Y%m%d&amp;quot;).sql

#删除三天前的备份
cd /home/backup/
rm -f *$(date -d -3day +&amp;quot;%Y%m%d&amp;quot;)*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将脚本(autoback.sh)添加到自动执行任务列表:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#chmod +x autoback.sh
#crontab -e
59 23 * * * /root/autoback.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://db.tt/i3IUvwPq&#34; title=&#34;注册Dropbox&#34;&gt;推荐注册Dropbox&lt;/a&gt;&lt;/strong&gt;，参考**&lt;a href=&#34;https://unixetc.com/post/cli-model-of-linux-using-dropbox/&#34;&gt;Linux下CLI模式使用Dropbox&lt;/a&gt;**，将备份文件自动同步到Dropbox。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>