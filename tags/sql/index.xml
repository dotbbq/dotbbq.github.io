<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on UNIXETC</title>
    
    
    
    <link>/tags/sql/</link>
    <description>Recent content in sql on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jul 2015 17:20:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将博客从Typcho转移至Gor</title>
      <link>/post/typecho-converted-to-gor/</link>
      <pubDate>Mon, 20 Jul 2015 17:20:00 +0000</pubDate>
      
      <guid>/post/typecho-converted-to-gor/</guid>
      <description>
        
          
          
          
        
        
        
          缘由 VPS快到期了，不想继续维护，太累，并且香港VPS价格也不菲。
于是打算选择一个静态博客平台，原来用过的不少:jekyll,hexo,gor,pelican，最后决定Gor
选择Gor的理由有两点
 安装方便 执行效率高  安装Gor 参考Gor主页https://github.com/wendal/gor安装Gor
将Typecho文章导出为Markdown文件(.md) Github上有现成的工具typecho-exporter，主页为https://github.com/aneasystone/typecho-exporter
这个工具可以将所有的文章导出为Markdown文件，但是以文章标题为文件名，不利于后期处理，建议使用slug为文件名。
编辑下载的main.py，将75行的p.title = r[1]替换为`p.title = r[2]&#39;，如下:
results = cur.fetchall() for r in results: p = Post() p.id = r[0] p.title = r[2] p.content = r[5] posts.append(p)  原来的r[1]对应typecho_contentsSQL表中的title列，我的r[2]对应slug列，可以根据实际情况更改。
编辑typecho-exporter的config.ini文件，设置数据库访问方式。
运行main.py，完成后会在typecho-exporter目录下生成files文件夹，里面就是导出的Markdown文件。
后期整理 导出后的Markdown没有Gor需要的文件头格式，需要手动整理
这里推荐使用Notepad++批量替换
  查找目标:
  替换为&amp;mdash;\n title: title\ndate: 2015-07-20\ndescription: \npermalink: \ncategories: \ntags: \n&amp;mdash;\n
  记得将查找模式重的扩展打开。
经过以上替换，就大概有了个Gor的Markdown头格式，后面的手动工作就少了多了。
          
        
        </description>
    </item>
    
    <item>
      <title>Mapinfo中通过SQL查询筛选区域点</title>
      <link>/post/mapinfo-iris-out-points-with-sql-select/</link>
      <pubDate>Wed, 24 Dec 2014 12:24:00 +0000</pubDate>
      
      <guid>/post/mapinfo-iris-out-points-with-sql-select/</guid>
      <description>
        
          
          
          
        
        
        
          Mapinfo中有一批离散点，现在需要把一部分点筛选出来，可以使用SQL查询功能导出。
首先，打开需要筛选的图层：
然后打开装饰层可编辑：
设置不规则图形样式，建议将填充去掉只留下边框：
使用不规则图形圈出所需要的采样点
注意：边线不要压着采样点，被压线的采样点不算做圈选有效。 Map-&amp;gt;Save Cosmetic Objects 保存装饰图层，这里取名123 然后使用SQL查询功能进行查询
SQL查询时，选择需要交叉的两个图层
查询完成后，Table-&amp;gt;Export 导出查询结果 导出时设置参考下图，可选择**.mif**、**.txt**、**.csv**格式 
          
        
        </description>
    </item>
    
    <item>
      <title>MySQL使用实例</title>
      <link>/post/mysql-usages/</link>
      <pubDate>Thu, 19 Apr 2012 14:19:00 +0000</pubDate>
      
      <guid>/post/mysql-usages/</guid>
      <description>
        
          
          
          
        
        
        
          误删除了vps上的phpmyadmin，不得已翻阅了半天mysql指南，以下是一些mysql使用实例
连接管理 链接数据库
mysql -h localhost -u root -p  退出数据库
mysql&amp;gt;quit;  数据库管理 查看数据库
mysql&amp;gt;show databases;  建立数据库
mysql&amp;gt;create database name;  备份(导出)数据库
mysqldump -u username -p database &amp;gt; backup_db.sql  还原(导入)数据库
mysql -u username -p database &amp;lt; backup_db.sql  用户管理 添加用户
mysql&amp;gt;grant all privileges on databasename.* &#39;username&#39;@&#39;localhost&#39; identified by &#39;userpassword&#39; with grant optiton;  删除用户
mysql&amp;gt;drop user username;  修改密码
mysql&amp;gt;set password for &#39;username&#39;@&#39;localhost&#39; = password(&#39;userpassword&#39;);  一个创建数据库并添加专用用户的示例:
          
        
        </description>
    </item>
    
  </channel>
</rss>