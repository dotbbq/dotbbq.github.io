<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on UNIXETC</title>
    
    
    
    <link>/tags/linux/</link>
    <description>Recent content in Linux on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows10下访问WSL目录</title>
      <link>/post/access-wsl-directory-in-windows10/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/access-wsl-directory-in-windows10/</guid>
      <description>
        
          
          
          
        
        
        
          Windows10下访问WSL目录的方法其实很简单，如下所示:
➜ post git:(master) explorer.exe . 即可通过文件浏览器打开当前目录。
          
        
        </description>
    </item>
    
    <item>
      <title>Nginx V2ray and WebSocket</title>
      <link>/post/nginx-v2ray-websocket/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/nginx-v2ray-websocket/</guid>
      <description>
        
          
          
          
        
        
        
          安装v2ray/nginx v2ray安装可以参考Ubuntu中v2ray客户端配置实例.
Nginx安装推荐使用OneinStack一键安装脚本
准备好使用的域名，这里以v.fuckgfw.cn为例。
v2ray/nginx服务端配置 v2ray安装好后，服务端配置/etc/v2ray/config.json如下:
{ &amp;quot;inbounds&amp;quot;: [{ &amp;quot;port&amp;quot;: 99999, //代理端口号 &amp;quot;listen&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;protocol&amp;quot;: &amp;quot;vmess&amp;quot;, &amp;quot;settings&amp;quot;: { &amp;quot;clients&amp;quot;: [{ &amp;quot;id&amp;quot;: &amp;quot;5c1eed18-fse4-41fs-9as9-e85s45bds9ef&amp;quot;, &amp;quot;level&amp;quot;: 1, &amp;quot;alterId&amp;quot;: 64 }] }, &amp;quot;streamSettings&amp;quot;: { &amp;quot;network&amp;quot;: &amp;quot;ws&amp;quot;, &amp;quot;wsSettings&amp;quot;: { &amp;quot;path&amp;quot;: &amp;quot;/fcgfw&amp;quot; //代理目录 } } }], &amp;quot;outbounds&amp;quot;: [{ &amp;quot;protocol&amp;quot;: &amp;quot;freedom&amp;quot;, &amp;quot;settings&amp;quot;: {} }, { &amp;quot;protocol&amp;quot;: &amp;quot;blackhole&amp;quot;, &amp;quot;settings&amp;quot;: {}, &amp;quot;tag&amp;quot;: &amp;quot;blocked&amp;quot; }], &amp;quot;routing&amp;quot;: { &amp;quot;rules&amp;quot;: [{ &amp;quot;type&amp;quot;: &amp;quot;field&amp;quot;, &amp;quot;ip&amp;quot;: [&amp;quot;geoip:private&amp;quot;], &amp;quot;outboundTag&amp;quot;: &amp;quot;blocked&amp;quot; }] } } 使用OneinStack一键脚本新建一个站点，域名为v.fuckgfw.cn，采用SSL加密模式，完成后编辑/usr/local/nginx/conf/vhost/v.fuckgfw.cn.conf文件
参考以下修改：
          
        
        </description>
    </item>
    
    <item>
      <title>斐讯N1系统信息和UNIXBENCH跑分</title>
      <link>/post/phicomm-n1-unixbench-score-and-system-information/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/phicomm-n1-unixbench-score-and-system-information/</guid>
      <description>
        
          
          
          
        
        
        
          系统信息 alair@aml:~ $ inxi -F System: Host: aml Kernel: 5.5.0-rc6-aml-s9xxx aarch64 bits: 32 Console: tty 0 Distro: Ubuntu 18.04.4 LTS Machine: No /sys/class/dmi; using dmidecode: dmidecode is not installed. CPU: Quad core ARMv8 rev 4 (v8l) (-MCP-) (ARM) clock speeds: max: 1512 MHz 1: 1512 MHz 2: 1512 MHz 3: 1512 MHz 4: 1512 MHz Graphics: Card: Failed to Detect Video Card! Display Server: N/A driver: N/A tty size: 254x72 Advanced Data: N/A out of X Audio: Card AMLGX driver: AMLGX Sound: ALSA v: k5.
          
        
        </description>
    </item>
    
    <item>
      <title>YandexDisk命令行客户端</title>
      <link>/post/yandex-disk-console-client-for-linux/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/yandex-disk-console-client-for-linux/</guid>
      <description>
        
          
          
          
        
        
        
          Linux的Yandex.Disk控制台客户端使您可以在Yandex.Disk上管理文件，而无需使用窗口界面或支持WebDAV的程序。
与WebDAV连接相比，使用控制台客户端的优势：
 Low system resource requirements. Faster file reading and writing speeds. Faster syncing with the Yandex.Disk server. Manage files offline.  控制台客户端可以安装在以下操作系统上：
 Ubuntu Linux 8.04 及以上版本 Debian 5 及以上版本 Fedora 9 及以上版本 Red Hat Enterprise Linux 6 及以上版本 CentOS 6 及以上版本  安装客户端 要自动安装客户端，请使用命令进行快速软件包安装。
.deb软件包 安装示例
echo &amp;quot;deb http://repo.yandex.ru/yandex-disk/deb/ stable main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/yandex-disk.list &amp;gt; /dev/null wget http://repo.yandex.ru/yandex-disk/YANDEX-DISK-KEY.GPG -O- | sudo apt-key add - sudo apt-get update sudo apt-get install -y yandex-disk 要手动安装客户端，请从下面的相应链接下载相应版本的软件包。
          
        
        </description>
    </item>
    
    <item>
      <title>CentOS安装Hugo</title>
      <link>/post/centos-install-hugo-via-repo/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/centos-install-hugo-via-repo/</guid>
      <description>
        
          
          
          
        
        
        
          Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
新建hugo.repo文件，sudo vi /etc/yum.repos.d/hugo.repo，填入以下内容。
[daftaupe-hugo] name=Copr repo for hugo owned by daftaupe baseurl=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/epel-7-$basearch/ type=rpm-md skip_if_unavailable=True gpgcheck=1 gpgkey=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/pubkey.gpg repo_gpgcheck=0 enabled=1 保存后更新安装Hugo
sudo yum update sudo yum install hugo -y 
          
        
        </description>
    </item>
    
    <item>
      <title>Gnome美化简介</title>
      <link>/post/gnome-landscaping-guide/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/gnome-landscaping-guide/</guid>
      <description>
        
          
          
          
        
        
        
          安装必要软件 sudo apt install gnome-tweak-tool chrome-gnome-shell 安装Gnome Shell Extensions 使用Firefox浏览https://extensions.gnome.org/，第一次访问根据提示安装Firefox插件，如下图:
安装完成后，访问https://extensions.gnome.org/搜索安装以下三个GnomeShellExtension
 User Themes 加载用户主题，加载目录为~/.local/share/themes Dash to Dock 定制 Dash/Dock Gnome Global Application Menu Gnome全局菜单  安装方法如下，进入到扩展详情后，点击标题后的开关，按照提示安装即可
安装主题 访问https://www.gnome-look.org/，在GTK3 Themes分类下下载主题，下载后解压拷贝至~/.local/share/themes下，然后打开gnome-tweak，在外观中即可选择已安装的主题。
在~/.local/share/下新建themes、icons和fonts三个目录，分别对应主题、图标、字体，这些资源都可以在https://www.gnome-look.org/找得到。
以下为本人的桌面截图，仅供参考：
          
        
        </description>
    </item>
    
    <item>
      <title>在Linux中安装Windows字体</title>
      <link>/post/linux-install-windows-fonts/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/linux-install-windows-fonts/</guid>
      <description>
        
          
          
          
        
        
        
          使用的系统为Ubuntu 19.10，Windows系统分区lable为sys
参考如下操作：
alair@e6440:~$ sudo mkdir /usr/share/fonts/winfonts [sudo] alair 的密码： alair@e6440:~$ sudo cp /media/alair/sys/Windows/Fonts/* /usr/share/fonts/winfonts/ alair@e6440:~$ sudo rm -rf /usr/share/fonts/winfonts/*.fon alair@e6440:~$ sudo mkfontscale alair@e6440:~$ sudo mkfontdir alair@e6440:~$ sudo fc-cache 打完收工！
          
        
        </description>
    </item>
    
    <item>
      <title>Armbian更改软件源</title>
      <link>/post/armbian-change-software-source/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/armbian-change-software-source/</guid>
      <description>
        
          
          
          
        
        
        
          上一篇文章介绍了如何在斐迅N1上安装Armbian，现在介绍如何更改软件源为国内镜像。
编辑/etc/apt/sources.list替换为以下内容：
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free deb http://ftp.debian.org/debian jessie-backports main 接着编辑/etc/apt/sources.list.d/armbian.list ，替换为以下内容：
deb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop 保存后，刷新缓存更新系统：
sudo apt update sudo apt upgrade -y 
          
        
        </description>
    </item>
    
    <item>
      <title>斐讯N1安装Armbian</title>
      <link>/post/phicomm-n1-install-armbian/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/phicomm-n1-install-armbian/</guid>
      <description>
        
          
          
          
        
        
        
          最近入手斐讯N1一枚，买的是白色未拆封，到手版本为V2.19_0307_NS，刚好省了降级的麻烦，以下为斐讯N1安装armbian操作过程。
开启adb调试模式 将N1通过HDMI连接显示器，将鼠标插到N1的USB口上，开机后用鼠标点击系统版本:V2.19_0307_NS区域，多次点击后会出现提示&amp;quot;开启adb调试模式&amp;rdquo;，即可。
从此下载minimal_adb_fastboot，下载后安装。
准备刷机U盘 准备一个不小区8G的U盘，下载镜像写入工具balenaEtcher，下载后安装。
下载Armbian镜像，在此以Armbian_5.98_Aml-g12_Debian_buster_dev_5.4.0-rc4_20191025.img.xz为例，镜像为debian最新版，不带桌面系统。如果需要其他的可以从此处自行下载。
Armbian_5.98_Aml-g12_Debian_buster_dev_5.4.0-rc4_20191025.img.xz
将下载后的镜像文件用balenaEtcher写入U盘，写入完成后先别拔掉U盘，进入到BOOT分区，找到uEnv.ini文件，将dtb_name行改为如下内容：
 dtb_name=/dtb/amlogic/meson-gxl-s905d-phicomm-n1.dtb
 然后退出U盘备用。
如果你的BOOT分区下/dtd/amlogic/目录中没有meson-gxl-s905d-phicomm-n1.dtb文件，那么可以点击meson-gxl-s905d-phicomm-n1.dtb下载放入相应目录即可。
从U盘引导Armbian 将制作好的系统U盘插到靠近HDMI一侧的U口，另外一个U口插入双公头的刷机线连接电脑，将N1通过HDMI连接显示器，并且插好网线然后开机。
开机后可以从显示器上看到盒子的IP地址，电脑上运行Minimal ADB and Fastboot，然后输入adb connect 192.168.1.54命令连接盒子，连接成功后会有如下提示：
 connected to 192.168.1.54:5555
 然后输入adb shell reboot update开始从U盘引导Armbian系统，盒子重启后成功引导armbian，此时可以将usb刷机线拔掉，插入一个外接键盘，开始后面操作。
Armbian系统默认账号为root，密码为1234，按照提示输入账号信息进行登录，登录后会有更改默认密码提示，按照提示更改默认密码。
接下来会有新建账号提示:
Creating a new user account. Press &amp;lt;Ctrl-C&amp;gt; to abort Please provide a username (eg. your forename): 可以按照该提示新建账号，或者按Ctrl+c终止，继续用root账号登录。
将Armbian安装到N1中 以上只是从U盘成功引导登录Armbian，接下来我们将Armbian安装到N1内置存储(eMMC)，即可拔掉U盘了。
如果是通过root登录的话，那么直接运行root目录下install.sh即可安装，如下：
 root@aml:~# ./install. sh Start script create MBR and filesystem /dev/mmcblk1 Start backup u-boot default 4＋0 records in 4＋0 records out 4194304 bytes（4.
          
        
        </description>
    </item>
    
    <item>
      <title>Debian10中sudo配置</title>
      <link>/post/sudo-configuration-in-debian10/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/sudo-configuration-in-debian10/</guid>
      <description>
        
          
          
          
        
        
        
          Debian10中/etc/sudoers中提示了需要通过visudo来编辑该文件，如下：
 This file MUST be edited with the &amp;lsquo;visudo&amp;rsquo; command as root.
 但奇葩的是系统中没有visudo命令，apt搜索也搜不到，-_-!
因此只能通过以下方法来编辑：
#echo &amp;quot;alair ALL=(ALL:ALL) ALL&amp;quot; &amp;gt;&amp;gt; /etc/sudoers  保存后用户alair就可以使用sudo命令来进行root权限操作了。
          
        
        </description>
    </item>
    
    <item>
      <title>CentOS7安装ffsend快速分享文件</title>
      <link>/post/centos7-install-ffsend-to-share-files/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/centos7-install-ffsend-to-share-files/</guid>
      <description>
        
          
          
          
        
        
        
          Firefox Send是什么？ Firefox Send是一个简单、私密的文件分享服务，使用Firefox Send端到端加密分享文件，链接到期即焚。分享更私密，文件到期真正无痕迹。
安装ffsend ffsend是一款Firefox Send的客户端，支持多种操作系统(Linux、Windows、MacOS&amp;hellip;)
以下为CentOS7安装ffsend实例：
#wget https://glare.now.sh/timvisee/ffsend/linux-x64-static -o /usr/local/bin/ffsend #chmod +x /usr/local/bin/ffsend  其他版本安装可以参考ffsend官网和ffsend官方下载
ffsend使用方法 上传文件
ffsend upload fenix.apk Upload complete https://send.firefox.com/download/4cecb9c1ab628f8e/#m5is-YRSfnBIQ-pBaSds0A  高级上传
 指定下再限制20
输入密码加密文件
在上传之前归档文件
将共享链接复制到剪贴板
在浏览器中打开共享链接
 ffsend upload --downloads 20 --password --archive --copy --open fenix.apk Password: ****** https://send.firefox.com/download/4cecb9c1ab628f8e/#m5is-YRSfnBIQ-pBaSds0A  上传到自定义主机
ffsend u -h https://example.com/ my-file.txt https://example.com/#sample-share-url  下载文件
ffsend download https://send.firefox.com/download/4cecb9c1ab628f8e/#m5is-YRSfnBIQ-pBaSds0A  
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu中v2ray客户端配置实例</title>
      <link>/post/v2ray-client-configuration-example-in-ubuntu/</link>
      <pubDate>Sat, 18 May 2019 09:00:00 +0000</pubDate>
      
      <guid>/post/v2ray-client-configuration-example-in-ubuntu/</guid>
      <description>
        
          
          
          
        
        
        
          推荐使用WebSocket传输模式，详细配置可参考Nginx V2ray and WebSocket.
首先使用bash &amp;lt;(curl -L -s https://install.direct/go.sh)来快捷安装v2ray，如下：
root@vm:~# bash &amp;lt;(curl -L -s https://install.direct/go.sh) Installing V2Ray v4.18.0 on x86_64 Downloading V2Ray: https://github.com/v2ray/v2ray-core/releases/download/v4.18.0/v2ray-linux-64.zip % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 608 0 608 0 0 581 0 --:--:-- 0:00:01 --:--:-- 581 100 10.5M 100 10.5M 0 0 172k 0 0:01:02 0:01:02 --:--:-- 194k Extracting V2Ray package to /tmp/v2ray. Archive: /tmp/v2ray/v2ray.
          
        
        </description>
    </item>
    
    <item>
      <title>VMware安装Alpine Linux实例</title>
      <link>/post/vmware-installs-alpine-linux-instance/</link>
      <pubDate>Tue, 14 May 2019 12:59:00 +0000</pubDate>
      
      <guid>/post/vmware-installs-alpine-linux-instance/</guid>
      <description>
        
          
          
          
        
        
        
          AlpineLinux介绍 Alpine 的意思是“高山的”，比如 Alpine plants高山植物，Alpine skiing高山滑雪、the alpine resort阿尔卑斯山胜地。
Alpine Linux 网站首页注明“Small！Simple！Secure！Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.”概括了以下特点：
 小巧：基于Musl libc和busybox，和busybox一样小巧，最小的Docker镜像只有5MB； 安全：面向安全的轻量发行版； 简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。 适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。  准备工作 安装VMware虚拟机软件，新建虚拟机，配置如下：
下载AlpineLinux镜像文件alpine-standard-3.9.4-x86_64.iso，下载地址: https://www.alpinelinux.org/downloads/ 设置虚拟机光驱挂载镜像文件alpine-standard-3.9.4-x86_64.iso。
开始安装Alpine Linux 启动虚拟机，开始从光驱引导系统，进入系统后，输入root登录，然后输入setup-alpine开始启动安装程序。
下来设置键盘布局(us)、主机名(vm)以及网络配置：
接着设置时区(timezone)
然后是网络代理和网络时间同步(NTP)设置
接下里选择软件源镜像(mirrors)，我选择了兰州大学的镜像：
然后选择SSH服务程序，设置安装磁盘以及使用方式，完成安装后会提示**Installation is complete. Please reboot.**至此安装完成。
安装Awesome桌面 添加普通用户 #adduser alair  启用Community Repository vi /etc/apk/repositories编辑软件源配置，去掉其中Community Repository前面的注释符(#)
apk update&amp;amp;&amp;amp;apk upgrade更新软件。
安装awesome 使用以下命令安装awesome、lua、feh和lxterminal
#apk add awesome lua feh lxterminal  其他桌面应用可以按需添加，比如firefox, gnumeric, xchat, gimp, pidgin, geany, vim等。
          
        
        </description>
    </item>
    
    <item>
      <title>NokiaN900刷机方法</title>
      <link>/post/nokia-n900-installation-firmware/</link>
      <pubDate>Wed, 01 May 2019 12:14:00 +0000</pubDate>
      
      <guid>/post/nokia-n900-installation-firmware/</guid>
      <description>
        
          
          
          
        
        
        
          刷机工具以及固件文件下再地址见文章末尾。
首先安装刷机工具maemo flasher，然后下载固件，固件分以下两个文件，下载地址https://blbl.dev/NokiaN900/index.html
 emmc(vanilla) firmware(combined)  切记，先刷emmc再刷firmware，并且两次刷机中间不可以开机。
将手机关机，然后按住键盘上的u键，再用数据线将手机链接电脑，这是手机会显示NOKIA字样界面，并且右上角显示有USB图标，即进入刷机模式。
首先写入EMMC文件，命令如下flasher-3.5 -F emmc.bin -f，以下为linux下操作实例，以供参考
alair@zb14:~/下载$ sudo flasher-3.5 -F RX-51_2009SE_10.2010.13-2.VANILLA_PR_EMMC_MR0_ARM.bin -f [sudo] alair 的密码： flasher v2.5.2 (Oct 21 2009) Image &#39;mmc&#39;, size 255947 kB Version RX-51_2009SE_10.2010.13-2.VANILLA USB device found found at bus 002, device address 012. Found device RX-51, hardware revision 2204 NOLO version 1.4.14 Version of &#39;sw-release&#39;: RX-51_2009SE_21.2011.38-1_PR_MR0 Booting device into flash mode. Suitable USB device not found, waiting. USB device found found at bus 002, device address 013.
          
        
        </description>
    </item>
    
    <item>
      <title>NokiaN900删除不必要的软件</title>
      <link>/post/n900-removes-unnecessary-software-and-games/</link>
      <pubDate>Tue, 30 Apr 2019 13:40:00 +0000</pubDate>
      
      <guid>/post/n900-removes-unnecessary-software-and-games/</guid>
      <description>
        
          
          
          
        
        
        
          NokiaN900自带的软件不少，还有一些游戏，以下为这些软件的删除方式。
首先，建议安装rootsh以获取ROOT权限，然后在xTermianl进行以下操作。
   名称 说明 删除命令     Mahjong 游戏 apt-get remove -y osso-mahjong   Chess 游戏 apt-get remove -y gnuchess   Blocks 游戏 apt-get remove -y maemoblocks   Marbles 游戏 apt-get remove -y osso-lmarbles   AP News 软件 apt-get remove -y ap-installer   Docs To Go 软件 apt-get remove -y dtg-installer   Sketch 画图 apt-get remove -y osso-sketch   Backup 备份 apt-get remove -y osso-backup   PDF reader PDF阅读 apt-get remove -y osso-pdf-viewer   RSS RSS订阅 apt-get remove -y osso-rss-feed-reader   Notes 记事本 apt-get remove -y osso-notes   Amazon Amazon安装快捷方式 rm /usr/share/maemo-installer-utils/amazon.
          
        
        </description>
    </item>
    
    <item>
      <title>N900安装最新版Nemo</title>
      <link>/post/nokia-n900-install-nemo/</link>
      <pubDate>Sun, 28 Apr 2019 15:56:00 +0000</pubDate>
      
      <guid>/post/nokia-n900-install-nemo/</guid>
      <description>
        
          
          
          
        
        
        
          准备
 安装最新uboot 一张至少4g以上的TF卡  下载地址http://releases.nemomobile.org/releases/ 以最新目录为例，下载http://releases.nemomobile.org/releases/latest/images/nemo-armv7hl-n900/里的nemo-armv7hl-n900-mmcblk0p.raw.bz2 解压出raw文件，然后改后缀为img。Windows下用Win32DiskImager将镜像文件写入TF卡。 Linux下可以使用dd命令直接写入，不需要改后缀名：
alair@e6440:/media/alair/bak/downloads$ sudo dd if=nemo-armv7hl-n900-mmcblk0p.raw of=/dev/sdc bs=1M [sudo] alair 的密码： 记录了3640+1 的读入 记录了3640+1 的写出 3816816641 bytes (3.8 GB, 3.6 GiB) copied, 185.35 s, 20.6 MB/s  Windwos中用winscp在你的N900的/etc/bootmenu.d/新建一个40-nemo.item文件，贴入以下内容：
ITEM_NAME=&amp;quot;Mer-Nemo Mobile&amp;quot; ITEM_ID=&amp;quot;nemo&amp;quot; ITEM_DEVICE=&amp;quot;${EXT_CARD}p3&amp;quot; ITEM_KERNEL=&amp;quot;uImage&amp;quot; ITEM_FSTYPE=&amp;quot;vfat&amp;quot; ITEM_CMDLINE=&amp;quot;root=/dev/mmcblk0p1 rootwait ro console=ttyO2,115200n8 console=tty0 omapfb.vram=0:2M,1:2M,2:2M mtdoops.mtddev=2 quiet&amp;quot; ITEM_OMAPATAG=1  Linux系统下可以直接SSH连接N900进行操作。 然后root运行
u-boot-update-bootmenu  关机，插入TF卡，然后推开键盘开机，选Mer-Nemo Mobile进入即可。
          
        
        </description>
    </item>
    
    <item>
      <title>查出VPS流量消耗元凶</title>
      <link>/post/find-the-vps-traffic-consumption-culprit/</link>
      <pubDate>Thu, 11 Apr 2019 22:23:00 +0000</pubDate>
      
      <guid>/post/find-the-vps-traffic-consumption-culprit/</guid>
      <description>
        
          
          
          
        
        
        
          上月不知什么原因VPS流量提前消耗完了，然后通知这月10号重新reset，于是只能临时开了一个月的locvps进行过渡。好不容易熬到昨儿，reset后赶紧把数据和站点又搬回来。 今儿偶尔登录vps，突然发现流量消耗咋一直很高，两天不到就消耗了170G，额滴神呐!查看详细使用统计，发现从昨儿reset以来，OUT bps一直维持在19M左右，瞬间脑袋瓜嗡嗡的！
于是赶紧动手找找，看看消耗流量的元凶到底是谁？
首先，安装iftop来检查网络使用情况。官网在这里http://www.ex-parrot.com/~pdw/iftop/，CentOS安装方法如下：
yum install -y flex byacc libpcap ncurses ncurses-devel libpcap-devel #安装需求软件 wget http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz tar zxf iftop-0.17.tar.gz cd iftop-0.17 ./configure make &amp;amp;&amp;amp; make install  安装完成后，可以通过iftop来运行，建议加上-P参数，显示使用端口信息，如下：
主界面中左侧为本地端，右侧为远端，中间的&amp;lt;=和=&amp;gt;表示流量方向。 下面的TX：发送流量/RX：接收流量/TOTAL：总流量/Cumm：运行iftop到目前时间的总流量/peak：流量峰值/rates：分别表示过去 2s 10s 40s 的平均流量
从上图来看，本地IP一直在向一个140.249.34.53发送数据，从peak统计来看，速率在22.3Mb左右，和网站统计相符。 知道端口后，可以通过 netstat -ntlup|grep 端口号来查看具体进程，没有的话可以通过yum install net-tools来安装。
我试着查了下这个IP，发现是山东青岛的，再通过IP反查域名，真想才出来了，原来是百度云的相关IP。这才想起来，我安装了BaiduPCS-Go百度网盘客户端，用来对vps数据进行备份，原来搞鬼的是这个东西。找到元凶就好办了，首先把这个IP给禁了iptables -A INPUT -p tcp -s 140.249.34.53 -j DROP 禁完后，实时流量一下子就降了下来，如下所示：
而后将BaiduPCS-Go删除，以绝后患！
          
        
        </description>
    </item>
    
    <item>
      <title>GRUB引导ISO镜像</title>
      <link>/post/grub-boot-iso-image-file/</link>
      <pubDate>Sun, 08 Jul 2018 17:18:00 +0000</pubDate>
      
      <guid>/post/grub-boot-iso-image-file/</guid>
      <description>
        
          
          
          
        
        
        
          家里电脑安装了双系统(Xubuntu+Windows7)，平时一直不关机，开着TeamViewer便于在办公室远程操作。
这次不知怎么回事儿，远程掉了，回家一看Windows意外关机，再开机直接蓝屏。
由于为了省资源，关闭了系统保护，没法进行还原，多次试着拯救都没能解决，无限蓝屏……
手头刚好没有WinPE的U盘，没法ghost恢复或重装Windows，只有xubuntu可用，一筹莫展。
突然想到grub是否可以引导iso？ 网上找了下，还真可以，于是下载了个WinPE镜像文件，打算通过grub来引导以修复Windows。
具体操作如下：
安装grub-imageboot
alair@e6440:~$ apt search memdisk 正在排序... 完成 全文搜索... 完成 grub-imageboot/bionic,bionic 0.6 all boot iso, harddisk and floppy images with grub2 and syslinux memdisk alair@e6440:~$ sudo apt install grub-imageboot [sudo] alair 的密码： 正在读取软件包列表... 完成 正在分析软件包的依赖关系树 正在读取状态信息... 完成 将会同时安装下列软件： syslinux-common 下列【新】软件包将被安装： grub-imageboot syslinux-common 升级了 0 个软件包，新安装了 2 个软件包，要卸载 0 个软件包，有 4 个软件包未被升级。 需要下载 1,176 kB 的归档。 解压缩后会消耗 3,684 kB 的额外空间。 您希望继续执行吗？ [Y/n] y 获取:1 http://mirrors.cqu.edu.cn/ubuntu bionic/main amd64 syslinux-common all 3:6.
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu配置Livepatch服务</title>
      <link>/post/canonical-livepatch-service/</link>
      <pubDate>Fri, 25 May 2018 05:25:00 +0000</pubDate>
      
      <guid>/post/canonical-livepatch-service/</guid>
      <description>
        
          
          
          
        
        
        
          CLS(Canonical Livepatch Service)是Ubuntu母公司Canonical提供的一项服务，该服务可以为处于LTS的Ubuntu版本提供内核关键补丁修复，而不需要重新启动系统，特别适用于用作Server的系统。
使用CLS的前提是必须注册一个Ubuntu帐号，地址为https://login.ubuntu.com/+login
注册完成后，即可访问CLS主页https://www.ubuntu.com/server/livepatch进行登录配置。
登陆后选择用户类型，一般个人用户选择Ubuntu User，然后点击Get your Livepatch token获取密匙
按照下一步提示进行操作，启用CLS服务。
运行完成后即成功启用CLS服务。
检查CLS服务配置状态可以使用以下命令:
alair@e6440:~$ sudo canonical-livepatch status --verbose client-version: 8.0.2 machine-id: 08e0*****************750db machine-token: 4753a054c*****************a2eb84c7 architecture: x86_64 cpu-model: Intel(R) Core(TM) i5-4310M CPU @ 2.70GHz last-check: 2018-05-25T19:55:15.537634075+08:00 boot-time: 2018-05-25T19:47:51+08:00 uptime: 14m43s status: - kernel: 4.15.0-22.24-generic running: true livepatch: checkState: checked patchState: nothing-to-apply version: &amp;quot;&amp;quot; fixes: &amp;quot;&amp;quot; 
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下修复分辨率显示异常</title>
      <link>/post/linux-fix-resolution-display-exception/</link>
      <pubDate>Sat, 26 Aug 2017 18:26:00 +0000</pubDate>
      
      <guid>/post/linux-fix-resolution-display-exception/</guid>
      <description>
        
          
          
          
        
        
        
          家里放了台老旧的台式机，显卡是GTX 660Ti，windows下必须安装特定的驱动版本才能显示最佳分辨率(1680x1050)，如果更新到最新的Nvidia驱动，反而显示器无法正常显示(1024x768)。
没想到，这种情况在Linux下依然存在，不论是安装Debian还是Linux Mint或者Ubuntu，默认都是1024x768。
网上找到了修复分辨率异常的方法，整理如下。
检查当前显卡硬件情况 $ lspci |grep VGA 01:00.0 VGA compatible controller: NVIDIA Corporation GK104 [GeForce GTX 660 Ti] (rev a2)  可以看到，显卡硬件识别正常。
检查显卡分辨率情况 $ xrandr Screen 0: minimum 320 x 200, current 1024 x 768, maximum 8192 x 8192 VGA-1 disconnected (normal left inverted right x axis y axis) DVI-I-1 connected primary 1024x768+0+0 (normal left inverted right x axis y axis) 0mm x 0mm 1024x768 60.00* 800x600 60.
          
        
        </description>
    </item>
    
    <item>
      <title>sitemap-generators使用实例</title>
      <link>/post/sitemap-generators-usage/</link>
      <pubDate>Sun, 13 Aug 2017 23:23:00 +0000</pubDate>
      
      <guid>/post/sitemap-generators-usage/</guid>
      <description>
        
          
          
          
        
        
        
          sitemap-generators是一款Sitemap生成工具，使用它可以生成符合sitemap.org规范的Sitemap文件，以便于提交给各个网站工具平台。
项目地址 &amp;amp;&amp;amp; 下载地址
下载sitemap_gen_1.5.tar.gz解压，得到以下内容：
root@bwgzl:~/sitemap_gen# ls -lh total 140K -r--r----- 1 502 502 22 Jun 17 2005 AUTHORS -r--r--r-- 1 502 502 2.6K Jul 19 2007 ChangeLog -r--r----- 1 502 502 1.8K Jun 17 2005 COPYING -rw-r--r-- 1 502 502 6.4K Jul 19 2007 example_config.xml -rw-r----- 1 502 502 1.6K Jun 26 2007 example_urllist.txt drwxr-xr-x 23 root root 4.0K Aug 3 14:25 getos.org -rw-r--r-- 1 502 502 244 Jul 19 2007 PKG-INFO -r--r--r-- 1 502 502 1.
          
        
        </description>
    </item>
    
    <item>
      <title>Dropbox脚本工具DropboxUploader</title>
      <link>/post/powerful-dropbox-scripting-tool-dropbox-uploader/</link>
      <pubDate>Fri, 28 Jul 2017 17:28:00 +0000</pubDate>
      
      <guid>/post/powerful-dropbox-scripting-tool-dropbox-uploader/</guid>
      <description>
        
          
          
          
        
        
        
          Dropbox Uploader是一款专为Dropbox开发的BASH脚本，可以实现上传、下载、删除、列出文件清单、在线分享、同步和备份等功能。
它使用BASH脚本语言写成，只需要cURL即可使用。
项目主页 GiHub project page.
为什么使用此脚本?
 绿色轻便:使用BASH脚本语言写成，仅仅需要cURL一个软件(curl是一个数据传输工具，大部分linux发行版均会内置该软件)。 安全: 不需要提供帐号密码，该脚本使用官方API进行验证。  更多的扩展信息和使用技巧请参考官方wiki，该wiki同时提供Dropbox Uploader相关的使用实例和脚本。
特性  跨平台 支持官方Dropbox API v2 无需密码 简单的配置提示 分块文件上传 递归文档下载 递归文档上传 Shell通配符扩展 (仅上传) 删除/移动/重命名/拷贝/列出/分享文件 创建分享连接 监视变化  安装配置DropboxUploader 使用git拷贝官方仓库：
git clone https://github.com/andreafabrizi/Dropbox-Uploader.git 或者直接下载脚本：
curl &amp;#34;https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh&amp;#34; -o dropbox_uploader.sh 给脚本添加执行权限并运行：
$chmod +x dropbox_uploader.sh $./dropbox_uploader.sh 第一次运行dropbox_uploader时，会有鉴权提示，按照提示在https://www.dropbox.com/developers/apps新建api app，然后在app管理页找到Generated access token创建access token，将access token粘贴到DropboxUploader提示行按回车键，随后会提示成功接入Dropbox。配置文件保存在~/.dropbox_uploader。
使用DropboxUploader DropboxUploader语法非常简单:
./dropbox_uploader.sh [PARAMETERS] COMMAND... [%%]: 可选参数 &amp;lt;%%&amp;gt;: 必须参数 可使用命令:
  upload &amp;lt;LOCAL_FILE/DIR &amp;hellip;&amp;gt; &amp;lt;REMOTE_FILE/DIR&amp;gt;
上传本地文件或目录到Dropbox。
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下批量转换PNG和JPG</title>
      <link>/post/batch-conversion-png-and-jpg-under-linux/</link>
      <pubDate>Mon, 17 Jul 2017 07:17:00 +0000</pubDate>
      
      <guid>/post/batch-conversion-png-and-jpg-under-linux/</guid>
      <description>
        
          
          
          
        
        
        
          我们用到的软件名为imagemagick，一款强大的图片处理软件。
Debian系使用apt-get install imagemagick来安装，Fedora系通过yum install imagemagick来安装。
其他系统可以到官方下载页进行下载安装 https://www.imagemagick.org/script/download.php
安装完成后，可以通过convert tst.jpg tsg.png将JPG文件转换为PNG，反之亦可。
下来进行批量替换：
root@bwgzl:/data/wwwroot/getos.org/images# ll total 188 drwxr-xr-x 2 www www 4096 Aug 4 15:48 ./ drwxr-xr-x 27 www www 4096 Aug 4 15:32 ../ -rw-r--r-- 1 www www 18778 Aug 4 15:43 clip_image002.jpg -rw-r--r-- 1 www www 17637 Aug 4 15:43 clip_image004.jpg -rw-r--r-- 1 www www 28075 Aug 4 15:43 clip_image006.jpg -rw-r--r-- 1 www www 30916 Aug 4 15:43 clip_image008.jpg -rw-r--r-- 1 www www 13538 Aug 4 15:43 clip_image010.
          
        
        </description>
    </item>
    
    <item>
      <title>p7zip使用实例</title>
      <link>/post/p7zip-usage/</link>
      <pubDate>Fri, 16 Jun 2017 23:12:00 +0000</pubDate>
      
      <guid>/post/p7zip-usage/</guid>
      <description>
        
          
          
          
        
        
        
          以下是CentOS7中7za的使用实例,CentOS下安装p7zip可以参考此文
[root@localhost ~]# 7za 7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,1 CPU x64) Usage: 7za &amp;lt;command&amp;gt; [&amp;lt;switches&amp;gt;...] &amp;lt;archive_name&amp;gt; [&amp;lt;file_names&amp;gt;...] [&amp;lt;@listfiles...&amp;gt;] &amp;lt;Commands&amp;gt; a : Add files to archive b : Benchmark d : Delete files from archive e : Extract files from archive (without using directory names) h : Calculate hash values for files i : Show information about supported formats l : List contents of archive rn : Rename files in archive t : Test integrity of archive u : Update files to archive x : eXtract files with full paths &amp;lt;Switches&amp;gt; -- : Stop switches parsing -ai[r[-|0]]{@listfile|!
          
        
        </description>
    </item>
    
    <item>
      <title>在Linux中运行Android软件</title>
      <link>/post/anbox-run-android-applications-on-linux/</link>
      <pubDate>Fri, 09 Jun 2017 06:09:00 +0000</pubDate>
      
      <guid>/post/anbox-run-android-applications-on-linux/</guid>
      <description>
        
          
          
          
        
        
        
          想要在PC上运行Android软件就需要模拟器，Windows版的Android模拟器软件很多，但是Linux平台的就不多了，今天推荐一款Linux下的Android模拟器软件Anbox
Anbox官方介绍为Android in a Box,Run Android applications on any GNU/Linux operating system.
Anbox现在还处于测试阶段，很多功能还不完善和稳定，请谨慎使用。
安装Anbox 首先得安装Snaps,官方地址为https://snapcraft.io/
LinuxMint中安装Snaps和必须包
sudo apt install snapd sudo apt install pulseaudio  接下来按照官方指南安装Anbox
snap install --classic anbox-installer &amp;amp;&amp;amp; anbox-installer  我试着通过snap来安装一直存在权限问题，一般权限不能运行snap install --classic anbox-installer，root运行完snap install --classic anbox-installer后，但运行anbox-installer又提示不能使用root权限，一般权限根本无法运行anbox-installer，搞了半天都没有成功，于是就有了下文。
通过常规方法安装Anbox
wget https://raw.githubusercontent.com/anbox/anbox-installer/master/installer.sh -O anbox-installer chmod +x ./anbox-installer ./anbox-installer  安装完成后会有重启系统的提示
 To ensure all changes made to your system you should now reboot your system. If you don&amp;rsquo;t do this no Android applications will show up in the system application launcher.
          
        
        </description>
    </item>
    
    <item>
      <title>CentOS7安装使用p7zip</title>
      <link>/post/centos7-installation-and-use-p7zip/</link>
      <pubDate>Tue, 06 Jun 2017 06:06:00 +0000</pubDate>
      
      <guid>/post/centos7-installation-and-use-p7zip/</guid>
      <description>
        
          
          
          
        
        
        
          在此只推荐从源码安装p7zip，下载地址 http://www.7-zip.org/download.html
源码在这里下载 https://sourceforge.net/projects/p7zip/files/p7zip/
wget https://sourceforge.net/projects/p7zip/files/p7zip/16.02/p7zip_16.02_src_all.tar.bz2 tar jxf p7zip_16.02_src_all.tar.bz2 cd p7zip_16.02 make make install 使用p7zip
[root@localhost ~]# 7za  7-Zip (a) [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21 p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,1 CPU x64) Usage: 7za &amp;lt;command&amp;gt; [&amp;lt;switches&amp;gt;...] &amp;lt;archive_name&amp;gt; [&amp;lt;file_names&amp;gt;...] [&amp;lt;@listfiles...&amp;gt;] &amp;lt;Commands&amp;gt; a : Add files to archive b : Benchmark d : Delete files from archive e : Extract files from archive (without using directory names) h : Calculate hash values for files i : Show information about supported formats l : List contents of archive rn : Rename files in archive t : Test integrity of archive u : Update files to archive x : eXtract files with full paths 压缩文件
          
        
        </description>
    </item>
    
    <item>
      <title>理解Linux中Shell初始化文件和用户Profiles文件</title>
      <link>/post/understand-linux-shell-initialization-files-and-user-profiles-files/</link>
      <pubDate>Tue, 25 Apr 2017 14:25:00 +0000</pubDate>
      
      <guid>/post/understand-linux-shell-initialization-files-and-user-profiles-files/</guid>
      <description>
        
          
          
          
        
        
        
          Linux是一个多用户、实时共享的操作系统，意味着不止一个用户可以登录同一个系统。系统管理员通过任务管理来分配不同用户的权限，比如安装、升级、卸载应用程序，运行编译程序，文件查看、编辑等等。
Linux允许通过两种主要方式来创建用户环境：系统级(全局)和用户级(个人)。一般情况下，Linux系统都会运行基本shell程序，当用户登录成功后shell会在初始化时根据某些文件开创建环境。
Linux中的Shell初始化 当Shell被调用时，会有一些初始化/启动文件被启用，它们的主要作用是为shell本身或用户设定运行环境，包含一些函数、	变量、别名等等。
Shell可以读取以下两种初始化文件:
 系统级启动文件 – 包含一些应用于户所有用户的全局配置，一般存在于**/etc**目录中，如 **/etc/profiles** 、**/etc/bashrc** 或者 **/etc/bash.bashrc**。 用户级启动文件 – 包含一些应用于单用户的配置文件，一般存放在各个用户目录，这些配置可以覆盖系统级全局配置，如**.profiles**、 **.bash_profile**、 **.bashrc** 和 **.bash_login**.  Shell存在三种调用模式：
1. 交互式登录Shell 当用户成功登录系统后调用该Shell,使用**/bin/login**登录，随后读取**/etc/passwd**文件。
当启动交互式shell后，将读取**/etc/profile**文件以及特定的用户文件**~/.bash_profile**
login as: pi pi@pi.raspi.in&amp;#39;s password: The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law.
          
        
        </description>
    </item>
    
    <item>
      <title>python-pip安装实例</title>
      <link>/post/python-pip-installation/</link>
      <pubDate>Thu, 20 Apr 2017 14:28:00 +0000</pubDate>
      
      <guid>/post/python-pip-installation/</guid>
      <description>
        
          
          
          
        
        
        
          Python-pip 是一个现代的，通用的 Python包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。
以下为多个操作系统平台下Python-pip安装方法
通用方法 通过get-pip.py文件来安装，建议Windows用户使用，前提是你必须首先安装Python。
版本要求Python 2 &amp;gt;=2.7.9 或Python 3 &amp;gt;=3.4，可从官网下载http://www.python.org/
然后下载get-pip.py
下载地址 https://bootstrap.pypa.io/get-pip.py
通过python get-pip.py命令来进行安装。
Linux下通过软件管理工具来安装Python-pip Fedora21   Python2
sudo yum upgrade python-setuptools sudo yum install python-pip python-wheel   Python3
sudo yum install python3 python3-wheel   Fedora22   Python2
sudo dnf upgrade python-setuptools sudo dnf install python-pip python-wheel   Python3
sudo dnf install python3 python3-wheel   CentOS/RHEL 首先得启用EPEL repository,可参考此文
  EPEL 6/EPEL 7
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派动态IP更新器</title>
      <link>/post/raspberrypi-dynamic-ip-updater/</link>
      <pubDate>Wed, 19 Apr 2017 21:28:00 +0000</pubDate>
      
      <guid>/post/raspberrypi-dynamic-ip-updater/</guid>
      <description>
        
          
          
          
        
        
        
          这是一个python3的脚本，每隔10分钟监控一次IP地址，如果发生变化则会通过AutoRemote消息通知你。 关于AutoRemote的使用可参考这里
这里推荐使用ipgetter来获取外网IP，地址为https://github.com/phoemur/ipgetter
安装ipgetter
sudo apt-get install python3 pip sudo pip3 install ipgetter 你可以从以下地址获取每个通知设备的AutoRemote所需google key
​	http://autoremotejoaomgcd.appspot.com/?key=[it&amp;rsquo;s the part that is here]
以下为python3脚本:
import ipgetter import urllib.request import requests currentIP = ipgetter.myip() #AutoRemote function to send a notification YOUR_KEY goes here def sendAR(x): AR_key = &amp;#39;YOUR_KEY&amp;#39; AR_url = &amp;#39;http://autoremotejoaomgcd.appspot.com/sendmessage?key=&amp;#39;+ AR_key +&amp;#39;&amp;amp;message=IP%20&amp;#39; message = AR_url + x response = urllib.request.urlopen(message).read() print(x)	#check the internet and check if previous file is present try: requests.
          
        
        </description>
    </item>
    
    <item>
      <title>Linux开启TCP BBR算法</title>
      <link>/post/linux_enable_tcp_bbr/</link>
      <pubDate>Mon, 17 Apr 2017 14:28:00 +0000</pubDate>
      
      <guid>/post/linux_enable_tcp_bbr/</guid>
      <description>
        
          
          
          
        
        
        
          Linux Kernel 4.9+已经支持tcp_bbr拥塞控制算法，因此建议将内核升级为最新版。
将内核升级到最新版 Debian/Ubuntu升级最新内核 最新内核下载地址 http://kernel.ubuntu.com/~kernel-ppa/mainline
下载安装新内核
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.10/linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb` dpkg -i linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb 更新GRUB并且重启
update-grub reboot Centos 7 升级最新内核 内核下载地址 http://elrepo.org/linux/kernel/el7/x86_64/RPMS/
安装最新内核
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm yum --enablerepo=elrepo-kernel install kernel-ml -y 检查内核是否安装完成
rpm -qa | grep kernel
更新GRUB并重启主机
egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \&amp;#39; grub2-set-default 0 #default 0表示第一个内核设置为默认运行, 选择最新内核就对了 reboot http://elrepo.org/linux/kernel/下e15、e16分别对应Centos5、Centos6，可参考以上安装
开启BBR 重启后uname -r 检查内核版本是不是4.9+
然后执行以下操作
echo &amp;#34;net.core.default_qdisc=fq&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p sysctl net.
          
        
        </description>
    </item>
    
    <item>
      <title>使用手机远程控制树莓派GPIO</title>
      <link>/post/use-your-phone-to-remotely-control-raspberrypi/</link>
      <pubDate>Thu, 13 Apr 2017 14:14:00 +0000</pubDate>
      
      <guid>/post/use-your-phone-to-remotely-control-raspberrypi/</guid>
      <description>
        
          
          
          
        
        
        
          必备条件：
 树莓派已联网 安装官方镜像 只支持Raspberry Pi 2/3 Model B 只支持Android手机 安装Java8  安装官方镜像Raspbian 下载地址 https://www.raspberrypi.org/downloads/
安装Java8 sudo apt install oracle-java8-jdk  下载Marsiot到树莓派
wget http://www.marsiot.com/download/marsiot.jar  下载Marsiot到手机，安装
http://www.marsiot.com/download/marsiot.apk
在树莓派上运行Marsiot
pi@raspi:~ $ sudo java -jar marsiot.jar Current version &amp;lt;101&amp;gt; More help: sudo java -jar marsiot.jar help Connect to www.marsiot.com... Connected ok! GPIO init... GPIO init ok! ID-CODE:c1fa PASS-CODE：11c6  记住以上ID-CODE、PASS-CODE
在手机上打开火星互联,事件中心时间轴上会显示所有新加入设备，以ID-CODE区分，找到你对应的设备点击，按照提示输入PASS-CODE即可连接。
连接后可以在我的设备中看到已连接的设备，点击通用视图即可实时监控GPIO端口状态。
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下设置IP、网关、掩码、MAC和DNS</title>
      <link>/post/linux-set-ip-netmask-gateway-mac-dns/</link>
      <pubDate>Mon, 20 Mar 2017 13:20:00 +0000</pubDate>
      
      <guid>/post/linux-set-ip-netmask-gateway-mac-dns/</guid>
      <description>
        
          
          
          
        
        
        
          先用ifconfig来查看所有活动网络接口
eth0 Link encap:Ethernet HWaddr b8:27:eb:1b:63:a8 inet addr:192.168.1.6 Bcast:192.168.1.255 Mask:255.255.255.0 inet6 addr: fe80::6502:67ff:89b:b2fd/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:43239 errors:0 dropped:24 overruns:0 frame:0 TX packets:30644 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:25068614 (23.9 MiB) TX bytes:5993030 (5.7 MiB) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:1961 errors:0 dropped:0 overruns:0 frame:0 TX packets:1961 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:160232 (156.
          
        
        </description>
    </item>
    
    <item>
      <title>Windows10开启Linux子系统</title>
      <link>/post/windows10-enabled-linux-subsystem/</link>
      <pubDate>Fri, 10 Mar 2017 11:13:00 +0000</pubDate>
      
      <guid>/post/windows10-enabled-linux-subsystem/</guid>
      <description>
        
          
          
          
        
        
        
          打开功能 设置-系统-应用和功能，右侧下拉到底，点击“相关设置”下的“程序和功能”
在打开的“程序和功能”左侧菜单中，找到“启用或关闭windows功能”，点击打开。
在接下来的“windows功能”菜单中，下拉勾选“适用于linux的windows子系统（beta）”，确认后重启系统。
开启开发人员模式 设置-更新和安全-针对开发人员，在右侧打开“开发人员模式”
安装linux子系统 Win+R输入cmd回车，打开cmd
输入“bash”按照提示安装设置用户名密码即可使用。
然后就可以使用ubuntu提供的linux子系统了。
          
        
        </description>
    </item>
    
    <item>
      <title>Termux软件包管理</title>
      <link>/post/termux-package-management/</link>
      <pubDate>Thu, 09 Mar 2017 13:19:00 +0000</pubDate>
      
      <guid>/post/termux-package-management/</guid>
      <description>
        
          
          
          
        
        
        
          首次安装Termux后，内含一个基础系统，包括apt软件包管理功能，并且集成了一些busybox系统工具。
其余的软件包可使用apt进行安装管理，命令如下：
apt update  更新可用软件包清单。
apt search &amp;lt;query&amp;gt;  按名称搜索可用软件。
apt install &amp;lt;package&amp;gt;  安装软件
apt upgrade  更新所有可更新软件。
apt show &amp;lt;package&amp;gt;  显示软件信息
apt list  列出可用软件清单
apt list --installed  列出所有已安装软件清单
apt remove &amp;lt;package&amp;gt;  卸载已安装软件
Apt是基于dpkg格式的软件管理工具，一般没必要直接使用dpkg来进行操作，不过以下两个例子可以参考：
dpkg -L &amp;lt;package&amp;gt;  列出已安装软件
dpkg --verify  验证已安装软件的完整性
更多信息请检阅apt manual page (通过apt install man来安装)
          
        
        </description>
    </item>
    
    <item>
      <title>修复树莓派PATH变量</title>
      <link>/post/fix-raspberry-path-variable/</link>
      <pubDate>Fri, 03 Mar 2017 13:13:00 +0000</pubDate>
      
      <guid>/post/fix-raspberry-path-variable/</guid>
      <description>
        
          
          
          
        
        
        
          使用lnmp一键工具安装完nmp后，重启进入系统就提示bash command not found
然后试了试service,who等命令也无法使用
只有最基本的系统命令ls,cat等可以用
看来安装lnmp后，我的PATH变量被动了
先临时修改下PATH，便于后面操作
export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH  然后检查~/.profile,/etc/profile是否存在，存在
检查其中的PATH赋值是否异常
经过排查，发现/etc/profile中的PATH赋值异常，修改之重启OK！
在此分享正确的原始~/.profile和/etc/profile文件
~/.profile 内容
# ~/.profile: executed by the command interpreter for login shells. # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login # exists. # see /usr/share/doc/bash/examples/startup-files for examples. # the files are located in the bash-doc package. # the default umask is set in /etc/profile; for setting the umask # for ssh logins, install and configure the libpam-umask package.
          
        
        </description>
    </item>
    
    <item>
      <title>Debian下安装Zbook14无线网卡驱动</title>
      <link>/post/zbook14-install-wireless-driver-under-debian/</link>
      <pubDate>Wed, 17 Aug 2016 08:17:00 +0000</pubDate>
      
      <guid>/post/zbook14-install-wireless-driver-under-debian/</guid>
      <description>
        
          
          
          
        
        
        
          首先查看无线网卡型号
alair@zb14:~$ lspci|grep less 02:00.0 Network controller: Intel Corporation Wireless 7260 (rev 73)  搜索Inter相关固件 ​ alair@zb14:~$ apt-cache search iwlwifi firmware-iwlwifi - Binary firmware for Intel Wireless cards
安装之 ​ alair@zb14:~$ apt-get install firmware-iwlwifi
重启完事儿！
          
        
        </description>
    </item>
    
    <item>
      <title>ubuntu修改grub引导菜单</title>
      <link>/post/ubuntu-modify-the-grub-boot-menu/</link>
      <pubDate>Mon, 27 Jun 2016 17:42:00 +0000</pubDate>
      
      <guid>/post/ubuntu-modify-the-grub-boot-menu/</guid>
      <description>
        
          
          
          
        
        
        
          先运行update-grub命令生成一次grub配置，顺便查看一下识别出来的引导菜单内容
root@alairpc:~# update-grub Generating grub configuration file ... Found linux image: /boot/vmlinuz-4.4.0-21-generic Found initrd image: /boot/initrd.img-4.4.0-21-generic Found memtest86+ image: /boot/memtest86+.elf Found memtest86+ image: /boot/memtest86+.bin Found Windows 7 (loader) on /dev/sda1 done root@alairpc:~#  注意看，以上共有5个菜单项，最后一个是windows7
接下来我们来看看gurb配置文件/etc/default/grub
root@alairpc:~# cat /etc/default/grub # If you change this file, run &#39;update-grub&#39; afterwards to update # /boot/grub/grub.cfg. # For full documentation of the options in this file, see: # info -f grub -n &#39;Simple configuration&#39; GRUB_DEFAULT=4 #GRUB_HIDDEN_TIMEOUT=0 GRUB_HIDDEN_TIMEOUT_QUIET=true GRUB_TIMEOUT=3 GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian` GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot; GRUB_CMDLINE_LINUX=&amp;quot;locale=zh_CN&amp;quot; # Uncomment to enable BadRAM filtering, modify to suit your needs # This works with Linux (no patch required) and with any kernel that obtains # the memory map information from GRUB (GNU Mach, kernel of FreeBSD .
          
        
        </description>
    </item>
    
    <item>
      <title>使用Syncthing在多个设备之间同步文件</title>
      <link>/post/use-syncthing-synchronize-files-between-multiple-devices/</link>
      <pubDate>Fri, 06 May 2016 15:16:00 +0000</pubDate>
      
      <guid>/post/use-syncthing-synchronize-files-between-multiple-devices/</guid>
      <description>
        
          
          
          
        
        
        
          Syncthing是一款开源的多平台同步软件，使用他可以在多个设备间进行文件同步，并且带有版本控制功能。
Syncthing官网地址 **https://syncthing.net/**Github地址 https://github.com/syncthing/syncthing
安装Syncthing Syncthing官网提供多平台安装包，下载地址为 https://github.com/syncthing/syncthing/releases/
并且针对Debian/Ubuntu平台，官方提供了apt-get安装方法
# Add the release PGP keys: curl -s https://syncthing.net/release-key.txt | sudo apt-key add - # Add the &amp;quot;release&amp;quot; channel to your APT sources: echo &amp;quot;deb http://apt.syncthing.net/ syncthing release&amp;quot; | sudo tee /etc/apt/sources.list.d/syncthing.list # Update and install syncthing: sudo apt-get update sudo apt-get install syncthing  运行Syncthing Linux下直接使用syncthing命令运行
syncthing &amp;amp;  Windows下直接打开下载的syncthing.exe文件，而后浏览器自动打开http://127.0.0.1:8384进行设置管理。
管理Syncthing 如果是在VPS上安装Syncthing ,运行syncthing后，只能通过http://127.0.0.1:8384进行管理，我们可以通过以下方法在本地管理。
ssl -L 9891:localhost:8384 root@ip  输入root密码登录成功后，即可本地浏览http://127.0.0.1:9891对VPS上的Synchting进行管理。
添加设备 每个设备均有一个设备标识，可以通过操作-&amp;gt;显示设备标识来查看。
          
        
        </description>
    </item>
    
    <item>
      <title>使用OptiPNG优化压缩图片</title>
      <link>/post/optimize-and-compress-image-by-optipng/</link>
      <pubDate>Sun, 03 Apr 2016 12:34:00 +0000</pubDate>
      
      <guid>/post/optimize-and-compress-image-by-optipng/</guid>
      <description>
        
          
          
          
        
        
        
          因工作需要，得处理一张7872x5904体积为178MB的图片，格式为TIFF。
网上搜了半天，找到一个名为OptiPNG的软件，主要为PNG优化，但也支持TIFF格式。
下面是OptiPNG的官方介绍
 OptiPNG is a PNG optimizer that recompresses image files to a smaller size, without losing any information. This program also converts external formats (BMP, GIF, PNM and TIFF) to optimized PNG, and performs PNG integrity checks and corrections.
 OptiPNG可以将PNG文件重新压缩，压缩后体积变得更小，并且不会丢失任何信息。同时optipng还支持其他格式的图片，如BMP、GIF、PNM和TIFF。
至于OptiPNG的威力如何，请看本次实例
root@raspi:~# ls -lh huxian.tif -rw-r--r-- 1 root root 178M Apr 4 16:54 huxian.tif //原始文件178MB root@raspi:~# optipng huxian.tif ** Processing: huxian.tif Importing TIFF 7872x5904 pixels, 4x8 bits/pixel, RGB+alpha //分辨率7872x5904 Reducing image to 3x8 bits/pixel, RGB Input file size = 186000368 bytes Trying: zc = 9 zm = 8 zs = 0 f = 0 IDAT size = 4273133 Selecting parameters: zc = 9 zm = 8 zs = 0 f = 0 IDAT size = 4273133 Output file: huxian.
          
        
        </description>
    </item>
    
    <item>
      <title>LFTP使用实例</title>
      <link>/post/lftp-use-case/</link>
      <pubDate>Fri, 01 Apr 2016 14:21:00 +0000</pubDate>
      
      <guid>/post/lftp-use-case/</guid>
      <description>
        
          
          
          
        
        
        
          LFTP介绍 lftp是一个功能强大的ftp/http客户端，作者是 Alexander Lukyanov。
lftp支持多种传输协议，如ftp、http、https、sftp、exp等。
如同BASH一样，lftp支持任务管理。并且具备书签管理、内置镜像和多线程传送功能。
使用LFTP 登录服务器 lftp ftp://user:password@ip:port  以上是一个完整的lftp登录示例，其中包含协议(ftp)、用户名(user)、密码(password)、主机(ip)以及端口(port)
默认情况下lftp直接访问ftp服务，默认登录端口为22，因此我们可以使用以下方法来便捷登录主机
lftp user@ip  然后系统会提示输入password，完成后登录成功！
lftp命令行参数 lftp :~&amp;gt; help !&amp;lt;shell-command&amp;gt; (commands) alias [&amp;lt;name&amp;gt; [&amp;lt;value&amp;gt;]] attach [PID] bookmark [SUBCMD] cache [SUBCMD] cat [-b] &amp;lt;files&amp;gt; cd &amp;lt;rdir&amp;gt; chmod [OPTS] mode file... close [-a] [re]cls [opts] [path/][pattern] debug [&amp;lt;level&amp;gt;|off] [-o &amp;lt;file&amp;gt;] du [options] &amp;lt;dirs&amp;gt; exit [&amp;lt;code&amp;gt;|bg] get [OPTS] &amp;lt;rfile&amp;gt; [-o &amp;lt;lfile&amp;gt;] glob [OPTS] &amp;lt;cmd&amp;gt; &amp;lt;args&amp;gt; help [&amp;lt;cmd&amp;gt;] history -w file|-r file|-c|-l [cnt] jobs [-v] [&amp;lt;job_no.
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下查看修改PATH</title>
      <link>/post/linux-check-and-set-the-path/</link>
      <pubDate>Tue, 29 Mar 2016 13:29:00 +0000</pubDate>
      
      <guid>/post/linux-check-and-set-the-path/</guid>
      <description>
        
          
          
          
        
        
        
          什么是PATH? 要搞清什么是PATH，应该先搞清什么是环境变量？
在计算机中，如果需要运行一个软件，那么我们就要找到它所在的位置，但是每次运行程序时如果都要进入到相应目录，那么显然是很繁琐的。于是就有了环境变量，环境变量就是一个系统参数，里面记录了一些目录，运行软件的时候，相关的程序将会按照该目录寻找相关文件。
而在Linux中，系统会有一个默认的PATH环境变量，里面记录了系统级的相关命令目录，比如当我们输入ls、cd、pwd等命令时，我们不需要指定它们所在的目录，因为包含这些命令的系统目录已经写入PATH参数，因而方便我们调用。
查看PATH 在linux中，可以使用export命令来查看所有环境变量，如下：
pi@raspi:~$ export declare -x HOME=&amp;quot;/home/pi&amp;quot; declare -x LANG=&amp;quot;en_GB.UTF-8&amp;quot; declare -x LOGNAME=&amp;quot;pi&amp;quot; declare -x MAIL=&amp;quot;/var/mail/pi&amp;quot; declare -x OLDPWD declare -x PATH=&amp;quot;/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/home/pi/bin&amp;quot; declare -x PWD=&amp;quot;/home/pi&amp;quot; declare -x SHELL=&amp;quot;/bin/bash&amp;quot; declare -x SHLVL=&amp;quot;1&amp;quot; declare -x SSH_CLIENT=&amp;quot;101.135.216.146 28249 22&amp;quot; declare -x SSH_CONNECTION=&amp;quot;101.135.216.146 28249 192.168.1.111 22&amp;quot; declare -x SSH_TTY=&amp;quot;/dev/pts/1&amp;quot; declare -x TERM=&amp;quot;xterm&amp;quot; declare -x USER=&amp;quot;pi&amp;quot;  使用echo来查看单独的环境变量
pi@raspi:~$ echo $PATH /bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/home/pi/bin  我们可以看到，以上PATH值包含了一些系统命令的目录，而这些目录都用:隔开。
修改PATH 我们可以使用export命令来添加目录，如下：
export PATH=/mydoc:$PATH  以上命令在原有的PATH前添加了/mydoc这个目录，设置完成后的PATH值如下：
pi@raspi:~$ echo $PATH /mydoc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/home/pi/bin  以上方法修改PATH值，在终端退出后就会失效，因此建议通过修改/etc/profile来设定PATH
          
        
        </description>
    </item>
    
    <item>
      <title>Ubunt下安装H2O</title>
      <link>/post/install-h2o-on-ubuntu/</link>
      <pubDate>Sat, 26 Mar 2016 13:26:00 +0000</pubDate>
      
      <guid>/post/install-h2o-on-ubuntu/</guid>
      <description>
        
          
          
          
        
        
        
          更新系统 apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get dist-upgrade -y &amp;amp;&amp;amp; apt-get autoremove --purge -y &amp;amp;&amp;amp; apt-get autoclean -y  安装必备软件 apt-get install locate git cmake build-essential checkinstall autoconf pkg-config libtool python-sphinx wget libcunit1-dev nettle-dev libyaml-dev libuv-dev -y  安装wslay git clone https://github.com/tatsuhiro-t/wslay.git cd wslay/ autoreconf -i automake autoconf ./configure make make install  安装完成后检查lib文件，如下所示：
ls /usr/local/lib/ libuv.a libuv.so.1 libwslay.la libwslay.so.0.0.1 python3.4 libuv.la libuv.so.1.0.0 libwslay.so pkgconfig libuv.so libwslay.a libwslay.so.0 python2.
          
        
        </description>
    </item>
    
    <item>
      <title>使用net_speeder加速VPS</title>
      <link>/post/use-net-speeder-accelerate-vps/</link>
      <pubDate>Sun, 07 Feb 2016 12:32:00 +0000</pubDate>
      
      <guid>/post/use-net-speeder-accelerate-vps/</guid>
      <description>
        
          
          
          
        
        
        
           当使用国外服务器时，经常会发现，下载速度只有十几k。平时可能不太注意，认为服务器带宽不足，或者自己使用的宽带不给力，其实很有可能原因并不在此。
由于光速的局限性，延迟会比较高（即使光沿直线传播，太平洋一个往返也要一百多毫秒）。并且由于距离较远，途径路由跳数较多，并且网络拥堵的原因。经常会发生丢包的情况。
对于平时使用最广泛的TCP协议来讲，发送端发出包后，接收端会回复ACK，表示自己收到了。用这种机制来保证可靠性。但对于高延迟链路来讲，如果每发送一个包都等待应答，那么大部分时间都在等待数据包到达，而链路则空置了。为此一般会采用滑动窗口技术。即在窗口满之前，发送端一直发送包，然后收到应答后将确认收到的包从窗口中移除。这样可以提高链路利用率。
TCP还有一个特性则是拥塞控制。当发送端检测到链路发生丢包时，则会主动缩小窗口大小以减慢发送速度，避免拥塞。不过对于跳数较多的链路来讲，只要有一个路由不够稳定丢包，就会被发送端判断为拥塞，从而影响网络速度。
为了解决丢包问题，最简单粗暴的方法就是双倍发送，即同一份数据包发送两份。这样的话在服务器带宽充足情况下，丢包率会平方级降低。
这种方式下，直接优点是降低丢包率，直接缺点是耗费双倍流量。一些延伸影响是更容易触发快速恢复逻辑，避免了丢包时窗口缩减过快。一定程度也能提高网络速度。
最近比较忙，空闲时间做了一个最简单的程序，试用效果很好，在一台VPS上测试后发现，未开启时单线程下载、ssh管道速度在十几K级别。开启后可以达到平均300KB+的速度。效果非常明显。但对于不加速就可以跑满带宽的类型来讲（多线程下载），开启后反而由于多出来的无效流量，导致速度减半。所以对于多线程/高速链路，这个方案是不适合的。
目前版本是最简单的逻辑，未来会进行细化（主动触发快速恢复、快速重传等），降低流量浪费，提升加速效果。
目前程序起名net-speeder，相对于修改协议栈来讲，由于后者需要重新升级编译内核，使用用户态程序部署更方便，稳定性更高，兼容性更好。缺点则是性能开销稍大和自由度有损失。总体比较起来，个人使用还是使用用户态程序更合适一些，特别是在虚拟机中使用（OpenVZ，LXC等虚拟机无法自己定制内核）。
 摘自http://www.snooda.com/read/324
net_speeder项目主页 https://github.com/snooda/net-speeder
安装net_speeder apt-get install libnet-dev libpcap-dev -y git clone https://github.com/snooda/net-speeder.git cd net-speeder sh build.sh mv net_speeder /usr/local/bin/  使用net_speeder 使用ifconfig查看网卡端口，我的端口为venet0
nohup net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;  添加到开机启动
echo &#39;nohup net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#39; &amp;gt;&amp;gt; /etc/rc.local 
          
        
        </description>
    </item>
    
    <item>
      <title>查看cp、mv等命令的执行进度</title>
      <link>/post/check-cp-dd-etc-commands-progress/</link>
      <pubDate>Thu, 04 Feb 2016 02:04:00 +0000</pubDate>
      
      <guid>/post/check-cp-dd-etc-commands-progress/</guid>
      <description>
        
          
          
          
        
        
        
          Linux中进行文件拷贝和移动时，我们是看不到具体命令的执行情况，不知道还需要多久才可以执行完成。在此推荐一个软件名为progress，用它可以查看一些命令的具体执行情况，包括进度、时间等等。
该软件的具体解释为Coreutils Progress Viewer，即核心程序进度查看，用它可以监视很多linux程序的执行情况，比如cp、mv、dd、tar,、gzip、cat等等，甚至于firefox的下载进度或者nginx的运行情况。
安装progress progress主页 https://github.com/Xfennec/progress
安装progress方法
git clone https://github.com/Xfennec/progress.git cd progress make make install  使用progress 简单的执行方法
progress  几个示例：
  监控所有可监控软件的执行情况
watch progress -q
  然后进行文件操作即可看到如下内容:
  查看下载进度
watch progress -wc firefox
  查看网页服务器活动情况
progress -c nginx
  
          
        
        </description>
    </item>
    
    <item>
      <title>使用Google Authenticator两步验证加强SSH登录</title>
      <link>/post/use-google-authenticator-set-2step-verification-strengthening-ssh-login/</link>
      <pubDate>Thu, 28 Jan 2016 12:33:00 +0000</pubDate>
      
      <guid>/post/use-google-authenticator-set-2step-verification-strengthening-ssh-login/</guid>
      <description>
        
          
          
          
        
        
        
          Google Authenticator开源版主页 https://github.com/google/google-authenticator
安装Google Authenticator Ubuntu已经包含libpam-google-authenticator软件(Ubuntu 11.10以上版本),可以直接使用apt-get安装
apt-get install libpam-google-authenticator  其他系统可以通过源码编译安装
git clone https://github.com/google/google-authenticator-libpam.git cd google-authenticator-libpam/ ./bootstrap.sh ./configure make make install  注意：在Debian7中执行./configure时可能存在以下错误提示
configure: error: Unable to find the PAM library or the PAM header files  在此需要安装libpam0g-dev和libtool
apt-get -y install libpam0g-dev libtool  设置Google Authenticator 在手机端搜索安装Google Authenticator
google-authenticator Do you want authentication tokens to be time-based (y/n) y  然后出现二维码，使用手机端Google Authenticator扫码,接下来服务器端继续设置
如果没有出现二维码，可以将提示的以**https://www.google.com/chart?**开头的连接复制到浏览器中，就可以看到二维码了
Do you want me to update your &amp;quot;/root/.
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派安装Dnsmasq加速DNS解析</title>
      <link>/post/raspberry-pi-install-dnsmasq-and-dnsmasq-china-list/</link>
      <pubDate>Mon, 18 Jan 2016 21:28:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-install-dnsmasq-and-dnsmasq-china-list/</guid>
      <description>
        
          
          
          
        
        
        
          天朝的dns服务商尿性不是一般的大，动不动就抽风或者劫持，为了避免这种情况，可以在树莓派上安装Dnsmasq来加速dns解析，提高网络浏览体验。
安装配置dnsmasq apt-get install dnsmasq  配置dnsmasq,vi /etc/dnsmasq.conf
我的配置文件如下：
domain=Raspi2 resolv-file=/etc/resolv.dnsmasq conf-dir=/etc/dnsmasq.d min-port=4096 server=114.114.114.114 server=114.114.115.115 server=223.5.5.5 server=223.6.6.6 server=119.29.29.29 server=182.254.116.116 server=112.124.47.27 server=114.215.126.16 server=101.226.4.6 server=218.30.118.6 server=42.120.21.30 server=199.91.73.222 server=178.79.131.110 server=8.8.8.8 server=8.8.4.4 cache-size=10000  配置完重启dnsmasq服务
service dnsmasq restart  其中的server字段为上游DNS
配置dnsmasq-china-list git clone https://github.com/felixonmars/dnsmasq-china-list.git cd dnsmasq-china-list/ cp *.conf /etc/dnsmasq.d/ service dnsmasq restart  至此设置完成，可以在路由器中将首选dns设为树莓派ip，这样局域网内的所有设备都可以体验dns解析加速了！
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派下安装配置Noip</title>
      <link>/post/install-configure-noip-client-in-raspberry-pi/</link>
      <pubDate>Mon, 11 Jan 2016 12:13:00 +0000</pubDate>
      
      <guid>/post/install-configure-noip-client-in-raspberry-pi/</guid>
      <description>
        
          
          
          
        
        
        
          注册noip 首先在http://noip.com注册账户
然后在主机管理(Manage Hosts)中添加主机(Add A Host)，根据提示设置二级域名，IP可以随意填写。
安装Noip客户端 wget https://www.noip.com/client/linux/noip-duc-linux.tar.gz tar zxf noip-duc-linux.tar.gz cd noip-2.1.9-1 sudo make install  安装过程中，按照提示输入noip帐号信息，时间间隔建议设为5s，默认30s
设置开机启动 在/etc/init.d/中建立noip2脚本
sudo vi /etc/init.d/noip2  脚本内容如下
#! /bin/sh ### BEGIN INIT INFO # Provides: noip2 # Required-Start: $syslog # Required-Stop: $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: noip.com client service ### END INIT INFO # . /lib/lsb/init-functions case &amp;quot;$1&amp;quot; in start) echo &amp;quot;Starting noip2.
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派使用ddclient和DDNS</title>
      <link>/post/raspberry-pi-using-ddclient-and-ddns/</link>
      <pubDate>Thu, 07 Jan 2016 12:31:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-using-ddclient-and-ddns/</guid>
      <description>
        
          
          
          
        
        
        
          域名解析 首先得有个域名，在域名管理中将域名DNS设为he.net的DNS地址，如下：
ns1.he.net ns2.he.net ns3.he.net ns4.he.net ns5.he.net  然后在http://dns.he.net注册账号，添加域名(Add a new domain)
接下来添加A记录(New A)，勾选允许动态域名解析(Enable entry for dynamic dns)
点击域名后DDNS列中的刷新按钮，新建一个DDNS密匙(Generate a DDNS key.)
安装设置ddclient 在树莓派上安装ddclient
sudo apt-get install ddclient  编辑ddclient配置文件，路径为/etc/ddclient.conf
protocol=dyndns2 use=web,web=myip.dnsomatic.com server=dyn.dns.he.net login=raspi.in password=&#39;ddnskey&#39; www.raspi.in,raspi.in  其中password为设置DDNS时的key
重启ddclient服务
service ddclient restart  验证IP查询结果
sudo ddclient -query use=if, if=eth0 address is 192.168.1.111 use=if, if=lo address is 127.0.0.1 use=web, web=dnspark address is 36.40.143.235 use=web, web=dyndns address is NOT FOUND use=web, web=loopia address is 36.
          
        
        </description>
    </item>
    
    <item>
      <title>SSL安全优化</title>
      <link>/post/ssl-security-optimization/</link>
      <pubDate>Mon, 21 Dec 2015 12:21:00 +0000</pubDate>
      
      <guid>/post/ssl-security-optimization/</guid>
      <description>
        
          
          
          
        
        
        
          先贴出本站的SSL安全评级,测试地址为https://www.ssllabs.com/ssltest/analyze.html?d=alair.cn
以下是本站Nginx配置中关于SSL部分
listen 443 ssl http2; ssl_certificate /etc/letsencrypt/live/alair.cn/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/alair.cn/privkey.pem; ssl_session_timeout 60m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:RC4-SHA:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS; ssl_prefer_server_ciphers on; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_dhparam /etc/ssl/certs/dhparam.pem; ssl_stapling on; ssl_stapling_verify on; add_header Strict-Transport-Security &amp;quot;max-age=63072000; includeSubdomains; preload&amp;quot;; add_header X-Frame-Options &amp;quot;DENY&amp;quot;;  说明：
dhparam.pem可以使用openssl dhparam -out dhparam.pem 4096命令生成，这个命令会执行很长时间，也可以将字节数改为2048
          
        
        </description>
    </item>
    
    <item>
      <title>使用MD5校验文件</title>
      <link>/post/md5sum-usage/</link>
      <pubDate>Sun, 13 Dec 2015 12:13:00 +0000</pubDate>
      
      <guid>/post/md5sum-usage/</guid>
      <description>
        
          
          
          
        
        
        
          md5sum命令用于生成和校验文件的md5值。它会逐位对文件的内容进行校验。是文件的内容，与文件名无关，也就是文件内容相同，其md5值相同。md5值是一个128位的二进制数据，转换成16进制则是32（128/4）位的进制值。
md5校验，有很小的概率不同的文件生成的md5可能相同。比md5更安全的校验算法还有SHA*系列的。
在网络传输时，我们校验源文件获得其md5sum，传输完毕后，校验其目标文件，并对比如果源文件和目标文件md5 一致的话，则表示文件传输无异常。否则说明文件在传输过程中未正确传输。
md5sum示例 生成文件md5 pi@raspi:~ $ md5sum bs.conf fcd3e1243d1cd5903d4e38c46671b84f bs.conf  md5sum校验是根据文件内容为准，与名称无关，意思是即便文件名修改了，但md5校验值应该不会改变，如下：
pi@raspi:~ $ cp bs.conf bs.conf.bak pi@raspi:~ $ md5sum bs* fcd3e1243d1cd5903d4e38c46671b84f bs.conf fcd3e1243d1cd5903d4e38c46671b84f bs.conf.bak  根据md5校验文件是否更改 一般网上分享的大文件都会附带一个.md5文件，这就是所分享文件的md5值，可以使用-c参数来直接使用.md5文件来检验文件是否完整
pi@raspi:~ $ md5sum bs.conf&amp;gt;bs.conf.md5 pi@raspi:~ $ md5sum -c bs.conf.md5 bs.conf: OK  如上例，将bs.conf的md5值定向到一个bs.conf.md5文件，然后使用md5sum -c bs.conf.md5直接检验相应文件是否完整一致，校验通过的话会输出提示OK，如果文件经过修改，内容已经不一致，则不会通过校验，则会显示FAILED
          
        
        </description>
    </item>
    
    <item>
      <title>使用SCP传输文件</title>
      <link>/post/transfer-files-using-scp/</link>
      <pubDate>Tue, 08 Dec 2015 21:38:00 +0000</pubDate>
      
      <guid>/post/transfer-files-using-scp/</guid>
      <description>
        
          
          
          
        
        
        
          示例：用户名root 地址 2.33.153.67
下载文件 scp root@2.33.153.67:/root/test.mp4 /home/pi/  将服务器上的/root/test.mp4下载到本地/home/pi文件夹
上传文件 scp /home/pi/ok.txt root@2.33.153.67:/root  将本地/home/pi/ok.txt上传至服务器/root文件夹
下载文件夹 scp -r root@2.33.153.67:/root/ebooks /home/pi  将服务器上的/root/ebooks文件夹下载至本地/home/pi下
上传文件夹 scp -r /home/pi/music root@2.33.153.67:/media  将本地/home/pi/music文件夹上传至服务器/media下
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下更改时区</title>
      <link>/post/change-timezone-in-centos/</link>
      <pubDate>Mon, 30 Nov 2015 11:30:00 +0000</pubDate>
      
      <guid>/post/change-timezone-in-centos/</guid>
      <description>
        
          
          
          
        
        
        
          Linux中时区代码都在/usr/share/zoneinfo/目录中
首先删除默认时区
#rm /etc/localtime  设定新的时区
#ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  完成！
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派安装ffmpeg</title>
      <link>/post/raspberry-pi-install-ffmpeg/</link>
      <pubDate>Sat, 07 Nov 2015 21:23:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-install-ffmpeg/</guid>
      <description>
        
          
          
          
        
        
        
          先安装h264编码器
#!/bin/bash cd /usr/src git clone git://git.videolan.org/x264 cd x264 ./configure --host=arm-unknown-linux-gnueabi --enable-static --disable-opencl make sudo make install  下载源码编译安装ffmpeg
cd /usr/src git clone git://source.ffmpeg.org/ffmpeg.git cd ffmpeg sudo ./configure --arch=armel --target-os=linux --enable-gpl --enable-libx264 --enable-nonfree make sudo make install  由于树莓派原因，这个过程很长……很长…… 建议开screen，然后Ctrl+a+d
          
        
        </description>
    </item>
    
    <item>
      <title>linux下将mp3转换为ogg</title>
      <link>/post/linux-mp3-converted-to-ogg/</link>
      <pubDate>Wed, 21 Oct 2015 11:21:00 +0000</pubDate>
      
      <guid>/post/linux-mp3-converted-to-ogg/</guid>
      <description>
        
          
          
          
        
        
        
          安装软件
apt-get install mpg321 vorbis-tools  使用如下命令转换
mpg321 tweet.mp3 -w raw &amp;amp;&amp;amp; oggenc raw -o tweet.ogg &amp;amp;&amp;amp; rm -rf raw  示例:
root@hkvps:/home/res# mpg321 tweet.mp3 -w raw &amp;amp;&amp;amp; oggenc raw -o tweet.ogg &amp;amp;&amp;amp; rm -rf raw High Performance MPEG 1.0/2.0/2.5 Audio Player for Layer 1, 2, and 3. Version 0.3.2-1 (2012/03/25). Written and copyrights by Joe Drew, now maintained by Nanakos Chrysostomos and others. Uses code from various people. See &#39;README&#39; for more!
          
        
        </description>
    </item>
    
    <item>
      <title>Gandi免费SSL证书使用方法</title>
      <link>/post/gandi-free-ssl-certificate-usage/</link>
      <pubDate>Thu, 24 Sep 2015 19:23:00 +0000</pubDate>
      
      <guid>/post/gandi-free-ssl-certificate-usage/</guid>
      <description>
        
          
          
          
        
        
        
          首先澄清此文中的免费不是真的免费，而是新注册或转移域名到Gandi，都可以获得标准版SSL证书一年的免费使用。
符合以上条件的话，可以进行下面操作了！
在Gandi上购买SSL证书，选择标准版，在结算的时候系统会自动判断是否免单，正常情况下会0元结单，完成后接着配置SSL证书。
首先提交CSR，这里需要自己生产CSR。
在此以3c.lc域名为例，在Ubuntu中操作。
openssl req -nodes -newkey rsa:2048 -sha1 -keyout 3clc.key -out 3clc.csr  然后根据提示填写以下内容：
 Country Name (2 letter code) [AU]: #国家代码，中国为CN
State or Province Name (full name) [Some-State]: #省份
Locality Name (eg, city) []: #城市
Organization Name (eg, company) [Internet Widgits Pty Ltd]: #组织名
Organizational Unit Name (eg, section) []: #部门名
Common Name (e.g. server FQDN or YOUR name) []:3c.lc #注意，这里需要填写你的域名。
Email Address []:2b@3c.lc #邮箱
Please enter the following &amp;lsquo;extra&amp;rsquo; attributes
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派开启root登录</title>
      <link>/post/raspberry-pi-allow-root-login/</link>
      <pubDate>Fri, 18 Sep 2015 21:28:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-allow-root-login/</guid>
      <description>
        
          
          
          
        
        
        
          想要通过ssh登录树莓派进行管理，使用默认的pi用户有时真的不便，对于linux老手来说，可以直接开启root用户ssh登录，这就方便多了，方法如下：
sudo passwd root sudo passwd --unlock root  设置SSH
sudo vi /etc/ssh/sshd_config  将其中的PermitRootLogin without-password改为PermitRootLogin yes，然后重启ssh服务sudo service ssh restart
Over!
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下使用grive管理Google Drive</title>
      <link>/post/linux-use-grive-management-google-drive/</link>
      <pubDate>Wed, 26 Aug 2015 18:23:00 +0000</pubDate>
      
      <guid>/post/linux-use-grive-management-google-drive/</guid>
      <description>
        
          
          
          
        
        
        
          找到一个linux下可用的google drive客户端，纯cli操作，值得推荐
grive项目主页 https://github.com/Grive/grive
Ubuntu中下通过PPA安装grive
sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get update sudo apt-get install grive  使用grive同步Google Drive
mkdir googledrive cd googledrive grive -a  第一次运行，会有验证提示，将提示的url代码粘贴到浏览器中验证帐户，完了后将生成的验证代码粘贴到grive进行验证。
          
        
        </description>
    </item>
    
    <item>
      <title>无法使用add-apt-repository命令</title>
      <link>/post/can-not-use-add-apt-repository/</link>
      <pubDate>Sun, 23 Aug 2015 08:23:00 +0000</pubDate>
      
      <guid>/post/can-not-use-add-apt-repository/</guid>
      <description>
        
          
          
          
        
        
        
          在Ubuntu中使用PPA安装软件时，需要用到add-apt-repository命令，但有的VPS系统因为体量原因，可能没有该命令，因此需要通过以下方法来安装：
apt-get install python-software-properties apt-get install software-properties-common 
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派安装配置minidlna</title>
      <link>/post/raspberry-pi-install-minidlna-to-create-digital-media-server/</link>
      <pubDate>Thu, 06 Aug 2015 18:26:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-install-minidlna-to-create-digital-media-server/</guid>
      <description>
        
          
          
          
        
        
        
          树莓派挂载移动存储 可以挂载移动硬盘或者大容量的U盘，参考以下文章：
 树莓派挂载U盘作为存储分区 fdisk分区实例  安装配置minidlna #sudo apt-get install -y minidlna  编辑minidlna配置文件/etc/minidlna.conf，内容如下：
media_dir=/home/pi/dlnadoc #媒体文件目录 db_dir=/var/lib/minidlna #minidlna通过SQLite来建立媒体库索引，因此需要定义数据库目录 listening_ip=192.168.1.111 #树莓派IP port=8200	#web端口，可以通过ip:port查看索引状态 friendly_name=Raspi_DLNA #服务器命名  重启minidlna服务
sudo service minidlna restart  强制刷新
sudo service minidlna force-reload  查看索引状态,浏览http://192.168.1.111:8200
MiniDLNA status Audio files: 0 Video files: 2 Image files: 0  DLNA客户端 PC
Windows7下将网络设置为家庭网络，完成后刷新，在网络中媒体设备下就可以自动发现Rasp_DLNA。
点击进去就可以使用MediaPlayer来浏览。
Android
VPlayer+ VPlayer uPnP DLNA Plugin
IOS
RushPlayer
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派使用DietPi</title>
      <link>/post/raspberry-pi-use-dietpi/</link>
      <pubDate>Tue, 04 Aug 2015 18:23:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-use-dietpi/</guid>
      <description>
        
          
          
          
        
        
        
          下载安装DietPi DietPi项目主页 http://dietpi.com/
DietPi下载地址 http://fuzon.co.uk/downloads/DietPi.7z
这个压缩包91MB，解压后的img文件522MB,比官方的小多了。
然后将镜像写入到SD卡中，linux下使用dd
dd if=DietPi_v74.img of=/dev/sdc bs=2M  Windows下使用Win32 Disk Imager，戳这里
写入完成后将SD卡插入树莓派，加电启动。
预设置Wifi链接 首次使用时，可以通过编辑dietpi.txt来进行wifi预设置。
将TF卡插入电脑读卡器，打开对应的磁盘，找到dietpi.txt文件，打开。
找到Wifi_Enabled=0，将其设置为1
然后找到Wifi_SSID和Wifi_KEY分别设置wifi节点名和密码，保存即可。
配置DietPi DietPi默认用户名密码为root dietpi，第一次启动DietPi提示检测升级，按提示操作。
不过由于天朝网路问题，可能升级比较缓慢，建议Ctrl+c终止升级，修改sources.list为朝内镜像。
DietPi默认没有vi,使用nano进行编辑，添加Aliyun源。
deb http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib deb-src http://mirrors.aliyun.com/raspbian/raspbian/ wheezy main non-free contrib  更新软件
apt-get update&amp;amp;&amp;amp;apt-get upgrade -y  然后运行dietpi-config进行配置。
DietPi - Config
 ┌────┤ ---------- DietPi-Config ---------- ├─────┐ │ Hardware : Raspberry Pi 1 (512MB) │ │ │ │ 1 Display Options │ │ 2 Audio Options │ │ 3 Performance Options │ │ 4 Advanced Options │ │ 5 Language/Regional Options │ │ 6 Security Options │ │ 7 Networking Options │ │ 8 AutoBoot Options │ │ 9 Tools │ │ │ │ │ │ &amp;lt;Ok&amp;gt; &amp;lt;Exit&amp;gt; │ │ │ └────────────────────────────────────────────────┘  推荐配置：
          
        
        </description>
    </item>
    
    <item>
      <title>安装Nginx和ngx_pagespeed</title>
      <link>/post/install-nginx-and-ngx_pagespeed-on-vps/</link>
      <pubDate>Fri, 24 Jul 2015 17:24:00 +0000</pubDate>
      
      <guid>/post/install-nginx-and-ngx_pagespeed-on-vps/</guid>
      <description>
        
          
          
          
        
        
        
          VPS配置:
Ubuntu 14.04 x86 RAM 512M SWAP 64M DISK 5G  准备工作 sudo apt-get update&amp;amp;&amp;amp;apt-get upgrade -y sudo apt-get install build-essential zlib1g-dev libpcre3 libpcre3-dev unzip libssl-dev -y  下载ngx_pagespeed cd NPS_VERSION=1.9.32.4 wget https://github.com/pagespeed/ngx_pagespeed/archive/release-${NPS_VERSION}-beta.zip unzip release-${NPS_VERSION}-beta.zip cd ngx_pagespeed-release-${NPS_VERSION}-beta/ wget https://dl.google.com/dl/page-speed/psol/${NPS_VERSION}.tar.gz tar -xzvf ${NPS_VERSION}.tar.gz  安装Nginx cd groupadd www useradd -s /sbin/nologin -g www www NGINX_VERSION=1.8.0 wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz tar -xvzf nginx-${NGINX_VERSION}.tar.gz cd nginx-${NGINX_VERSION}/ ./configure \ --user=www \ --group=www \ --prefix=/usr/local/nginx \ --with-http_stub_status_module \ --with-http_ssl_module \ --with-http_spdy_module \ --with-http_gzip_static_module \ --with-http_sub_module \ --add-module=$HOME/ngx_pagespeed-release-${NPS_VERSION}-beta \ sudo make sudo make install sudo ln -sf /usr/local/nginx/sbin/nginx /usr/bin/nginx  配置/etc/init.
          
        
        </description>
    </item>
    
    <item>
      <title>将Nginx更换为H2O</title>
      <link>/post/install-h2o-on-bandwagon-vps/</link>
      <pubDate>Tue, 21 Jul 2015 17:31:00 +0000</pubDate>
      
      <guid>/post/install-h2o-on-bandwagon-vps/</guid>
      <description>
        
          
          
          
        
        
        
          安装必须的软件 预备工具软件
#apt-get install autoconf automake m4 build-essential  libssl-dev 必选
#apt-get install openssl libssl-dev  以下为可选包，可自行搜索安装
 libuv libyaml wslay  安装H2O 下载安装最新版h2o https://github.com/h2o/h2o/releases
#wget https://github.com/h2o/h2o/archive/v1.4.1.tar.gz #tar zxf v1.4.1.tar.gz #cd h2o-1.4.1 #cmake -DWITH_BUNDLED_SSL=on . #make #sudo make install  编辑H2O站点配置文件 以下是一个简单的http与https配置文件，可自行参考修改
hosts: &amp;quot;www.example.com&amp;quot;: listen: port: 80 listen: port: 443 ssl: certificate-file: /path/to/server-certificate.crt key-file: /path/to/private-key.crt paths: &amp;quot;/&amp;quot;: file.dir: /path/to/doc-root access-log: /path/to/the/access-log error-log: /path/to/the/error-log pid-file: /path/to/the/pid-file http2-reprioritize-blocking-assets: ON # performance tuning option  启动H2O
          
        
        </description>
    </item>
    
    <item>
      <title>Xively与树莓派监控温度与湿度</title>
      <link>/post/use-xively-monitor-raspberry-pi/</link>
      <pubDate>Tue, 14 Jul 2015 14:14:00 +0000</pubDate>
      
      <guid>/post/use-xively-monitor-raspberry-pi/</guid>
      <description>
        
          
          
          
        
        
        
          进入https://www.xively.com/注册登录
添加设备(Add Device) 在Development Devices页面点击Add Device添加设备
填写Device Name和Device Description，将Privacy设定为Public Device
设置API Key 进入Device详情页，在API Keys中点击Add Key添加一个Key,将Permissions中的Read,Create,Update,Delete全部勾选，Label随便填。
向Xively提交数据 在这里通过CURL向xively提交JSON格式的数据
JSON数据格式
{ &amp;quot;datastreams&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;load&amp;quot;, &amp;quot;current_value&amp;quot;: &amp;quot;9.00&amp;quot; }, { &amp;quot;id&amp;quot;: &amp;quot;temp&amp;quot;, &amp;quot;current_value&amp;quot;: &amp;quot;89.15&amp;quot; } ] }  其中每个id为数据定义的idcurrent_value为提交的值
脚本文件send_xively.sh
#!/bin/bash LOCATION=&#39;/home/pi/xively_data&#39; #Path of Xively JSON DATA file API_KEY=&#39;orxUhgjqSYPDbv5243534tG65464345eArxSVY9pE8ITnE&#39; #API Key FEED_ID=&#39;1354438558&#39; #FEED_ID #################################################### COSM_URL=https://api.xively.com/v2/feeds/${FEED_ID}?timezone=+8 cpu_load=`cat /proc/loadavg | awk &#39;{print $2}&#39;` sen_t=`sudo /home/pi/st` sen_h=`sudo /home/pi/sh` for i in 1 2 3 4 5; do cpu_t=`cat /sys/class/thermal/thermal_zone0/temp | awk &#39;{print $1/1000}&#39;` if [[ &amp;quot;${cpu_t}&amp;quot; =~ ^- ]] then cpu_t=&#39;0.
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu下安装Ghost博客系统</title>
      <link>/post/ubuntu-install-ghost-blog-system/</link>
      <pubDate>Sat, 06 Jun 2015 16:26:00 +0000</pubDate>
      
      <guid>/post/ubuntu-install-ghost-blog-system/</guid>
      <description>
        
          
          
          
        
        
        
          安装Nodejs sudo add-apt-repository ppa:chris-lea/node.js sudo apt-get update sudo apt-get install nodejs  检查是否安装成功
root@hkvps:~# node -v v0.10.37 root@hkvps:~# npm -v 1.4.28  安装Ghost Ghost下载地址https://ghost.org/download/
wget https://ghost.org/zip/ghost-0.6.4.zip unzip ghost-0.6.4.zip -d ghost cd ghost npm install --production  运行Ghost
npm start  可以通过127.0.0.1:2368来访问
通过nmp start来运行Ghost，退出后就会停止，因此需要一个方法让Ghost一直运行
让Ghost一直运行 安装forever
npm install forever -g  进入ghost目录，执行以下命令，让Ghost一直运行
NODE_ENV=production forever start index.js  停止ghost
forever stop index.js  查看forever运行列表
forever list  结合Nginx配置域名 安装Nginx
sudo apt-get install nginx  编辑配置文件
          
        
        </description>
    </item>
    
    <item>
      <title>Nginx配置SSL证书</title>
      <link>/post/nginx-configuration-ssl-certificate/</link>
      <pubDate>Mon, 25 May 2015 15:25:00 +0000</pubDate>
      
      <guid>/post/nginx-configuration-ssl-certificate/</guid>
      <description>
        
          
          
          
        
        
        
          申请Wosign免费SSL证书 申请地址: https://www.wosign.com/products/free_ssl.htm
申请成功后，收到类似于aquan.me_sha256_cn.zip的文件,解压后包含如下文件
for Apache.zip for IIS.zip for Nginx.zip for Other Server.zip for Tomcat.zip  其中for Nginx.zip中包含如下两个文件，将其上传到VPS自定义位置。
 1_aquan.me_bundle.crt 2_aquan.me.key  配置Nginx 不多说了，直接贴代码:
#### Add Wosign SSL Start #### listen 443; ssl on; ssl_certificate /usr/local/nginx/ssl/ssl.crt; ssl_certificate_key /usr/local/nginx/ssl/ssl.key; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; #### Add Wosign SSL End ####  将以上代码插入listen 80;之后。
重启Nginx生效
/etc/init.d/nginx restart  以上设置完成，就可以通过https来浏览网站，同时http也可以浏览。
合并Wosign根证书 有的浏览器会提示不信任证书，可以通过合并Wosign根证书来解决
wget https://www.wosign.com/Root/Bundle_DV_St.crt cat Bundle_DV_St.crt &amp;gt;&amp;gt; /usr/local/nginx/ssl/ssl.crt  设置http跳转https 如果想将http跳转至https，可以进行如下设置:
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下安装最新版golang</title>
      <link>/post/install-the-last-version-golang-for-linux/</link>
      <pubDate>Mon, 11 May 2015 15:11:00 +0000</pubDate>
      
      <guid>/post/install-the-last-version-golang-for-linux/</guid>
      <description>
        
          
          
          
        
        
        
          ubuntu中可以使用apt-get install golang来安装go，但是版本稍旧
如果需要安装最新版的golang，那就得自己动手咧
安装golang 从官网下载最新版，手动安装
apt-get install build-essential wget https://storage.googleapis.com/golang/go1.4.2.linux-386.tar.gz tar zxf go1.4.2.linux-386.tar.gz cd go/src ./all.bash  设置PATH 安装完成后需要设置PATH才能随地使用go
export PATH=&amp;quot;/root/go/bin:$PATH&amp;quot;  检查版本 go version go version go1.4.2 linux/386 
          
        
        </description>
    </item>
    
    <item>
      <title>使用speedtest-cli测试带宽</title>
      <link>/post/use-speedtest-cli-tests-network-bandwidth/</link>
      <pubDate>Thu, 26 Mar 2015 13:26:00 +0000</pubDate>
      
      <guid>/post/use-speedtest-cli-tests-network-bandwidth/</guid>
      <description>
        
          
          
          
        
        
        
          安装speedtest-cli 安装speedtest-cli方法如下:
sudo apt-get install python-pip sudo pip install speedtest-cli  或
pip install git+https://github.com/sivel/speedtest-cli.git  或
git clone https://github.com/sivel/speedtest-cli.git python speedtest-cli/setup.py install  或
wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  或
curl -Lo speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  使用speedtest-cli root@MyUbuntuCloud:~# speedtest-cli -h usage: speedtest-cli [-h] [--bytes] [--share] [--simple] [--list] [--server SERVER] [--mini MINI] [--source SOURCE] [--timeout TIMEOUT] [--version] Command line interface for testing internet bandwidth using speedtest.
          
        
        </description>
    </item>
    
    <item>
      <title>fdisk分区实例</title>
      <link>/post/examples-of-fdisk-partition/</link>
      <pubDate>Thu, 19 Mar 2015 12:31:00 +0000</pubDate>
      
      <guid>/post/examples-of-fdisk-partition/</guid>
      <description>
        
          
          
          
        
        
        
          查看磁盘分区详情 直接使用fdisk -l 或者使用fdisk /dev/sda，再使用p命令来查看
Command (m for help): p Disk /dev/sda: 32.2 GB, 32212254720 bytes 255 heads, 63 sectors/track, 3916 cylinders, total 62914560 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x000657c3 Device Boot Start End Blocks Id System /dev/sda1 * 2048 61868031 30932992 83 Linux /dev/sda2 61870078 62912511 521217 5 Extended /dev/sda5 61870080 62912511 521216 82 Linux swap / Solaris  fdisk命令 fdisk有以下命令可用，其中常用的已简单说明
          
        
        </description>
    </item>
    
    <item>
      <title>使用youtube-dl下载YouTube视频</title>
      <link>/post/use-youtube-dl-to-download-youtube-video/</link>
      <pubDate>Thu, 08 Jan 2015 11:28:00 +0000</pubDate>
      
      <guid>/post/use-youtube-dl-to-download-youtube-video/</guid>
      <description>
        
          
          
          
        
        
        
          什么是youtube-dl youtube-dl是一个简单的下载youtube视频脚本工具，基于Python。
安装youtube-dl 官方安装方法
sudo curl https://yt-dl.org/latest/youtube-dl -o /usr/local/bin/youtube-dl sudo chmod a+x /usr/local/bin/youtube-dl  或者
sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl sudo chmod a+x /usr/local/bin/youtube-dl  还有两种方法:
sudo pip install youtube-dl brew install youtube-dl  使用youtube-dl youtube-dl [OPTIONS] URL [URL...]  youtube-dl官网 https://github.com/rg3/youtube-dl/
          
        
        </description>
    </item>
    
    <item>
      <title>Linux VPS中安装Shadowsocks</title>
      <link>/post/linux-vps-install-shadowsocks/</link>
      <pubDate>Sat, 13 Dec 2014 23:12:00 +0000</pubDate>
      
      <guid>/post/linux-vps-install-shadowsocks/</guid>
      <description>
        
          
          
          
        
        
        
          VPS系统版本: Ubuntu 12.04 32bit
最简单的办法 #apt-get install python-pip #pip install shadowsocks  启动Shadowsock
#ssserver -p 4000 -k sss4k -d start  -p后定义端口号，-k后面设定密码，-d start代表以daemon方式启动
 下面是另外一种方法:
安装shadowsocks-libev 先用aptitude show查看libssl-dev版本
aptitude show libssl-dev  然后根据版本执行以下修改：
libssl &amp;gt; 1.0.1
在/etc/apt/sources.list添加下行：
deb http://shadowsocks.org/debian wheezy main  libssl &amp;gt; 0.9.8 但 &amp;lt; 1.0.0
在/etc/apt/sources.list添加下行：
deb http://shadowsocks.org/debian squeeze main  添加GPG
wget http://shadowsocks.org/debian/1D27208A.gpg sudo apt-key add 1D27208A.gpg  添加完成后更新软件源，然后安装shadowsocks
sudo apt-get update sudo apt-get install python-m2crypto sudo apt-get install shadowsocks-libev  配置/管理shadowsocks服务 配置
          
        
        </description>
    </item>
    
    <item>
      <title>CentOS中Crontab安装和使用</title>
      <link>/post/install-crontab-on-centos-and-usage/</link>
      <pubDate>Mon, 22 Sep 2014 19:22:00 +0000</pubDate>
      
      <guid>/post/install-crontab-on-centos-and-usage/</guid>
      <description>
        
          
          
          
        
        
        
          安装crontab: [root@CentOS ~]# yum install vixie-cron [root@CentOS ~]# yum install crontabs  说明：
 vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。  cron 是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：
/sbin/service crond start //启动服务 /sbin/service crond stop //关闭服务 /sbin/service crond restart //重启服务 /sbin/service crond reload //重新载入配置  查看crontab服务状态：service crond status
手动启动crontab服务：service crond start
查看crontab服务是否已设置为开机启动，执行命令：ntsysv
加入开机自动启动:chkconfig --level 35 crond on
rontab命令 功能说明： 设置计时器。
语法： crontab [-u &amp;lt;用户名称&amp;gt;][配置文件] 或 crontab [-u &amp;lt;用户名称&amp;gt;][-elr]
补充说明： cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。其配置文件格式如下： Minute Hour Day Month DayOFWeek Command
参数:
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下CLI模式使用Dropbox</title>
      <link>/post/cli-model-of-linux-using-dropbox/</link>
      <pubDate>Tue, 19 Aug 2014 08:19:00 +0000</pubDate>
      
      <guid>/post/cli-model-of-linux-using-dropbox/</guid>
      <description>
        
          
          
          
        
        
        
          下载Dropbox 32-bit:
cd ~ &amp;amp;&amp;amp; wget -O - &amp;quot;https://www.dropbox.com/download?plat=lnx.x86&amp;quot; | tar xzf -  64-bit:
cd ~ &amp;amp;&amp;amp; wget -O - &amp;quot;https://www.dropbox.com/download?plat=lnx.x86_64&amp;quot; | tar xzf -  连接到Dropbox ~/.dropbox-dist/dropboxd  按照提示，在浏览器中打开链接，确认授权。
CLI模式使用Dropbox 下载执行脚本:
wget https://www.dropbox.com/download?dl=packages/dropbox.py chmod +x dropbox.py  dropbox.py使用
root@hkvps:~# ./dropbox.py help Dropbox command-line interface commands: Note: use dropbox help &amp;lt;command&amp;gt; to view usage for a specific command. status get current status of the dropboxd help provide help puburl get public url of a file in your dropbox stop stop dropboxd running return whether dropbox is running start start dropboxd filestatus get current sync status of one or more files ls list directory contents with current sync status autostart automatically start dropbox at login exclude ignores/excludes a directory from syncing lansync enables or disables LAN sync 
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派中使用TL-WN725N</title>
      <link>/post/use-tl-wn725n-in-raspberry-pi/</link>
      <pubDate>Tue, 12 Aug 2014 18:12:00 +0000</pubDate>
      
      <guid>/post/use-tl-wn725n-in-raspberry-pi/</guid>
      <description>
        
          
          
          
        
        
        
          Raspbian版本 2014-01-07-wheezy-raspbian.img
下载地址为http://cdn.lyq.wiki/res/8188eu-20140616.tar.gz
首先固网链接树莓派，通过SSH登录
wget http://cdn.lyq.wiki/res/8188eu_31024_614.zip unzip 8188eu_31024_614.zip sudo mv 8188eu.ko /lib/modules/`uname -r`/kernel/drivers/net/wireless sudo chown root:root /lib/modules/`uname -r`/kernel/drivers/net/wireless/8188eu.ko sudo mv rtl8188eufw.bin /lib/firmware/rtlwifi/ sudo chown root:root /lib/firmware/rtlwifi/rtl8188eufw.bin sudo depmod -a sudo modprobe 8188eu  然后编辑/etc/netwok/interfaces，添加以下内容
allow-hotplug wlan0 auto wlan0 iface wlan0 inet manual wpa-roam /etc/mywpa.conf iface default inet dhcp  新建mywpa.conf写入链接配置vi /etc/mywpa.conf
network={ ssid=&amp;quot;YOUR SSID&amp;quot; proto=RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP psk=&amp;quot;YOUR PASSWORD&amp;quot; }  重启系统
          
        
        </description>
    </item>
    
    <item>
      <title>CentOS7安装指南</title>
      <link>/post/centos7-installation-guide/</link>
      <pubDate>Sat, 09 Aug 2014 08:09:00 +0000</pubDate>
      
      <guid>/post/centos7-installation-guide/</guid>
      <description>
        
          
          
          
        
        
        
          下载Centos7安装镜像: http://mirrors.aliyun.com/centos/7.0.1406/isos/x86_64/CentOS-7.0-1406-x86_64-GnomeLive.iso
将下载后的镜像写入U盘:
#dd if=CentOS-7.0-1406-x86_64-GnomeLive.iso of=/dev/sdb bs=4M &amp;amp;&amp;amp; sync  关闭电脑，从U盘启动。
进入桌面后，点击Install to Hard Drive开始安装。
选择语言
这里选择简体中文(中国)
安装信息摘要
这里需要设置四部分内容：日期和时间、键盘、安装位置、网络和主机名
设置安装目标和位置,选择本地磁盘，然后勾选我要配置分区以自定义分区信息。
点击完成进入手动分区。
在左侧选择具体磁盘分区，右边编辑挂载信息，然后点击更新设置
以下为编辑/home挂载点信息：
下图为编辑后的分区信息，点击左上角完成
查看更改摘要，确认没问题了就点击接受更改
设置网络和主机名
完成设置后，点击右下角开始安装
用户设置
设置ROOT密码
创建用户
所有配置完成后，等待安装结束。。。
提示安装完成，点击右下角Quit退出。
          
        
        </description>
    </item>
    
    <item>
      <title>创建固定大小的文件</title>
      <link>/post/create-a-fixed-size-file/</link>
      <pubDate>Thu, 10 Jul 2014 07:10:00 +0000</pubDate>
      
      <guid>/post/create-a-fixed-size-file/</guid>
      <description>
        
          
          
          
        
        
        
          有时我们需要新建指定大小的文件，很多人可能使用压缩软件的分割功能，分割出指定大小的文件。
其实操作系统本身自带的命令就可以胜任以上任务。
Windows
新建名为1G-File，大小1G的文件
fsutil file createnew 1G-File 1073741824  Linux
新建名为2G-File，大小为2G的文件
dd if=/dev/zero of=./2G-File bs=1M count=2048 
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派配置VNC</title>
      <link>/post/raspberry-pi-configuration-vnc/</link>
      <pubDate>Tue, 11 Mar 2014 00:23:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-configuration-vnc/</guid>
      <description>
        
          
          
          
        
        
        
          安装VNC Server
$sudo apt-get install tightvncserver $sudo apt-get install ttf-wqy-microhei //安装中文字体  使用VNC Server
$vncserver -geometry 1024x768 //分辨率，推荐960x640，或者640x480 $vncserver -kill :1 //结束vncserver进程  Real VNC Viewer链接方法： 192.168.1.2:1
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派与DNSPod动态域名解析</title>
      <link>/post/raspberry-pi-and-dnspod-dynamic-dns/</link>
      <pubDate>Mon, 03 Mar 2014 03:03:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-and-dnspod-dynamic-dns/</guid>
      <description>
        
          
          
          
        
        
        
          所需条件
 Raspberry Pi TP-Link路由器 DNSPod帐户 域名  配置路由器 进入路由器的DHCP服务器-&amp;gt;静态地址分配菜单，为Raspberry Pi分配静态IP地址，例如：192.168.1.200
进入路由器的安全功能-&amp;gt;远端WEB管理菜单，设置WEB管理端口为一个非80值，例如82
进入路由器的转发规则-&amp;gt;DMZ主机菜单，将DMZ主机IP地址设置为Raspberry Pi的ip地址，然后启用保存。
设置DNSPod动态域名解析 首先登录DNSPod网页管理域名，将二级域名www 的A记录解析到路由器外网IP(可通过路由器管理首页查询，或者通过浏览ip138.com来获得)
注：一级域名请解析**@**的A记录。
下载DNSPod官方客户端Lite https://support.dnspod.cn/Support/api
解压后双击打开登录，从右侧信息列表中也可以看到本机最新IP，点击相应域名后的动态解析按钮，在动态解析设置中右键点击相应的动态记录启用即可，关闭DNSPod官方客户端Lite。
设置Raspberry Pi 安装Web服务器软件(Nginx)
#apt-get install nginx #/etc/init.d/nginx start  内网可以通过浏览`http://192.168.1.129&amp;quot;来检查Nginx是否正常运行。
浏览https://gist.githubusercontent.com/chuangbo/833369，下载动态域名解析脚本(pypod.py)
编辑pypod.py修改以下内容：
login_email=&amp;quot;email&amp;quot;, # DSNPod帐户邮箱 login_password=&amp;quot;password&amp;quot;, # DSNPod帐户密码 domain_id=100, # 域名id record_id=100, # 记录id sub_domain=&amp;quot;www&amp;quot;, # 子域名  其中域名id与记录id可以通过以下命令获取：
curl -k https://dnsapi.cn/Domain.List -d &amp;quot;login_email=xxx&amp;amp;login_password=xxx&amp;quot; curl -k https://dnsapi.cn/Record.List -d &amp;quot;login_email=xxx&amp;amp;login_password=xxx&amp;amp;domain_id=xxx&amp;quot;  提示：如果你使用了www子域名，则需要获取www的记录id，如果使用一级域名(@)，则需要获取**@**的记录id。
编辑完pypod.py保存退出，使用以下命令运行：
#python pypod.py  现在可以通过域名来浏览Raspberry Pi上的Web内容了。
pypod.py开机运行
添加/usr/bin/python /home/pi/pypod.
          
        
        </description>
    </item>
    
    <item>
      <title>开始使用树莓派</title>
      <link>/post/starting-use-raspberry-pi/</link>
      <pubDate>Fri, 28 Feb 2014 12:28:00 +0000</pubDate>
      
      <guid>/post/starting-use-raspberry-pi/</guid>
      <description>
        
          
          
          
        
        
        
          安装系统 从官网下载系统镜像，推荐Raspbian
http://downloads.raspberrypi.org/raspbian_latest
将下载后的zip文件解压，得到2014-01-07-wheezy-raspbian.img文件。
准备一张SD卡，最好容量大于4GB，Class10
将镜像写入SD卡
 Linux下推荐使用dd名来写入镜像  使用fdisk -l检查分区信息，比如sd卡设备为**/dev/sdb**，使用以下命令写入：
#dd if=2014-01-07-wheezy-raspbian.img of=/dev/sdb bs=1M   Windows下推荐使用Win32DiskImager写入镜像  Win32DiskImager下载地址：http://sourceforge.net/projects/win32diskimager/
下载后打开软件，选择好镜像文件与USB设备，然后点击Write写入。
开机进入系统 将已写入系统的SD卡插入Raspberry Pi，通过固网链接路由器，然后使用USB供电启动。
正常启动后，板载的ACT，PWR、FDX、LNK、100五个指示灯均点亮。
通过SSH连接Raspberry Pi
查看Raspberry Pi IP地址
#nmap -sP 192.168.1/24  检查出MAC后标注(Raspberry Pi Foundation)的即为Raspberry Pi主机。
然后通过SSH来链接主机
#ssh 192.168.1.127  用户名为pi，默认密码为raspberry
Widnows下推荐使用Putty
设置Raspberry 运行设置工具sudo raspi-config
 选择Expand Filesystem扩展文件系统 Change User Passwd 修改默认用户pi的密码，当然也可以在系统中使用passwd命令来更改。 Advanced Options-&amp;gt;Hostname 修改主机名 Overclock 超频，建议900Mhz  
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu下安装VPN</title>
      <link>/post/install-vpn-on-ubuntu/</link>
      <pubDate>Sun, 23 Feb 2014 12:23:00 +0000</pubDate>
      
      <guid>/post/install-vpn-on-ubuntu/</guid>
      <description>
        
          
          
          
        
        
        
          安装pptpd
#apt-get install pptpd  IP设置
#vi /etc/pptpd.conf  添加以下内容:
localip 192.18.0.1 remoteip 192.168.0.200-230  设置DNS
#vi/etc/ppp/pptpd-options  添加以下内容：
ms-dns 192.168.1.1 ms-dns 8.8.8.8  添加用户
#vi /etc/ppp/chap-secrets  添加以下内容:
name * passwd *  重启vpn
#/etc/init.d/pptpd restart  允许ip4访问外网
#vi /etc/sysctl.conf net.ipv4.ip_forward=1 //取消本行前注释符(*) #sysctl -p 
          
        
        </description>
    </item>
    
    <item>
      <title>VPS优化</title>
      <link>/post/optimization-vps/</link>
      <pubDate>Sat, 01 Feb 2014 12:31:00 +0000</pubDate>
      
      <guid>/post/optimization-vps/</guid>
      <description>
        
          
          
          
        
        
        
          pdksh替代bash $sudo apt-get install pdksh $sudo vi /etc/shells  添加/bin/pdksh到/etc/shells文件
$chsh -s /bin/pdksh  重新登录即可。
修改SSH端口 #vi /etc/ssh/sshd_config  将Port 22中的22改为自定义数字即可
# /etc/init.d/ssh restart  dropbear替代openssh $sudo apt-get install dropbear $sudo /etc/init.d/ssh stop $sudo vi /etc/default/dropbear  修改NO_START=0,修改DROPBEAR_PORT为自定义端口号
$sudo /etc/init.d/dropbear start $sudo apt-get remove openssh-server $sudo apt-get autoremove  关闭多余的TTY Ubuntu 12.04 server如下操作
#cd /etc/init/ #mv tty2.conf tty2.conf.bak #mv tty3.conf tty2.conf.bak #mv tty4.conf tty2.conf.bak #mv tty5.conf tty2.conf.bak #mv tty6.conf tty2.conf.bak #reboot  Debian 7如下操作
          
        
        </description>
    </item>
    
    <item>
      <title>VPS下自动备份文件和数据库</title>
      <link>/post/automatic-backup-files-and-database-on-vps/</link>
      <pubDate>Mon, 13 Jan 2014 01:13:00 +0000</pubDate>
      
      <guid>/post/automatic-backup-files-and-database-on-vps/</guid>
      <description>
        
          
          
          
        
        
        
          新建脚本，名为autoback.sh
#vi autoback.sh  脚本(autoback.sh)内容如下:
#!/bin/sh #备份网站目录/home/www/ tar zcvf /home/backup/www$(date + &amp;quot;%Y%m%d&amp;quot;).tar.gz /home/www/* #备份数据库 www /usr/local/mysql/bin/mysqldump -uroot -ppassword dbname &amp;gt; /home/backup/dbname$(date +&amp;quot;%Y%m%d&amp;quot;).sql #删除三天前的备份 cd /home/backup/ rm -f *$(date -d -3day +&amp;quot;%Y%m%d&amp;quot;)*  将脚本(autoback.sh)添加到自动执行任务列表:
#chmod +x autoback.sh #crontab -e 59 23 * * * /root/autoback.sh  推荐注册Dropbox，参考**Linux下CLI模式使用Dropbox**，将备份文件自动同步到Dropbox。
          
        
        </description>
    </item>
    
    <item>
      <title>修复grub引导</title>
      <link>/post/repair-grub-boot/</link>
      <pubDate>Thu, 12 Dec 2013 12:13:00 +0000</pubDate>
      
      <guid>/post/repair-grub-boot/</guid>
      <description>
        
          
          
          
        
        
        
          笔记本原来安装的Linux/Windows XP双系统，今天重新安装了Windows7，但是开机的grub引导被搞掉了，找了下grub的man看了半天，摸索出来如何修复原来的grub引导。
首先，使用Linux live cd引导系统，然后按照以下操作：
检查分区信息
ubuntu@ubuntu:~$ sudo -s root@ubuntu:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 465.8G 0 disk ├─sda1 8:1 0 40G 0 part ├─sda2 8:2 0 1K 0 part ├─sda5 8:5 0 4G 0 part [SWAP] ├─sda6 8:6 0 20G 0 part ├─sda7 8:7 0 20G 0 part ├─sda8 8:8 0 100G 0 part ├─sda9 8:9 0 200G 0 part └─sda10 8:10 0 81.
          
        
        </description>
    </item>
    
    <item>
      <title>fstab自动挂载分区</title>
      <link>/post/fstab-automatically-mount-partitions/</link>
      <pubDate>Sun, 08 Sep 2013 19:18:00 +0000</pubDate>
      
      <guid>/post/fstab-automatically-mount-partitions/</guid>
      <description>
        
          
          
          
        
        
        
          使用fdisk -l查看分区信息
以下为需要自动挂载的分区:
分区 | 格式 ------------------------------ /dev/sd1 | NTFS /dev/sd5 | NTFS /dev/sd6 | NTFS /dev/sd7 | NTFS /dev/sd8 | NTFS  新建挂载目录
#mkdir /media/{a,b,c,d,e}  编辑fstab文件vi /etc/fstab写入以下内容
/dev/sda1 /media/a ntfs-3g defaults,iocharset=gb2312 0 0 /dev/sda5 /media/b ntfs-3g defaults,iocharset=gb2312 0 0 /dev/sda6 /media/c ntfs-3g defaults,iocharset=gb2312 0 0 /dev/sda7 /media/d ntfs-3g defaults,iocharset=gb2312 0 0 /dev/sda8 /media/e ntfs-3g defaults,iocharset=gb2312 0 0  说明:
 /dev/sdax 表示分区 /mnt/xxx 表示挂载点 vat/ntfs-3g 表示分区格式 iocharset=xxx 设置字符集,为了支持windows中文目录，应设为gb2312  
          
        
        </description>
    </item>
    
    <item>
      <title>Debian下安装Jekyll</title>
      <link>/post/install-jekyll-on-debian/</link>
      <pubDate>Fri, 06 Sep 2013 19:16:00 +0000</pubDate>
      
      <guid>/post/install-jekyll-on-debian/</guid>
      <description>
        
          
          
          
        
        
        
          安装Rvm $sudo aptitude install curl $curl -L get.rvm.io | bash -s stable  加载Rvm
$source ~/.rvm/scripts/rvm  检查安装必备组件
$rvm requirements  安装 Ruby 1.9.3 $rvm install 1.9.3 $ruby -v $gem -v  更改Gem软件源
$gem sources -a http://ruby.taobao.org/ $gem sources -r http://rubygems.org/ $gem sources -l  安装Jekyll $gem install jekyll $jekyll -v  打完收工!
          
        
        </description>
    </item>
    
    <item>
      <title>卸载linux旧内核</title>
      <link>/post/uninstall-the-old-linux-kernel/</link>
      <pubDate>Tue, 13 Aug 2013 23:13:00 +0000</pubDate>
      
      <guid>/post/uninstall-the-old-linux-kernel/</guid>
      <description>
        
          
          
          
        
        
        
          当linux内核更新后，开机的GRUB引导菜单中会存在新旧内核多个引导菜单，当新内核使用稳定后，我们可以将旧的内核删除以减少开机引导项，以下是在fedora与ubuntu中删除旧内核的方法，其他的YUM系或APT系系统可以参考参考
fedora中删除旧内核:
[aquan@localhost ~]$ uname -r 2.6.32-220.13.1.el6.i686 [aquan@localhost ~]$ rpm -qa|grep kernel kernel-2.6.32-220.13.1.el6.i686 kernel-2.6.32-220.el6.i686 kernel-firmware-2.6.32-220.13.1.el6.noarch dracut-kernel-004-256.el6_2.1.noarch [aquan@localhost ~]$ sudo yum remove kernel-2.6.32-220.el6.i686  ubunu中删除旧内核:
sudo apt-get purge ~ilinux-image-.*\(\!`uname -r`\) 
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下部署goAgent</title>
      <link>/post/linux-deployment-goagent/</link>
      <pubDate>Thu, 30 May 2013 15:30:00 +0000</pubDate>
      
      <guid>/post/linux-deployment-goagent/</guid>
      <description>
        
          
          
          
        
        
        
          准备工作 下载Google Appengine SDK For Pyahont与goAgent
1.Google App Engine SDK for Python https://developers.google.com/appengine/downloads?hl=zh-CN#Google_App_Engine_SDK_for_Python 2.goagent https://code.google.com/p/goagent/  下载后解压，将goagent文件夹放到google_appengine目录下，目录结构如下:
~/google_appengine/goagent-goagent-d488f2  准备好Google Application_ID与两步验证密码,如何申请问Google
配置goagent 编辑~/google_appengine/goagent-goagent-d488f2/local/proxy.ini
填写正确的appid，在此建议将profile由默认的google_cn改为google_hk
参考以下步骤执行：
aquan@edge ~/google_appengine $ python appcfg.py update goagent-goagent-d4488f2/server/python/ 07:03 PM Host: appengine.google.com 07:03 PM Application: wrchiublog; version: 1 07:03 PM Starting update of app: wrchiublog, version: 1 07:03 PM Getting current resource limits. Email: wrchiu@126.com //在此填写googleid Password for wrchiu@126.com: //此处填写两步验证密码，而不是帐号密码 07:04 PM Scanning files on local disk.
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu Server中安装VNC Server</title>
      <link>/post/install-vnc-server-on-ubuntu-server/</link>
      <pubDate>Sat, 11 May 2013 15:11:00 +0000</pubDate>
      
      <guid>/post/install-vnc-server-on-ubuntu-server/</guid>
      <description>
        
          
          
          
        
        
        
          安装所有软件
#aptitude install openbox firefox ttf-wqy-microhei #aptitude install vnc4server  设置openbox启动
#update-alternatives --config x-session-manager 然后选择openbox-session  设置vncserver密码:
#vncpasswd Password: ****** Verify:*****  运行vncserver
# vncserver //运行 # vncserver -kill :1 //终止  编辑~/.vnc/xstartup文件
#vi ~/.vnc/xstartup #!/bin/sh # Uncomment the following two lines for normal desktop: # unset SESSION_MANAGER # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;quot;$VNCDESKTOP Desktop&amp;quot; &amp;amp; x-window-manager &amp;amp; startx&amp;amp; //添加此行  链接VNC
          
        
        </description>
    </item>
    
    <item>
      <title>Debian使用apt-spy选择最佳源</title>
      <link>/post/debian-use-apt-spy-to-select-the-best-source/</link>
      <pubDate>Thu, 09 May 2013 05:09:00 +0000</pubDate>
      
      <guid>/post/debian-use-apt-spy-to-select-the-best-source/</guid>
      <description>
        
          
          
          
        
        
        
          安装apt-spy
#apt-get install apt-spy  使用apt-spy选择最佳源
#apt-spy update #apt-spy -d stable -a asia -t 3  结果保存在/etc/apt/sources.list.d/apt-spy.list，可手动替换到/etc/apt/sources.list
apt-spy选项:
 -d 系统版本，可选stable,testing,unstable -a 区域,如asia,europe等，可用项可cat /etc/apt-spy.conf -t 超时阀值(s)，可筛掉长时间不响应的地址  
          
        
        </description>
    </item>
    
    <item>
      <title>使用wget下载整站</title>
      <link>/post/download-the-entire-station-using-wget/</link>
      <pubDate>Sun, 21 Apr 2013 04:21:00 +0000</pubDate>
      
      <guid>/post/download-the-entire-station-using-wget/</guid>
      <description>
        
          
          
          
        
        
        
          命令实例:
$wget -r -p -np -k -e robots=off -U &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6&amp;quot; &amp;quot;http://baidu.com&amp;quot;  参数解释:
-r,--recursive 递归下载 -p, --page-requisites 下载显示HTML文件的所有图片 -np, --no-parent 不要追溯到父目录 -k, --convert-links 转换非相对链接为相对链接 -e,–execute=COMMAND 执行一个 “.wgetrc”命令 robots=off 无视robots.txt -U, --user-agent=AGENT 设定代理的名称为 AGENT &amp;quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6&amp;quot; 伪装agent 
          
        
        </description>
    </item>
    
    <item>
      <title>Archlinux下修改网卡名称</title>
      <link>/post/archlinux-modify-the-network-adapter-name/</link>
      <pubDate>Wed, 06 Mar 2013 03:06:00 +0000</pubDate>
      
      <guid>/post/archlinux-modify-the-network-adapter-name/</guid>
      <description>
        
          
          
          
        
        
        
          刚刚安装了Archlinux，用的archlinux-2013.03.01-dual.iso镜像，最新的systemd将网卡名更改了，不在是原来默认的eth0/wlan0
我的ifconfig -a输出如下:
enp9s0: flags=4098 mtu 1500 ether 04:7d:7b:f8:25:9d txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 0 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.
          
        
        </description>
    </item>
    
    <item>
      <title>Archlinux安装笔记</title>
      <link>/post/archlinux-installation-notes/</link>
      <pubDate>Thu, 03 Jan 2013 01:03:00 +0000</pubDate>
      
      <guid>/post/archlinux-installation-notes/</guid>
      <description>
        
          
          
          
        
        
        
          下载ArchLinux镜像
下载archlinux-2012.12.01-dual.iso，可以将其刻录到CD引导启动，或者使用dd命令将其写入到USB设备。
http://mirrors.163.com/archlinux/iso/2012.12.01/archlinux-2012.12.01-dual.iso.torrent
完成后重启电脑进入到Archlinux CD开始进行安装。
设置网络连接
整个安装过程，本机需要连接互联网以下载所需文件，在此推荐使用网线连接自动获取IP，如果是这样那么当你进入到archlinux时网络已经连接成功了，可以使用ping来查看是否成功
#ping -c 5 aotee.com  如果不是自动获取IP，可以参考以下相关命令设置网络连接：
开启|关闭网络设备
# ip link set eth0 up # ip link set eth0 down  自动获取IP(DHCP)
# dhcpcd eth0  查看状态
# ip addr show dev eth0  如果是无线网卡，请参考这里进行设置。
设置键盘布局
#loadkeys us  准备硬盘分区
设置硬盘分区时可以使用自己熟悉的工具进行操作，以下是我的分区方案
/dev/sda9 /boot /dev/sda10 swap /dev/sda11 / /dev/sda12 /home  我使用LinuxMint LiveCD的磁盘工具进行分区，分区完成后可以使用lsblk /dev/sda来查看结果。
格式化分区
参考以下命令对已有的分区进行格式化
#mkfs -t ext2 /dev/sda9 #mkfs -t ext4 /dev/sda11 #mkfs -t ext4 /dev/sda12 #mkswap /dev/sda10 #swapon /dev/sda10  挂载分区
          
        
        </description>
    </item>
    
    <item>
      <title>Cinnarch安装全过程</title>
      <link>/post/installation-cinnarch/</link>
      <pubDate>Fri, 23 Nov 2012 11:23:00 +0000</pubDate>
      
      <guid>/post/installation-cinnarch/</guid>
      <description>
        
          
          
          
        
        
        
          Cinnarch是一个新的linux发行版，基于Archlinux以Cinnamon为默认桌面系统，对于想体验Archlinux但对于全新的安装方法无法把握的朋友，Cinnarch不失为一个良好的选择。
以下为安装Cinnarch的一次全过程，以供需要的朋友参考。
下载Cinnarch
首先从官网下载Cinnarch镜像，地址为 http://www.cinnarch.com/try-it/ ，按照需要下载32Bit或者64Bit的，下载方式有直接下载(iso)与通过BT种子(torrent)下载两种方式。
将下载后的镜像刻入CD，放入光驱后重启以进入LiveCD即可。
安装Cinnarch
进入到LiveCD后会弹出一个Welcome弹窗，可以点击其中的CLI Installer开始安装，或者先使用系统(Try it)，需要安装时在系统菜单中找到Cinnarch Installer CLI点击打开，也可以开始安装。
打开安装程序前，请确认电脑已经可以联网使用，因为一切软件包都是实时从mirror下载的，并且安装好的系统和archlinux一样，可以滚动升级(Rolling upgrade)。
打开安装程序，首先提示更新软件list，更新完成后会出现一个welcome的对话框，确认后进入到安装主菜单，如下：
0 Set Language and Keyboard 1 Set Time and Date 2 Prepare Hard Drive 3 Select Source 4 Install System 5 Configure System 6 Exit Install  设置语言与键盘 (Set Language and Keyboard)
选择进入设置菜单，在此主要设置语言选项，键盘布局可以不设置，采用默认即可。 语言设置为zh_CN.UTF-8 设置键盘布局(Set Keymap)时可以直接选择返回主菜单(Return to Main Menu)
设置时间与日期(Set Time And Date)
此项用于设置时间与日期，此项下面有三个子菜单：
1 Select Region and Timezone 2 Set Time and Date 3 Return to Main Menu  第一项菜单用于设置区域与时区，此次区域(Region)设置为Asia，时区(Timezone)设置为Chongqing(或者Beijing/Shanghai)
          
        
        </description>
    </item>
    
    <item>
      <title>Linux Live USB制作工具</title>
      <link>/post/linux-liveusb-tools/</link>
      <pubDate>Mon, 13 Aug 2012 18:12:00 +0000</pubDate>
      
      <guid>/post/linux-liveusb-tools/</guid>
      <description>
        
          
          
          
        
        
        
          现在大多数的Linux发行版都支持Live方式，即可直接运行体验无需安装。
Linux Live又分为LiveCD和LiveUSB，前者是通过光盘(CD/DVD)方式直接运行，后者则是通过USB设备(U盘/移动硬盘)来运行。
以下介绍几款Linux Live USB制作工具，个人推荐Linux Live USB Creator!
注:需要主板BIOS开启USB Boot功能。
Universal USB Installer http://www.pendrivelinux.com
1，选择Linux版本，勾选后面的Download the iso(Optional).则从互联网下载所选镜像。 2，选择本地镜像文件(iso)。 3，选择将要写入的USB设备，勾选Show all Drives可以看到所有本地磁盘，需要写入移动硬盘就需要勾选此项。
UNetbootin http://unetbootin.sourceforge.net
1，选择镜像源，从网络下载或者本地iso文件 2，在类型中选择usb设备或者硬盘，然后在驱动器栏选择具体的盘符。
LinuxLive USB Creator http://www.linuxliveusb.com/
1，选择需要写入的USB设备 2，选择安装源（ISO文件、光驱、网路下载）
Image Writer for Microsoft Windows (Win32DiskImager) https://launchpad.net/win32-image-writer
这个操作相对很简单，并且只单一的适用于img镜像文件，如Meego就是采用这种发行方式
万能的dd
最喜欢这个方法了！ 使用lsblk查看u盘设备名，如/dev/sdb，例如镜像文件名为linux.iso，使用以下命令将镜像文件写入U盘
#dd if=linux.iso of=/dev/sdb 
          
        
        </description>
    </item>
    
    <item>
      <title>Nokia N900系统优化脚本</title>
      <link>/post/system-optimization-script-for-nokia-n900/</link>
      <pubDate>Wed, 28 Mar 2012 13:28:00 +0000</pubDate>
      
      <guid>/post/system-optimization-script-for-nokia-n900/</guid>
      <description>
        
          
          
          
        
        
        
          Nokia N900系统优化脚本，更加省电，操作更加流畅！
脚本下载地址http://cdn.lyq.wiki/res/speedpatch-ALTERNATIVE.tar.gz.rar
使用方法： 通过USB连接手机，将脚本传到磁盘根目录(/home/user/MyDocs)，以下操作可以使用XT或者SSH连接电脑进行(Root权限下)
#cd /home/user/MyDocs #tar xzvf speedpatch-ALTERNATIVE.tar.gz #mkdir /wp-content/local/sbin #cp /root/.profile /root/.profile.bak #cp ./.profile_root /root/.profile #cp ./.profile /home/user/ #cp ./speedpatch /etc/event.d/ #cp ./cgroup_clean /wp-content/local/sbin #chmod +rwx /wp-content/local/sbin/cgroup_clean #rm ./.profile_root #rm ./.profile #rm ./speedpatch #rm ./cgroup_clean  应用transition.ini文件:
1.使用theme-customizer
#cp /home/user/MyDocs/transitions.ini /opt/theme-customizer  2.使用系统默认主题
#cp /home/user/MyDocs/transitions.ini /wp-content/share/hildon-desktop/  3.删除优化脚本
#cp /root/.profile.bak /root/.profile #rm /etc/event.d/speedpatch #rm /home/user/.profile #rm /wp-content/local/sbin/cgroup_clean 
          
        
        </description>
    </item>
    
    <item>
      <title>LNMP使用实例</title>
      <link>/post/lnmp-usages/</link>
      <pubDate>Fri, 23 Mar 2012 12:32:00 +0000</pubDate>
      
      <guid>/post/lnmp-usages/</guid>
      <description>
        
          
          
          
        
        
        
          安装LNMP 更新系统
#yum check-update #yum update  安装Screen
#yum install screen  开始安装Lnmp
#screen -S lnmp #wget -c http://soft.vpser.net/lnmp/lnmp0.8.tar.gz //最新版请查阅lnmp官网 #tar zxvf lnmp0.8.tar.gz #./lnmp0.8/centos.sh | tee lnmp.log //输出log文件，以备出错时查阅  接下来按照提示设定域名和MysQL密码，程序会自动下载相关程序，而后编译安装
安装PureFTP
#./lnmp0.8/pureftp.sh  按提示输入MySQL和Ftp管理员密码，安装完成后可以通过http://vpsip/ftp/来登录管理ftp帐号
使用Lnmp 添加虚拟主机
#/root/vhost.sh  按照提示填入域名、目录、rewrite规则文件，如下所示：
root@buyvm256:~#/root/vhost.sh ========================================================================= Add Virtual Host for LNMP V0.9 , Written by Licess ========================================================================= LNMP is a tool to auto-compile &amp;amp; install Nginx+MySQL+PHP on Linux This script is a tool to add virtual host for nginx For more information please visit http://www.
          
        
        </description>
    </item>
    
  </channel>
</rss>