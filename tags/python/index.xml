<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on UNIXETC</title>
    
    
    
    <link>/tags/python/</link>
    <description>Recent content in Python on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 May 2017 15:12:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>树莓派显示天气信息</title>
      <link>/post/weather-according-to-raspberry-pi/</link>
      <pubDate>Thu, 25 May 2017 15:12:00 +0000</pubDate>
      
      <guid>/post/weather-according-to-raspberry-pi/</guid>
      <description>
        
          
          
          
        
        
        
          在此介绍一个国外网友的树莓派项目RARP，Weather According to Raspberry Pi
顾名思义，Weather According to Raspberry Pi是一个有关天气信息的项目，该项目通过采集Raspberry Pi和Sense HAT的数据，来显示相关的天气信息，比如温度、湿度、压力等
项目地址http://coded2.herokuapp.com/weather/
代码国内下载地址http://cdn.lyq.wiki/res/warp_final.zip
下载后解压，得到main.py和gauge2.html两个文件，其中main.py需要Python3运行，gauge2.html是最终的显示文件
安装相关软件
sudo apt-get install python3 sudo apt-get install python3-pip pip3 install flask  打开Sense HAT仿真器，在程序菜单中，打开后如下图示:
下来，运行下载的python脚本
python3 main.py  正常情况下，会提示一个端口为5000的web服务正在运行
在浏览器中浏览localhost:5000或者127.0.0.1:5000，最终的浏览如下图
三个图表分别显示温度、压力和湿度，这三者的信息均来自Sense HAT 模拟器而不是真正的Sense HAT硬件。
如果需要采集Sense HAT扩展板的数据，需要将Sense HAT附加板和Raspberry Pi相连，具体信息参考官网 https://www.raspberrypi.org/products/sense-hat/
然后修改代码，打开main.py文件，找到如下行
from sense_emu import SenseHat  修改为
from sense_hat import SenseHat  保存后，重新运行python3 main.py，此时采集的数据就来自真实的SenseHAT硬件。
          
        
        </description>
    </item>
    
    <item>
      <title>python-pip安装实例</title>
      <link>/post/python-pip-installation/</link>
      <pubDate>Thu, 20 Apr 2017 14:28:00 +0000</pubDate>
      
      <guid>/post/python-pip-installation/</guid>
      <description>
        
          
          
          
        
        
        
          Python-pip 是一个现代的，通用的 Python包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。
以下为多个操作系统平台下Python-pip安装方法
通用方法 通过get-pip.py文件来安装，建议Windows用户使用，前提是你必须首先安装Python。
版本要求Python 2 &amp;gt;=2.7.9 或Python 3 &amp;gt;=3.4，可从官网下载http://www.python.org/
然后下载get-pip.py
下载地址 https://bootstrap.pypa.io/get-pip.py
通过python get-pip.py命令来进行安装。
Linux下通过软件管理工具来安装Python-pip Fedora21   Python2
sudo yum upgrade python-setuptools sudo yum install python-pip python-wheel   Python3
sudo yum install python3 python3-wheel   Fedora22   Python2
sudo dnf upgrade python-setuptools sudo dnf install python-pip python-wheel   Python3
sudo dnf install python3 python3-wheel   CentOS/RHEL 首先得启用EPEL repository,可参考此文
  EPEL 6/EPEL 7
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派动态IP更新器</title>
      <link>/post/raspberrypi-dynamic-ip-updater/</link>
      <pubDate>Wed, 19 Apr 2017 21:28:00 +0000</pubDate>
      
      <guid>/post/raspberrypi-dynamic-ip-updater/</guid>
      <description>
        
          
          
          
        
        
        
          这是一个python3的脚本，每隔10分钟监控一次IP地址，如果发生变化则会通过AutoRemote消息通知你。 关于AutoRemote的使用可参考这里
这里推荐使用ipgetter来获取外网IP，地址为https://github.com/phoemur/ipgetter
安装ipgetter
sudo apt-get install python3 pip sudo pip3 install ipgetter 你可以从以下地址获取每个通知设备的AutoRemote所需google key
​	http://autoremotejoaomgcd.appspot.com/?key=[it&amp;rsquo;s the part that is here]
以下为python3脚本:
import ipgetter import urllib.request import requests currentIP = ipgetter.myip() #AutoRemote function to send a notification YOUR_KEY goes here def sendAR(x): AR_key = &amp;#39;YOUR_KEY&amp;#39; AR_url = &amp;#39;http://autoremotejoaomgcd.appspot.com/sendmessage?key=&amp;#39;+ AR_key +&amp;#39;&amp;amp;message=IP%20&amp;#39; message = AR_url + x response = urllib.request.urlopen(message).read() print(x)	#check the internet and check if previous file is present try: requests.
          
        
        </description>
    </item>
    
    <item>
      <title>使用speedtest-cli测试带宽</title>
      <link>/post/use-speedtest-cli-tests-network-bandwidth/</link>
      <pubDate>Thu, 26 Mar 2015 13:26:00 +0000</pubDate>
      
      <guid>/post/use-speedtest-cli-tests-network-bandwidth/</guid>
      <description>
        
          
          
          
        
        
        
          安装speedtest-cli 安装speedtest-cli方法如下:
sudo apt-get install python-pip sudo pip install speedtest-cli  或
pip install git+https://github.com/sivel/speedtest-cli.git  或
git clone https://github.com/sivel/speedtest-cli.git python speedtest-cli/setup.py install  或
wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  或
curl -Lo speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  使用speedtest-cli root@MyUbuntuCloud:~# speedtest-cli -h usage: speedtest-cli [-h] [--bytes] [--share] [--simple] [--list] [--server SERVER] [--mini MINI] [--source SOURCE] [--timeout TIMEOUT] [--version] Command line interface for testing internet bandwidth using speedtest.
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派安装Python开发环境与GPIO库</title>
      <link>/post/raspberry-pi-install-python-development-environment-and-gpio-library/</link>
      <pubDate>Sun, 02 Mar 2014 12:31:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-install-python-development-environment-and-gpio-library/</guid>
      <description>
        
          
          
          
        
        
        
          安装python
$sudo apt-get install python-dev  更新
$sudo easy_install -U distribute  安装python-pip
$sudo apt-get install python-pip  添加国内pypi镜像
在~/.pip/pip.conf中添加
[global] index-url = http://mirrors.aliyun.com/pypi/simple/  安装python的GPIO库
$sudo pip install rpi.gpio 
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下部署goAgent</title>
      <link>/post/linux-deployment-goagent/</link>
      <pubDate>Thu, 30 May 2013 15:30:00 +0000</pubDate>
      
      <guid>/post/linux-deployment-goagent/</guid>
      <description>
        
          
          
          
        
        
        
          准备工作 下载Google Appengine SDK For Pyahont与goAgent
1.Google App Engine SDK for Python https://developers.google.com/appengine/downloads?hl=zh-CN#Google_App_Engine_SDK_for_Python 2.goagent https://code.google.com/p/goagent/  下载后解压，将goagent文件夹放到google_appengine目录下，目录结构如下:
~/google_appengine/goagent-goagent-d488f2  准备好Google Application_ID与两步验证密码,如何申请问Google
配置goagent 编辑~/google_appengine/goagent-goagent-d488f2/local/proxy.ini
填写正确的appid，在此建议将profile由默认的google_cn改为google_hk
参考以下步骤执行：
aquan@edge ~/google_appengine $ python appcfg.py update goagent-goagent-d4488f2/server/python/ 07:03 PM Host: appengine.google.com 07:03 PM Application: wrchiublog; version: 1 07:03 PM Starting update of app: wrchiublog, version: 1 07:03 PM Getting current resource limits. Email: wrchiu@126.com //在此填写googleid Password for wrchiu@126.com: //此处填写两步验证密码，而不是帐号密码 07:04 PM Scanning files on local disk.
          
        
        </description>
    </item>
    
  </channel>
</rss>