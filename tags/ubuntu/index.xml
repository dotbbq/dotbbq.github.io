<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on UNIXETC</title>
    <link>https://unixetc.com/tags/ubuntu/</link>
    <description>UNIXETC (Ubuntu)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 02 Mar 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://unixetc.com/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>斐讯N1系统信息和UNIXBENCH跑分</title>
      <link>https://unixetc.com/post/phicomm-n1-unixbench-score-and-system-information/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/phicomm-n1-unixbench-score-and-system-information/</guid>
      <description>&lt;h4 id=&#34;系统信息&#34;&gt;系统信息&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;alair@aml:~ $ inxi -F
System:    Host: aml Kernel: 5.5.0-rc6-aml-s9xxx aarch64 bits: 32 Console: tty 0 Distro: Ubuntu 18.04.4 LTS
Machine:   No /sys/class/dmi; using dmidecode: dmidecode is not installed.
CPU:       Quad core ARMv8 rev 4 (v8l) (-MCP-)  (ARM)
           clock speeds: max: 1512 MHz 1: 1512 MHz 2: 1512 MHz 3: 1512 MHz 4: 1512 MHz
Graphics:  Card: Failed to Detect Video Card!
           Display Server: N/A driver: N/A tty size: 254x72 Advanced Data: N/A out of X
Audio:     Card AMLGX driver: AMLGX Sound: ALSA v: k5.5.0-rc6-aml-s9xxx
Network:   Card: Failed to Detect Network Card!
Drives:    HDD Total Size: NA (-)
           ID-1: /dev/mmcblk1 model: N/A size: 7.8GB
Partition: ID-1: / size: 6.3G used: 4.8G (76%) fs: ext4 dev: /dev/mmcblk1p2
           ID-2: /boot size: 244M used: 77M (32%) fs: vfat dev: /dev/mmcblk1p1
           ID-3: /var/log size: 49M used: 2.5M (6%) fs: ext4 dev: /dev/zram0
           ID-4: swap-1 size: 0.91GB used: 0.00GB (0%) fs: swap dev: /dev/zram1
Sensors:   None detected - is lm-sensors installed and configured?
Info:      Processes: 155 Uptime: 2:39 Memory: 306.4/1741.2MB Init: systemd runlevel: 5
           Client: Shell (zsh) inxi: 2.3.56
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;unixbench分数&#34;&gt;Unixbench分数&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;alair@aml:~/unixbench-5.1.2 $ ./Run
make all
make[1]: Entering directory &#39;/home/alair/unixbench-5.1.2&#39;
Checking distribution of files
./pgms  exists
./src  exists
./testdir  exists
./tmp  exists
./results  exists
make[1]: Leaving directory &#39;/home/alair/unixbench-5.1.2&#39;
sh: 1: 3dinfo: not found

   #    #  #    #  #  #    #          #####   ######  #    #   ####   #    #
   #    #  ##   #  #   #  #           #    #  #       ##   #  #    #  #    #
   #    #  # #  #  #    ##            #####   #####   # #  #  #       ######
   #    #  #  # #  #    ##            #    #  #       #  # #  #       #    #
   #    #  #   ##  #   #  #           #    #  #       #   ##  #    #  #    #
    ####   #    #  #  #    #          #####   ######  #    #   ####   #    #

   Version 5.1.2                      Based on the Byte Magazine Unix Benchmark

   Multi-CPU version                  Version 5 revisions by Ian Smith,
                                      Sunnyvale, CA, USA
   December 22, 2007                  johantheghost at yahoo period com

Wide character in print at ./Run line 1510.
Wide character in printf at ./Run line 1541.
Use of uninitialized value in printf at ./Run line 1378.
Use of uninitialized value in printf at ./Run line 1379.
Use of uninitialized value in printf at ./Run line 1378.
Use of uninitialized value in printf at ./Run line 1379.
Use of uninitialized value in printf at ./Run line 1378.
Use of uninitialized value in printf at ./Run line 1379.
Use of uninitialized value in printf at ./Run line 1378.
Use of uninitialized value in printf at ./Run line 1379.
Use of uninitialized value in printf at ./Run line 1588.
Use of uninitialized value in printf at ./Run line 1589.
Use of uninitialized value in printf at ./Run line 1588.
Use of uninitialized value in printf at ./Run line 1589.
Use of uninitialized value in printf at ./Run line 1588.
Use of uninitialized value in printf at ./Run line 1589.
Use of uninitialized value in printf at ./Run line 1588.
Use of uninitialized value in printf at ./Run line 1589.

1 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10

1 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10

1 x Execl Throughput  1 2 3

1 x File Copy 1024 bufsize 2000 maxblocks  1 2 3

1 x File Copy 256 bufsize 500 maxblocks  1 2 3

1 x File Copy 4096 bufsize 8000 maxblocks  1 2 3

1 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10

1 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10

1 x Process Creation  1 2 3

1 x System Call Overhead  1 2 3 4 5 6 7 8 9 10

1 x Shell Scripts (1 concurrent)  1 2 3

1 x Shell Scripts (8 concurrent)  1 2 3
Wide character in printf at ./Run line 1483.

4 x Dhrystone 2 using register variables  1 2 3 4 5 6 7 8 9 10

4 x Double-Precision Whetstone  1 2 3 4 5 6 7 8 9 10

4 x Execl Throughput  1 2 3

4 x File Copy 1024 bufsize 2000 maxblocks  1 2 3

4 x File Copy 256 bufsize 500 maxblocks  1 2 3

4 x File Copy 4096 bufsize 8000 maxblocks  1 2 3

4 x Pipe Throughput  1 2 3 4 5 6 7 8 9 10

4 x Pipe-based Context Switching  1 2 3 4 5 6 7 8 9 10

4 x Process Creation  1 2 3

4 x System Call Overhead  1 2 3 4 5 6 7 8 9 10

4 x Shell Scripts (1 concurrent)  1 2 3

4 x Shell Scripts (8 concurrent)  1 2 3
Wide character in printf at ./Run line 1483.

========================================================================
   BYTE UNIX Benchmarks (Version 5.1.2)

   System: aml: GNU/Linux
   OS: GNU/Linux -- 5.5.0-rc6-aml-s9xxx -- #rc1.037 SMP PREEMPT Wed Feb 5 17:28:41 MSK 2020
   Machine: aarch64 (aarch64)
   Language: en_US.utf8 (charmap=&amp;quot;UTF-8&amp;quot;, collate=&amp;quot;UTF-8&amp;quot;)
   CPU 0: ARMv8 Processor rev 4 (v8l) (0.0 bogomips)

   CPU 1: ARMv8 Processor rev 4 (v8l) (0.0 bogomips)

   CPU 2: ARMv8 Processor rev 4 (v8l) (0.0 bogomips)

   CPU 3: ARMv8 Processor rev 4 (v8l) (0.0 bogomips)

   19:35:59 up  2:44,  1 user,  load average: 2.13, 2.07, 2.01; runlevel 5

------------------------------------------------------------------------
Benchmark Run: 一 3月 02 2020 19:35:59 - 20:03:58
4 CPUs in system; running 1 parallel copy of tests

Dhrystone 2 using register variables        6888588.0 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                     1373.9 MWIPS (9.8 s, 7 samples)
Execl Throughput                                877.5 lps   (30.0 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks        168765.4 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           49199.4 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        445012.9 KBps  (30.0 s, 2 samples)
Pipe Throughput                              327924.7 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                  69606.2 lps   (10.0 s, 7 samples)
Process Creation                               2416.8 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   2283.5 lpm   (60.0 s, 2 samples)
Shell Scripts (8 concurrent)                    656.5 lpm   (60.0 s, 2 samples)
System Call Overhead                         632162.6 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0    6888588.0    590.3
Double-Precision Whetstone                       55.0       1373.9    249.8
Execl Throughput                                 43.0        877.5    204.1
File Copy 1024 bufsize 2000 maxblocks          3960.0     168765.4    426.2
File Copy 256 bufsize 500 maxblocks            1655.0      49199.4    297.3
File Copy 4096 bufsize 8000 maxblocks          5800.0     445012.9    767.3
Pipe Throughput                               12440.0     327924.7    263.6
Pipe-based Context Switching                   4000.0      69606.2    174.0
Process Creation                                126.0       2416.8    191.8
Shell Scripts (1 concurrent)                     42.4       2283.5    538.6
Shell Scripts (8 concurrent)                      6.0        656.5   1094.1
System Call Overhead                          15000.0     632162.6    421.4
                                                                   ========
System Benchmarks Index Score                                         369.1

------------------------------------------------------------------------
Benchmark Run: 一 3月 02 2020 20:03:58 - 20:32:08
4 CPUs in system; running 4 parallel copies of tests

Dhrystone 2 using register variables       26826718.3 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                     5449.1 MWIPS (9.8 s, 7 samples)
Execl Throughput                               2965.8 lps   (30.0 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks        291243.4 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           80902.5 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        827300.0 KBps  (30.0 s, 2 samples)
Pipe Throughput                             1252522.5 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                 217969.4 lps   (10.0 s, 7 samples)
Process Creation                               6193.8 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   5216.1 lpm   (60.0 s, 2 samples)
Shell Scripts (8 concurrent)                    701.8 lpm   (60.1 s, 2 samples)
System Call Overhead                        2375324.0 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0   26826718.3   2298.8
Double-Precision Whetstone                       55.0       5449.1    990.7
Execl Throughput                                 43.0       2965.8    689.7
File Copy 1024 bufsize 2000 maxblocks          3960.0     291243.4    735.5
File Copy 256 bufsize 500 maxblocks            1655.0      80902.5    488.8
File Copy 4096 bufsize 8000 maxblocks          5800.0     827300.0   1426.4
Pipe Throughput                               12440.0    1252522.5   1006.9
Pipe-based Context Switching                   4000.0     217969.4    544.9
Process Creation                                126.0       6193.8    491.6
Shell Scripts (1 concurrent)                     42.4       5216.1   1230.2
Shell Scripts (8 concurrent)                      6.0        701.8   1169.6
System Call Overhead                          15000.0    2375324.0   1583.5
                                                                   ========
System Benchmarks Index Score                                         943.1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Gnome美化简介</title>
      <link>https://unixetc.com/post/gnome-landscaping-guide/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/gnome-landscaping-guide/</guid>
      <description>&lt;h3 id=&#34;安装必要软件&#34;&gt;安装必要软件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install gnome-tweak-tool chrome-gnome-shell
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装gnome-shell-extensions&#34;&gt;安装Gnome Shell Extensions&lt;/h3&gt;
&lt;p&gt;使用Firefox浏览&lt;a href=&#34;https://extensions.gnome.org/&#34;&gt;https://extensions.gnome.org/&lt;/a&gt;，第一次访问根据提示安装Firefox插件，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/12/08/5CTzZAgmjRhQnoP.png&#34; alt=&#34;Click here to install browser extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，访问&lt;a href=&#34;https://extensions.gnome.org/&#34;&gt;https://extensions.gnome.org/&lt;/a&gt;搜索安装以下三个GnomeShellExtension&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Themes  加载用户主题，加载目录为~/.local/share/themes&lt;/li&gt;
&lt;li&gt;Dash to Dock 定制 Dash/Dock&lt;/li&gt;
&lt;li&gt;Gnome Global Application Menu   Gnome全局菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装方法如下，进入到扩展详情后，点击标题后的开关，按照提示安装即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/12/08/SMOrIxFGWBuVlbK.png&#34; alt=&#34;install gnome shell extension&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装主题&#34;&gt;安装主题&lt;/h3&gt;
&lt;p&gt;访问&lt;a href=&#34;https://www.gnome-look.org/&#34;&gt;https://www.gnome-look.org/&lt;/a&gt;，在GTK3 Themes分类下下载主题，下载后解压拷贝至&lt;code&gt;~/.local/share/themes&lt;/code&gt;下，然后打开gnome-tweak，在外观中即可选择已安装的主题。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;~/.local/share/&lt;/code&gt;下新建&lt;strong&gt;themes&lt;/strong&gt;、&lt;strong&gt;icons&lt;/strong&gt;和&lt;strong&gt;fonts&lt;/strong&gt;三个目录，分别对应主题、图标、字体，这些资源都可以在&lt;a href=&#34;https://www.gnome-look.org/&#34;&gt;https://www.gnome-look.org/&lt;/a&gt;找得到。&lt;/p&gt;
&lt;p&gt;以下为本人的桌面截图，仅供参考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/12/08/2wlakxOTfGcshYu.png&#34; alt=&#34;桌面截图&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在Linux中安装Windows字体</title>
      <link>https://unixetc.com/post/linux-install-windows-fonts/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/linux-install-windows-fonts/</guid>
      <description>&lt;p&gt;使用的系统为&lt;strong&gt;Ubuntu 19.10&lt;/strong&gt;，Windows系统分区lable为&lt;strong&gt;sys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考如下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alair@e6440:~$ sudo mkdir /usr/share/fonts/winfonts
[sudo] alair 的密码： 
alair@e6440:~$ sudo cp /media/alair/sys/Windows/Fonts/* /usr/share/fonts/winfonts/  
alair@e6440:~$ sudo rm -rf /usr/share/fonts/winfonts/*.fon
alair@e6440:~$ sudo mkfontscale 
alair@e6440:~$ sudo mkfontdir 
alair@e6440:~$ sudo fc-cache 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打完收工！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一加3t和树莓派UNIXBench跑分对比</title>
      <link>https://unixetc.com/post/oneplus3t-and-raspberry-pi-unixbench-score-comparison/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/oneplus3t-and-raspberry-pi-unixbench-score-comparison/</guid>
      <description>&lt;h3 id=&#34;一加3t&#34;&gt;一加3T&lt;/h3&gt;
&lt;p&gt;一加3T运行的是&lt;a href=&#34;https://unixetc.com/post/oneplus-3t-install-ubuntutouch/&#34;&gt;UbuntuTouch&lt;/a&gt;系统&lt;/p&gt;
&lt;h4 id=&#34;一加3t系统信息&#34;&gt;一加3T系统信息&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;phablet@ubuntu-phablet:~$ inxi -F
Resuming in non X mode: xrandr not found. For package install advice run: inxi --recommends
System:    Host: android Kernel: 3.18.31-halium-gca027546546e-01041-g7961eb763e61 aarch64 (32 bit) Desktop: N/A
        Distro: Ubuntu 16.04 xenial
Machine:   No /sys/class/dmi; using dmidecode: dmidecode is not installed.
CPU:       Quad core AArch64 Processor rev 1 (aarch64) (-MCP-) (ARM)
        clock speeds: max: 2188 MHz 1: 1593 MHz 2: 1593 MHz 3: 1593 MHz 4: 1593 MHz
Graphics:  Card: Failed to Detect Video Card!
        Display Server: N/A driver: N/A Resolution: 165x47
Audio:     Card msm8996-tasha-mtp-snd-card driver: msm8996-tasha-m
        Sound: Advanced Linux Sound Architecture v: k3.18.31-halium-gca027546546e-01041-g7961eb763e61
Network:   Card-1: Qualcomm Atheros QCA6174 802.11ac Wireless Network Adapter driver: cnss_wlan_pci
        IF: rename8 state: down mac: c2:ee:fb:e8:e2:ea
        Card-2: Qualcomm Atheros QCA6174 802.11ac Wireless Network Adapter driver: cnss_wlan_pci
        IF: wlp1s0 state: up mac: c0:ee:fb:e8:e2:ea
Drives:    HDD Total Size: 64.0GB (8.3% used) ID-1: /dev/sda model: KLUCG4J1CB size: 57.9GB
        ID-2: /dev/sdb model: KLUCG4J1CB size: 0.0GB ID-3: /dev/sdc model: KLUCG4J1CB size: 0.0GB
        ID-4: /dev/sdd model: KLUCG4J1CB size: 0.1GB ID-5: /dev/sde model: KLUCG4J1CB size: 4.3GB
        ID-6: /dev/sdf model: KLUCG4J1CB size: 1.6GB
Partition: ID-1: / size: 2.9G used: 1.9G (67%) fs: ext4 dev: /dev/loop0
Sensors:   None detected - is lm-sensors installed and configured?
Info:      Processes: 551 Uptime: 1:02 Memory: 1668.1/5736.9MB Init: Upstart runlevel: 2
        Client: Shell (bash) inxi: 2.2.35
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;一加3t-unixbench跑分&#34;&gt;一加3T unixbench跑分&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;========================================================================
BYTE UNIX Benchmarks (Version 5.1.3)

System: ubuntu-phablet: GNU/Linux
OS: GNU/Linux -- 3.18.31-halium-gca027546546e-01041-g7961eb763e61 -- #1 SMP PREEMPT Wed Aug 21 20:33:17 CEST 2019
Machine: aarch64 (aarch64)
Language: en_US.utf8 (charmap=&amp;quot;UTF-8&amp;quot;, collate=&amp;quot;UTF-8&amp;quot;)
11:39:26 up 58 min,  2 users,  load average: 6.59, 7.93, 8.16; runlevel 2

------------------------------------------------------------------------
Benchmark Run: 六 9月 07 2019 11:39:26 - 12:07:49
0 CPUs in system; running 1 parallel copy of tests

Dhrystone 2 using register variables       13089762.3 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                     3000.5 MWIPS (9.8 s, 7 samples)
Execl Throughput                               1381.2 lps   (29.9 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks        254749.2 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           75714.9 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        813273.2 KBps  (30.0 s, 2 samples)
Pipe Throughput                              650583.5 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                  22716.1 lps   (10.0 s, 7 samples)
Process Creation                                835.5 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   2556.9 lpm   (60.0 s, 2 samples)
Shell Scripts (8 concurrent)                    938.3 lpm   (60.0 s, 2 samples)
System Call Overhead                         988399.2 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0   13089762.3   1121.7
Double-Precision Whetstone                       55.0       3000.5    545.5
Execl Throughput                                 43.0       1381.2    321.2
File Copy 1024 bufsize 2000 maxblocks          3960.0     254749.2    643.3
File Copy 256 bufsize 500 maxblocks            1655.0      75714.9    457.5
File Copy 4096 bufsize 8000 maxblocks          5800.0     813273.2   1402.2
Pipe Throughput                               12440.0     650583.5    523.0
Pipe-based Context Switching                   4000.0      22716.1     56.8
Process Creation                                126.0        835.5     66.3
Shell Scripts (1 concurrent)                     42.4       2556.9    603.1
Shell Scripts (8 concurrent)                      6.0        938.3   1563.9
System Call Overhead                          15000.0     988399.2    658.9
                                                                ========
System Benchmarks Index Score                                         463.9



======= Script description and score comparison completed! =======
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;树莓派&#34;&gt;树莓派&lt;/h3&gt;
&lt;p&gt;树莓派运行的是官方Raspbian Buster Lite版&lt;/p&gt;
&lt;h4 id=&#34;树莓派系统信息&#34;&gt;树莓派系统信息&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pi@raspberrypi:~ $ inxi -F
System:    Host: raspberrypi Kernel: 4.19.66-v7+ armv7l bits: 32 Desktop: N/A Distro: Raspbian GNU/Linux 10 (buster)
Machine:   Type: ARM Device System: Raspberry Pi 2 Model B Rev 1.1 details: BCM2835 rev: a21041 serial: 00000000d81b63a8
CPU:       Topology: Quad Core model: ARMv7 v7l variant: cortex-a7 bits: 32 type: MCP
        Speed: 1000 MHz min/max: 600/1000 MHz Core speeds (MHz): 1: 1000 2: 1000 3: 1000 4: 1000
Graphics:  Device-1: bcm2708-fb driver: bcm2708_fb v: kernel
        Device-2: bcm2835-hdmi driver: N/A
        Display: tty server: N/A driver: N/A tty: 165x47
        Message: No advanced graphics data found on this system.
Audio:     Device-1: bcm2835-audio driver: bcm2835_audio
        Device-2: bcm2835-hdmi driver: N/A
        Sound Server: ALSA v: k4.19.66-v7+
Network:   Device-1: Standard Microsystems SMSC9512/9514 Fast Ethernet Adapter type: USB driver: smsc95xx
        IF: eth0 state: up speed: 100 Mbps duplex: full mac: b8:27:eb:1b:63:a8
        Device-2: Realtek RTL8188EUS 802.11n Wireless Network Adapter type: USB driver: r8188eu
        IF: wlan0 state: down mac: 14:cf:92:1d:84:a0
        Device-3: Realtek RTL8188CUS 802.11n WLAN Adapter type: USB driver: rtl8192cu
        IF: wlan1 state: down mac: e8:4e:06:1c:3e:67
Drives:    Local Storage: total: 29.73 GiB used: 1.35 GiB (4.5%)
        ID-1: /dev/mmcblk0 vendor: TDK model: TF32G size: 29.73 GiB
Partition: ID-1: / size: 29.00 GiB used: 1.31 GiB (4.5%) fs: ext4 dev: /dev/mmcblk0p2
        ID-2: /boot size: 252.0 MiB used: 39.1 MiB (15.5%) fs: vfat dev: /dev/mmcblk0p1
Sensors:   Message: No sensors data was found. Is sensors configured?
Info:      Processes: 129 Uptime: 44m Memory: 1002.1 MiB used: 182.8 MiB (18.2%) gpu: 76.0 MiB Shell: bash inxi: 3.0.32
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;树莓派unixbench跑分&#34;&gt;树莓派unixbench跑分&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;========================================================================
BYTE UNIX Benchmarks (Version 5.1.3)

System: raspberrypi: GNU/Linux
OS: GNU/Linux -- 4.19.66-v7+ -- #1253 SMP Thu Aug 15 11:49:46 BST 2019
Machine: armv7l (unknown)
Language: en_US.utf8 (charmap=&amp;quot;ANSI_X3.4-1968&amp;quot;, collate=&amp;quot;ANSI_X3.4-1968&amp;quot;)
CPU 0: ARMv7 Processor rev 5 (v7l) (0.0 bogomips)

CPU 1: ARMv7 Processor rev 5 (v7l) (0.0 bogomips)

CPU 2: ARMv7 Processor rev 5 (v7l) (0.0 bogomips)

CPU 3: ARMv7 Processor rev 5 (v7l) (0.0 bogomips)

11:06:28 up 5 min,  1 user,  load average: 1.15, 0.40, 0.15; runlevel 5

------------------------------------------------------------------------
Benchmark Run: 六 9月 07 2019 11:06:28 - 11:34:53
4 CPUs in system; running 1 parallel copy of tests

Dhrystone 2 using register variables        3337362.1 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                      753.3 MWIPS (10.0 s, 7 samples)
Execl Throughput                                490.1 lps   (29.9 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks         73075.5 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           21292.0 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        194738.9 KBps  (30.0 s, 2 samples)
Pipe Throughput                              177539.0 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                  26085.6 lps   (10.0 s, 7 samples)
Process Creation                               1112.2 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   1167.8 lpm   (60.0 s, 2 samples)
Shell Scripts (8 concurrent)                    327.1 lpm   (60.2 s, 2 samples)
System Call Overhead                         451875.9 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0    3337362.1    286.0
Double-Precision Whetstone                       55.0        753.3    137.0
Execl Throughput                                 43.0        490.1    114.0
File Copy 1024 bufsize 2000 maxblocks          3960.0      73075.5    184.5
File Copy 256 bufsize 500 maxblocks            1655.0      21292.0    128.7
File Copy 4096 bufsize 8000 maxblocks          5800.0     194738.9    335.8
Pipe Throughput                               12440.0     177539.0    142.7
Pipe-based Context Switching                   4000.0      26085.6     65.2
Process Creation                                126.0       1112.2     88.3
Shell Scripts (1 concurrent)                     42.4       1167.8    275.4
Shell Scripts (8 concurrent)                      6.0        327.1    545.2
System Call Overhead                          15000.0     451875.9    301.3
                                                                ========
System Benchmarks Index Score                                         182.0

------------------------------------------------------------------------
Benchmark Run: 六 9月 07 2019 11:34:53 - 12:04:00
4 CPUs in system; running 4 parallel copies of tests

Dhrystone 2 using register variables       13191650.7 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                     2978.2 MWIPS (10.0 s, 7 samples)
Execl Throughput                               1235.3 lps   (29.9 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks         85443.5 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           33157.0 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        295618.5 KBps  (30.0 s, 2 samples)
Pipe Throughput                              697215.8 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                 106460.7 lps   (10.0 s, 7 samples)
Process Creation                               2599.0 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   2615.3 lpm   (60.1 s, 2 samples)
Shell Scripts (8 concurrent)                    352.7 lpm   (60.3 s, 2 samples)
System Call Overhead                        1724986.2 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0   13191650.7   1130.4
Double-Precision Whetstone                       55.0       2978.2    541.5
Execl Throughput                                 43.0       1235.3    287.3
File Copy 1024 bufsize 2000 maxblocks          3960.0      85443.5    215.8
File Copy 256 bufsize 500 maxblocks            1655.0      33157.0    200.3
File Copy 4096 bufsize 8000 maxblocks          5800.0     295618.5    509.7
Pipe Throughput                               12440.0     697215.8    560.5
Pipe-based Context Switching                   4000.0     106460.7    266.2
Process Creation                                126.0       2599.0    206.3
Shell Scripts (1 concurrent)                     42.4       2615.3    616.8
Shell Scripts (8 concurrent)                      6.0        352.7    587.9
System Call Overhead                          15000.0    1724986.2   1150.0
                                                                ========
System Benchmarks Index Score                                         437.9



======= Script description and score comparison completed! =======
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UbuntuTouch更换国内源</title>
      <link>https://unixetc.com/post/ubuntu-touch-change-mirror/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/ubuntu-touch-change-mirror/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://unixetc.com/post/oneplus-3t-install-ubuntutouch/&#34;&gt;一加3T上安装完UbuntuTouch&lt;/a&gt;后，参考&lt;a href=&#34;https://unixetc.com/post/shell-access-ubuntu-touch-via-ssh/&#34;&gt;此文开启SSH&lt;/a&gt;登录。&lt;/p&gt;
&lt;p&gt;接下来就是更换软件源了，国内推荐USTC和清华大学开源镜像。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;vi /etc/apt/sources.list&lt;/code&gt; 编辑软件源,然后在vi中通过以下命令进行替换操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:%s/ports.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存后即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>通过SSH访问UbuntuTouch</title>
      <link>https://unixetc.com/post/shell-access-ubuntu-touch-via-ssh/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/shell-access-ubuntu-touch-via-ssh/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://unixetc.com/post/oneplus-3t-install-ubuntutouch/&#34;&gt;一加3T上安装完UbuntuTouch&lt;/a&gt;后，可以通过以下方法开启SSH登录。&lt;/p&gt;
&lt;p&gt;打开终端(Terminal)，输入以下命令开启ssh服务。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo android-gadget-service enable ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就可以通过&lt;code&gt;ssh phablet@ip&lt;/code&gt;来登录设备。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unixetc.com/imgs/access_ubuntu_touch_via_ssh.png&#34; alt=&#34;&amp;ldquo;access ubuntutouch via ssh&amp;rdquo;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu/Widnows双系统时间不一致解决方法</title>
      <link>https://unixetc.com/post/ubuntu-windows-dual-system-time-is-inconsistent/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/ubuntu-windows-dual-system-time-is-inconsistent/</guid>
      <description>&lt;p&gt;安装Ubuntu和Windows双系统的情况下，Ubuntu的时间总会和Windows的时间相差8小时，原因在于widows认为BIOS时间是本地时间，Ubuntu认为BIOS时间是UTC时间，即协调世界时(Universal Time Coordinated)，是由国际无线电咨询委员会规定和推荐,并由国际时间局(BIH)负责保持的以秒为基础的时间标度。&lt;/p&gt;
&lt;p&gt;UTC相当于本初子午线(即经度0度)上的平均太阳时，过去曾用格林威治平均时(GMT)来表示。北京时间比UTC时间早8小时，以1999年1月1日0000UTC为例，UTC时间是零点，北京时间为1999年1月1日早上8点整。所以我们在时间上面相隔了8个小时。这个时候bios的时间和系统的时间当然是不一致，一个代表UTC时间，一个代表CST(＋8时区)，即上海的时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旧版Ubuntu（Ubuntu10左右）：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编辑&lt;code&gt;/etc/default/rcS&lt;/code&gt; 将&lt;code&gt;UTC=yes&lt;/code&gt;改成&lt;code&gt;UTC=no&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新版Ubuntu（Ubuntu16.04）：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新版Ubuntu使用systemd作为管理系统，时间由timedatectl来管理，以下为修改方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo timedatectl set-local-rtc 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启完成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>魅族PRO 5安装Ubuntu Touch系统</title>
      <link>https://unixetc.com/post/meizu-pro-5-installs-ubuntu-touch-system/</link>
      <pubDate>Sat, 20 Apr 2019 19:37:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/meizu-pro-5-installs-ubuntu-touch-system/</guid>
      <description>&lt;p&gt;首先，下载以下几个文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;魅族PRO 5国行出厂刷机包 &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367112641&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;魅族PRO 5国际版刷机包 &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367112495&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fastboot工具 &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367110371&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SuperSU &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367110383&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Busybox &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367110353&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RootBrowser &lt;a href=&#34;https://dotbbq.pipipan.com/fs/18418398-367110365&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;刷出厂版rom&#34;&gt;刷出厂版ROM&lt;/h3&gt;
&lt;p&gt;给魅族PRO 5刷出厂版ROM，请将出厂版ROM的文件名命名为“update.zip”，把它放在手机内置存储根目录，同时按住&lt;strong&gt;音量增加&lt;/strong&gt;和&lt;strong&gt;电源&lt;/strong&gt;，等待数秒，直至手机重启至Recovery模式。手机成功重启至Recovery模式后，手机屏幕将显示以下画面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27wse2qkdj20bu05175b.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击“开始”按钮刷机。&lt;/p&gt;
&lt;h3 id=&#34;打开root权限&#34;&gt;打开Root权限&lt;/h3&gt;
&lt;p&gt;刷机完成后，我们进入刚刚刷入的系统，登录你的Flyme帐户，然后，在“设置-指纹和安全”里开启系统的Root权限。Root权限开启成功后，手机将重启一次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/02e071fely1g27wu9l1ahj20fl0oc11t.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装supersu&#34;&gt;安装SuperSU&lt;/h3&gt;
&lt;p&gt;安装SuperSU并打开，选择“极客”模式并进入，SuperSU将提示你更新二进制文件，以“常规方式”安装即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/02e071fely1g27ww61kpej20eu0cfgop.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;
在安装二进制文件的过程中，SuperSU将申请Root权限，请同意申请。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/02e071fely1g27x1pwdnej20fp06njrs.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;更新过二进制文件后，请重启手机。&lt;/p&gt;
&lt;h3 id=&#34;安装busybox&#34;&gt;安装Busybox&lt;/h3&gt;
&lt;p&gt;安装Busybox并打开，点击屏幕右下角的“INSTALL”按钮。
在安装的过程中，Busybox将申请系统的Root权限，请同意申请（此时Root授权将由SuperSU接管）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/mw690/02e071fely1g27x3cdwbij20dk0dcdhu.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果Busybox的安装一切顺利，其安装日志如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/mw690/02e071fely1g27x69n58yj20fj09ajtv.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改系统标识&#34;&gt;修改系统标识&lt;/h3&gt;
&lt;p&gt;安装并打开RootBrowser，导航至以下目录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/dev/block/platform/15570000.ufs/by-name/
找到文件：proinfo，点击文件，选择“Open as…”，选择“Text file”，再选择“RB Text Editor”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27x8a1zbij20dh0fnjth.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;这期间，RootBrowser将申请系统的Root权限，请同意申请。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/02e071fely1g27x9bctyfj20dr0dkgnr.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;在“proinfo”里找到以下行：
machine_type=M576_mobile_public
将其改为：
machine_type=M576_intl_official
如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27xahydyrj20gf05y3ze.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;改过之后请保存更改，然后退出RootBrowser，重启手机。
手机重启过之后，请再次在RootBrowser里查看proinfo的状态。如果“machine_type=”后的文本为“M576_intl_official”，则说明我们的操作成功了。&lt;/p&gt;
&lt;h3 id=&#34;刷国际版rom&#34;&gt;刷国际版ROM&lt;/h3&gt;
&lt;p&gt;将国际版Flyme的刷机包命名为“update.zip”，将其放置在手机内置存储的根目录。
同时按住手机的音量增加键和电源键，等待数秒，直至手机重启到Recovery。
刷机的步骤和给魅族PRO 5刷出厂版系统一样，在Recovery里点“开始”按钮即可。
刷机完成后，国际版Flyme的桌面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx1.sinaimg.cn/mw690/02e071fely1g27xc9zwswj20er0hx44s.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;解锁bootloader&#34;&gt;解锁bootloader&lt;/h3&gt;
&lt;p&gt;同时按住手机的音量减小键和电源键，等待数秒，直至其重启到Fastboot模式。
将手机通过数据线连接到计算机（请保证Fastboot驱动已经正确安装），进入Fastboot工具文件夹，在文件资源管理器里按住Shift键的同时单击鼠标右键，选择“在此处打开Powershell窗口”，并在Powershell里执行以下命令：
./fastboot oem unlock
成功解锁后，手机屏幕的右下角将显示“unlocked”字样如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27xdkqc47j20g004wabs.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装ubuntu-touch&#34;&gt;安装Ubuntu Touch&lt;/h3&gt;
&lt;p&gt;进入&lt;a href=&#34;https://github.com/ubports/ubports-installer&#34;&gt;https://github.com/ubports/ubports-installer&lt;/a&gt;，下载适应版本的UBports Installer安装程序
打开ubports installer，点击“Select device manually”按钮，在机型列表里选择“Meizu PRO 5”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27xhwr8lwj20gg08fdgi.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;将处于Fastboot模式的手机连接到计算机，手机将被刷机工具识别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/mw690/02e071fely1g27xj6vvuaj20g507qq38.jpg&#34; alt=&#34;请输入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击“Change options按钮”，“Channel”处选择“15.04/stable”，“Wipe”项勾选。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unixetc.com/imgs/1206089250.webp&#34; alt=&#34;02e071fely1g27xk2v2u1j20g107sjru.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击“Close”按钮后，再点击“Install”按钮。
接着刷机工具将为你的手机刷入Ubuntu Recovery，Recovery刷入完成后，请根据刷机工具的提示同时按住音量增加键和电源键，直至手机重启至Recovery模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unixetc.com/imgs/2417442005.webp&#34; alt=&#34;02e071fely1g27xkxueiaj20g707taal.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;手机重启至Recovery模式后，刷机工具将为你的手机下载并刷入Ubuntu Touch，这个过程需要一点时间，请耐心等待，不要关闭刷机工具，也不要断开手机和计算机的连接。
手机刷入Ubuntu Touch完成后，刷机工具将提示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unixetc.com/imgs/3310896332.webp&#34; alt=&#34;02e071fely1g27xlyl7i0j20g107ogm9.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，魅族PRO 5刷入Ubuntu Touch即完成了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unixetc.com/imgs/2900843031.webp&#34; alt=&#34;3925646014.webp&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu配置Livepatch服务</title>
      <link>https://unixetc.com/post/canonical-livepatch-service/</link>
      <pubDate>Fri, 25 May 2018 05:25:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/canonical-livepatch-service/</guid>
      <description>&lt;p&gt;CLS(Canonical Livepatch Service)是Ubuntu母公司Canonical提供的一项服务，该服务可以为处于LTS的Ubuntu版本提供内核关键补丁修复，而不需要重新启动系统，特别适用于用作Server的系统。&lt;/p&gt;
&lt;p&gt;使用CLS的前提是必须注册一个Ubuntu帐号，地址为&lt;a href=&#34;https://login.ubuntu.com/+login&#34;&gt;https://login.ubuntu.com/+login&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册完成后，即可访问CLS主页&lt;a href=&#34;https://www.ubuntu.com/server/livepatch&#34;&gt;https://www.ubuntu.com/server/livepatch&lt;/a&gt;进行登录配置。&lt;/p&gt;
&lt;p&gt;登陆后选择用户类型，一般个人用户选择&lt;strong&gt;Ubuntu User&lt;/strong&gt;，然后点击&lt;strong&gt;Get your Livepatch token&lt;/strong&gt;获取密匙&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://cdn.lyq.wiki/imgs/get_cls_token.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照下一步提示进行操作，启用CLS服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://cdn.lyq.wiki/imgs/cls_token_setup.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行完成后即成功启用CLS服务。&lt;/p&gt;
&lt;p&gt;检查CLS服务配置状态可以使用以下命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alair@e6440:~$ sudo canonical-livepatch status --verbose
client-version: 8.0.2
machine-id: 08e0*****************750db
machine-token: 4753a054c*****************a2eb84c7
architecture: x86_64
cpu-model: Intel(R) Core(TM) i5-4310M CPU @ 2.70GHz
last-check: 2018-05-25T19:55:15.537634075+08:00
boot-time: 2018-05-25T19:47:51+08:00
uptime: 14m43s
status:
- kernel: 4.15.0-22.24-generic
  running: true
  livepatch:
    checkState: checked
    patchState: nothing-to-apply
    version: &amp;quot;&amp;quot;
    fixes: &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Linux开启TCP BBR算法</title>
      <link>https://unixetc.com/post/linux_enable_tcp_bbr/</link>
      <pubDate>Mon, 17 Apr 2017 14:28:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/linux_enable_tcp_bbr/</guid>
      <description>&lt;p&gt;Linux Kernel 4.9+已经支持tcp_bbr拥塞控制算法，因此建议将内核升级为最新版。&lt;/p&gt;
&lt;h3 id=&#34;将内核升级到最新版&#34;&gt;将内核升级到最新版&lt;/h3&gt;
&lt;h4 id=&#34;debianubuntu升级最新内核&#34;&gt;Debian/Ubuntu升级最新内核&lt;/h4&gt;
&lt;p&gt;最新内核下载地址 &lt;a href=&#34;http://kernel.ubuntu.com/~kernel-ppa/mainline&#34;&gt;http://kernel.ubuntu.com/~kernel-ppa/mainline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载安装新内核&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.10/linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
dpkg -i linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;更新GRUB并且重启&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;update-grub
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;centos-7-升级最新内核&#34;&gt;Centos 7 升级最新内核&lt;/h4&gt;
&lt;p&gt;内核下载地址 &lt;a href=&#34;http://elrepo.org/linux/kernel/el7/x86_64/RPMS/&#34;&gt;http://elrepo.org/linux/kernel/el7/x86_64/RPMS/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装最新内核&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
yum --enablerepo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;elrepo-kernel install kernel-ml -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;检查内核是否安装完成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rpm -qa | grep kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新GRUB并重启主机&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;egrep ^menuentry /etc/grub2.cfg | cut -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -d &lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;
grub2-set-default &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#default 0表示第一个内核设置为默认运行, 选择最新内核就对了&lt;/span&gt;
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://elrepo.org/linux/kernel/&#34;&gt;http://elrepo.org/linux/kernel/&lt;/a&gt;下&lt;code&gt;e15&lt;/code&gt;、&lt;code&gt;e16&lt;/code&gt;分别对应Centos5、Centos6，可参考以上安装&lt;/p&gt;
&lt;h3 id=&#34;开启bbr&#34;&gt;开启BBR&lt;/h3&gt;
&lt;p&gt;重启后&lt;code&gt;uname -r&lt;/code&gt; 检查内核版本是不是4.9+&lt;/p&gt;
&lt;p&gt;然后执行以下操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.core.default_qdisc=fq&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
sysctl net.ipv4.tcp_available_congestion_control
sysctl net.ipv4.tcp_congestion_control
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果中有&lt;strong&gt;bbr&lt;/strong&gt;则成功了&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;lsmod | grep bbr&lt;/code&gt;可以检查是否开启&lt;strong&gt;bbr&lt;/strong&gt;模块&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu修改grub引导菜单</title>
      <link>https://unixetc.com/post/ubuntu-modify-the-grub-boot-menu/</link>
      <pubDate>Mon, 27 Jun 2016 17:42:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/ubuntu-modify-the-grub-boot-menu/</guid>
      <description>&lt;p&gt;先运行&lt;code&gt;update-grub&lt;/code&gt;命令生成一次grub配置，顺便查看一下识别出来的引导菜单内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@alairpc:~# update-grub
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-4.4.0-21-generic
Found initrd image: /boot/initrd.img-4.4.0-21-generic
Found memtest86+ image: /boot/memtest86+.elf
Found memtest86+ image: /boot/memtest86+.bin
Found Windows 7 (loader) on /dev/sda1
done
root@alairpc:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意看，以上共有5个菜单项，最后一个是windows7&lt;/p&gt;
&lt;p&gt;接下来我们来看看gurb配置文件&lt;code&gt;/etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@alairpc:~# cat /etc/default/grub 
# If you change this file, run &#39;update-grub&#39; afterwards to update
# /boot/grub/grub.cfg.
# For full documentation of the options in this file, see:
#   info -f grub -n &#39;Simple configuration&#39;

GRUB_DEFAULT=4
#GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=3
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;locale=zh_CN&amp;quot;

# Uncomment to enable BadRAM filtering, modify to suit your needs
# This works with Linux (no patch required) and with any kernel that obtains
# the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)
#GRUB_BADRAM=&amp;quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&amp;quot;

# Uncomment to disable graphical terminal (grub-pc only)
#GRUB_TERMINAL=console

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command `vbeinfo&#39;
#GRUB_GFXMODE=640x480

# Uncomment if you don&#39;t want GRUB to pass &amp;quot;root=UUID=xxx&amp;quot; parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
#GRUB_DISABLE_RECOVERY=&amp;quot;true&amp;quot;

# Uncomment to get a beep at grub start
#GRUB_INIT_TUNE=&amp;quot;480 440 1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;strong&gt;GRUB_DEFAULT&lt;/strong&gt;就是默认引导项，这里设置为4,对应的为windows7,说明一下，这个引导序列号是从0开始排的，所以第五项window7的序列号应为为4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GRUB_TIMEOUT&lt;/strong&gt;表示菜单等待时间，单位为秒(s)&lt;/p&gt;
&lt;p&gt;还值得说明的是&lt;strong&gt;GRUB_GFXMODE&lt;/strong&gt;，设置grub显示的分辨率&lt;/p&gt;
&lt;p&gt;自定义编辑完grub配置文件后，运行&lt;code&gt;update-grub&lt;/code&gt;使配置生效即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubunt下安装H2O</title>
      <link>https://unixetc.com/post/install-h2o-on-ubuntu/</link>
      <pubDate>Sat, 26 Mar 2016 13:26:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-h2o-on-ubuntu/</guid>
      <description>&lt;h3 id=&#34;更新系统&#34;&gt;更新系统&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get dist-upgrade -y &amp;amp;&amp;amp; apt-get autoremove --purge -y &amp;amp;&amp;amp; apt-get autoclean -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装必备软件&#34;&gt;安装必备软件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;apt-get install locate git cmake build-essential checkinstall autoconf pkg-config libtool python-sphinx wget libcunit1-dev nettle-dev libyaml-dev libuv-dev -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装wslay&#34;&gt;安装wslay&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/tatsuhiro-t/wslay.git
cd wslay/
autoreconf -i
automake
autoconf
./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后检查lib文件，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /usr/local/lib/
libuv.a   libuv.so.1      libwslay.la    libwslay.so.0.0.1  python3.4
libuv.la  libuv.so.1.0.0  libwslay.so    pkgconfig
libuv.so  libwslay.a      libwslay.so.0  python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装最新版openssl&#34;&gt;安装最新版OpenSSL&lt;/h3&gt;
&lt;p&gt;删除旧版OpenSSL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get remove --purge openssl libssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载新版OpenSSL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://www.openssl.org/source/openssl-1.0.2.tar.gz --no-check-certificate
tar -xvzf openssl-1.0.2.tar.gz
mv openssl-1.0.2 openssl
cd openssl/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建立&lt;code&gt;openssl.ld&lt;/code&gt;文件，内容如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi openssl.ld

OPENSSL_1.0.0 {
    global:
        *;

    local:
        *;
};

OPENSSL_1.0.1 {
} OPENSSL_1.0.0;

OPENSSL_1.0.1d {
} OPENSSL_1.0.1;

OPENSSL_1.0.2 {
} OPENSSL_1.0.1d;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下开始安装OpenSSL&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./config -fPIC shared -Wl,--version-script=/root/openssl/openssl.ld -Wl,-Bsymbolic-functions
make
make test
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查安装结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/ssl/bin/openssl version
OpenSSL 1.0.2 22 Jan 2015
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export OPENSSL_INCLUDE_DIR=/usr/local/ssl/include/
export OPENSSL_LIBRARIES=&#39;/usr/local/ssl/lib/libssl.so;/usr/local/ssl/lib/libcrypto.so&#39;
export LD_LIBRARY_PATH=/usr/local/ssl/lib/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装h2o&#34;&gt;安装H2O&lt;/h3&gt;
&lt;p&gt;新建&lt;code&gt;FindOpenSSL.cmake&lt;/code&gt;文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd h2o/
vi cmake/FindOpenSSL.cmake
FIND_PATH(OPENSSL_INCLUDE_DIR NAMES openssl/ssl.h)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(OPENSSL DEFAULT_MSG OPENSSL_LIBRARIES
OPENSSL_INCLUDE_DIR)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编译安装H2O&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr/local/h2o -DOPENSSL_LIBRARIES=&#39;/usr/local/ssl/lib/libssl.so;/usr/local/ssl/lib/libcrypto.so&#39; -DOPENSSL_INCLUDE_DIR=/usr/local/ssl/include/
make
make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;运行h2o&#34;&gt;运行H2O&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/h2o/bin/h2o -c examples/h2o/h2o.conf&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux下使用grive管理Google Drive</title>
      <link>https://unixetc.com/post/linux-use-grive-management-google-drive/</link>
      <pubDate>Wed, 26 Aug 2015 18:23:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/linux-use-grive-management-google-drive/</guid>
      <description>&lt;p&gt;找到一个linux下可用的google drive客户端，纯cli操作，值得推荐&lt;/p&gt;
&lt;p&gt;grive项目主页 &lt;a href=&#34;https://github.com/Grive/grive&#34;&gt;https://github.com/Grive/grive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu中下通过PPA安装grive&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:nilarimogard/webupd8 
sudo apt-get update
sudo apt-get install grive
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用grive同步Google Drive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir googledrive
cd googledrive
grive -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一次运行，会有验证提示，将提示的url代码粘贴到浏览器中验证帐户，完了后将生成的验证代码粘贴到grive进行验证。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无法使用add-apt-repository命令</title>
      <link>https://unixetc.com/post/can-not-use-add-apt-repository/</link>
      <pubDate>Sun, 23 Aug 2015 08:23:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/can-not-use-add-apt-repository/</guid>
      <description>&lt;p&gt;在Ubuntu中使用&lt;strong&gt;PPA&lt;/strong&gt;安装软件时，需要用到&lt;code&gt;add-apt-repository&lt;/code&gt;命令，但有的&lt;strong&gt;VPS&lt;/strong&gt;系统因为体量原因，可能没有该命令，因此需要通过以下方法来安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install python-software-properties 
apt-get install software-properties-common&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu下安装Ghost博客系统</title>
      <link>https://unixetc.com/post/ubuntu-install-ghost-blog-system/</link>
      <pubDate>Sat, 06 Jun 2015 16:26:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/ubuntu-install-ghost-blog-system/</guid>
      <description>&lt;h3 id=&#34;安装nodejs&#34;&gt;安装Nodejs&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查是否安装成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@hkvps:~# node -v
v0.10.37
root@hkvps:~# npm -v
1.4.28
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装ghost&#34;&gt;安装Ghost&lt;/h3&gt;
&lt;p&gt;Ghost下载地址&lt;a href=&#34;https://ghost.org/download/&#34;&gt;https://ghost.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://ghost.org/zip/ghost-0.6.4.zip
unzip ghost-0.6.4.zip -d ghost
cd ghost
npm install --production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行Ghost&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以通过127.0.0.1:2368来访问&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;nmp start&lt;/code&gt;来运行Ghost，退出后就会停止，因此需要一个方法让Ghost一直运行&lt;/p&gt;
&lt;h3 id=&#34;让ghost一直运行&#34;&gt;让Ghost一直运行&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装forever&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install forever -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入ghost目录，执行以下命令，让Ghost一直运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NODE_ENV=production forever start index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;停止ghost&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forever stop index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;查看forever运行列表&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forever list
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;结合nginx配置域名&#34;&gt;结合Nginx配置域名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装Nginx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/nginx/sites-available/ghost.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写入如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name aquan.me;

    location / {
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        proxy_pass         http://127.0.0.1:2368;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启Nginx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ln -s /etc/nginx/sites-available/ghost.conf /etc/nginx/sites-enabled/ghost.conf
sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.ghostchina.com/zh/&#34;&gt;http://docs.ghostchina.com/zh/&lt;/a&gt;
&lt;a href=&#34;http://972169909-qq-com.iteye.com/blog/1739928&#34;&gt;http://972169909-qq-com.iteye.com/blog/1739928&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux下安装最新版golang</title>
      <link>https://unixetc.com/post/install-the-last-version-golang-for-linux/</link>
      <pubDate>Mon, 11 May 2015 15:11:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-the-last-version-golang-for-linux/</guid>
      <description>&lt;p&gt;ubuntu中可以使用&lt;code&gt;apt-get install golang&lt;/code&gt;来安装go，但是版本稍旧&lt;/p&gt;
&lt;p&gt;如果需要安装最新版的golang，那就得自己动手咧&lt;/p&gt;
&lt;h3 id=&#34;安装golang&#34;&gt;安装golang&lt;/h3&gt;
&lt;p&gt;从官网下载最新版，手动安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install build-essential
wget https://storage.googleapis.com/golang/go1.4.2.linux-386.tar.gz
tar zxf go1.4.2.linux-386.tar.gz
cd go/src
./all.bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置path&#34;&gt;设置PATH&lt;/h3&gt;
&lt;p&gt;安装完成后需要设置PATH才能随地使用&lt;code&gt;go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=&amp;quot;/root/go/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;检查版本&#34;&gt;检查版本&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;go version
go version go1.4.2 linux/386&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu下安装VPN</title>
      <link>https://unixetc.com/post/install-vpn-on-ubuntu/</link>
      <pubDate>Sun, 23 Feb 2014 12:23:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-vpn-on-ubuntu/</guid>
      <description>&lt;p&gt;&lt;strong&gt;安装pptpd&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#apt-get install pptpd 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;IP设置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi /etc/pptpd.conf 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加以下内容:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;localip 192.18.0.1
remoteip 192.168.0.200-230
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;设置DNS&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi/etc/ppp/pptpd-options
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ms-dns 192.168.1.1
ms-dns 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;添加用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi /etc/ppp/chap-secrets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加以下内容:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name * passwd *
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;重启vpn&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#/etc/init.d/pptpd restart 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;允许ip4访问外网&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi /etc/sysctl.conf

net.ipv4.ip_forward=1 //取消本行前注释符(*)

#sysctl -p&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Server中安装VNC Server</title>
      <link>https://unixetc.com/post/install-vnc-server-on-ubuntu-server/</link>
      <pubDate>Sat, 11 May 2013 15:11:00 +0000</pubDate>
      
      <guid>https://unixetc.com/post/install-vnc-server-on-ubuntu-server/</guid>
      <description>&lt;p&gt;安装所有软件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#aptitude install openbox firefox ttf-wqy-microhei
#aptitude install vnc4server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置openbox启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#update-alternatives --config x-session-manager
然后选择openbox-session
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置vncserver密码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vncpasswd
Password: ******
Verify:*****
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行vncserver&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vncserver  //运行
# vncserver -kill :1  //终止
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑~/.vnc/xstartup文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vi ~/.vnc/xstartup
#!/bin/sh

# Uncomment the following two lines for normal desktop:
# unset SESSION_MANAGER
# exec /etc/X11/xinit/xinitrc

[ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources
xsetroot -solid grey
vncconfig -iconic &amp;amp;
x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;quot;$VNCDESKTOP Desktop&amp;quot; &amp;amp;
x-window-manager &amp;amp;
startx&amp;amp; //添加此行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;链接VNC&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#vncserver :8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;链接时需要输入 ip:8&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>