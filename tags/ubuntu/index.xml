<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on UNIXETC</title>
    
    
    
    <link>/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 02 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>斐讯N1系统信息和UNIXBENCH跑分</title>
      <link>/post/phicomm-n1-unixbench-score-and-system-information/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/phicomm-n1-unixbench-score-and-system-information/</guid>
      <description>
        
          
          
          
        
        
        
          系统信息 alair@aml:~ $ inxi -F System: Host: aml Kernel: 5.5.0-rc6-aml-s9xxx aarch64 bits: 32 Console: tty 0 Distro: Ubuntu 18.04.4 LTS Machine: No /sys/class/dmi; using dmidecode: dmidecode is not installed. CPU: Quad core ARMv8 rev 4 (v8l) (-MCP-) (ARM) clock speeds: max: 1512 MHz 1: 1512 MHz 2: 1512 MHz 3: 1512 MHz 4: 1512 MHz Graphics: Card: Failed to Detect Video Card! Display Server: N/A driver: N/A tty size: 254x72 Advanced Data: N/A out of X Audio: Card AMLGX driver: AMLGX Sound: ALSA v: k5.
          
        
        </description>
    </item>
    
    <item>
      <title>Gnome美化简介</title>
      <link>/post/gnome-landscaping-guide/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/gnome-landscaping-guide/</guid>
      <description>
        
          
          
          
        
        
        
          安装必要软件 sudo apt install gnome-tweak-tool chrome-gnome-shell 安装Gnome Shell Extensions 使用Firefox浏览https://extensions.gnome.org/，第一次访问根据提示安装Firefox插件，如下图:
安装完成后，访问https://extensions.gnome.org/搜索安装以下三个GnomeShellExtension
 User Themes 加载用户主题，加载目录为~/.local/share/themes Dash to Dock 定制 Dash/Dock Gnome Global Application Menu Gnome全局菜单  安装方法如下，进入到扩展详情后，点击标题后的开关，按照提示安装即可
安装主题 访问https://www.gnome-look.org/，在GTK3 Themes分类下下载主题，下载后解压拷贝至~/.local/share/themes下，然后打开gnome-tweak，在外观中即可选择已安装的主题。
在~/.local/share/下新建themes、icons和fonts三个目录，分别对应主题、图标、字体，这些资源都可以在https://www.gnome-look.org/找得到。
以下为本人的桌面截图，仅供参考：
          
        
        </description>
    </item>
    
    <item>
      <title>在Linux中安装Windows字体</title>
      <link>/post/linux-install-windows-fonts/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/linux-install-windows-fonts/</guid>
      <description>
        
          
          
          
        
        
        
          使用的系统为Ubuntu 19.10，Windows系统分区lable为sys
参考如下操作：
alair@e6440:~$ sudo mkdir /usr/share/fonts/winfonts [sudo] alair 的密码： alair@e6440:~$ sudo cp /media/alair/sys/Windows/Fonts/* /usr/share/fonts/winfonts/ alair@e6440:~$ sudo rm -rf /usr/share/fonts/winfonts/*.fon alair@e6440:~$ sudo mkfontscale alair@e6440:~$ sudo mkfontdir alair@e6440:~$ sudo fc-cache 打完收工！
          
        
        </description>
    </item>
    
    <item>
      <title>一加3t和树莓派UNIXBench跑分对比</title>
      <link>/post/oneplus3t-and-raspberry-pi-unixbench-score-comparison/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/oneplus3t-and-raspberry-pi-unixbench-score-comparison/</guid>
      <description>
        
          
          
          
        
        
        
          一加3T 一加3T运行的是UbuntuTouch系统
一加3T系统信息 phablet@ubuntu-phablet:~$ inxi -F Resuming in non X mode: xrandr not found. For package install advice run: inxi --recommends System: Host: android Kernel: 3.18.31-halium-gca027546546e-01041-g7961eb763e61 aarch64 (32 bit) Desktop: N/A Distro: Ubuntu 16.04 xenial Machine: No /sys/class/dmi; using dmidecode: dmidecode is not installed. CPU: Quad core AArch64 Processor rev 1 (aarch64) (-MCP-) (ARM) clock speeds: max: 2188 MHz 1: 1593 MHz 2: 1593 MHz 3: 1593 MHz 4: 1593 MHz Graphics: Card: Failed to Detect Video Card!
          
        
        </description>
    </item>
    
    <item>
      <title>UbuntuTouch更换国内源</title>
      <link>/post/ubuntu-touch-change-mirror/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/ubuntu-touch-change-mirror/</guid>
      <description>
        
          
          
          
        
        
        
          在一加3T上安装完UbuntuTouch后，参考此文开启SSH登录。
接下来就是更换软件源了，国内推荐USTC和清华大学开源镜像。
通过vi /etc/apt/sources.list 编辑软件源,然后在vi中通过以下命令进行替换操作：
:%s/ports.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g  保存后即可。
          
        
        </description>
    </item>
    
    <item>
      <title>通过SSH访问UbuntuTouch</title>
      <link>/post/shell-access-ubuntu-touch-via-ssh/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/shell-access-ubuntu-touch-via-ssh/</guid>
      <description>
        
          
          
          
        
        
        
          本文介绍了如何通过ssh来访问ubuntutouch设备。
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu/Widnows双系统时间不一致解决方法</title>
      <link>/post/ubuntu-windows-dual-system-time-is-inconsistent/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/ubuntu-windows-dual-system-time-is-inconsistent/</guid>
      <description>
        
          
          
          
        
        
        
          安装Ubuntu和Windows双系统的情况下，Ubuntu的时间总会和Windows的时间相差8小时，原因在于widows认为BIOS时间是本地时间，Ubuntu认为BIOS时间是UTC时间，即协调世界时(Universal Time Coordinated)，是由国际无线电咨询委员会规定和推荐,并由国际时间局(BIH)负责保持的以秒为基础的时间标度。
UTC相当于本初子午线(即经度0度)上的平均太阳时，过去曾用格林威治平均时(GMT)来表示。北京时间比UTC时间早8小时，以1999年1月1日0000UTC为例，UTC时间是零点，北京时间为1999年1月1日早上8点整。所以我们在时间上面相隔了8个小时。这个时候bios的时间和系统的时间当然是不一致，一个代表UTC时间，一个代表CST(＋8时区)，即上海的时间。
 旧版Ubuntu（Ubuntu10左右）：  编辑/etc/default/rcS 将UTC=yes改成UTC=no
 新版Ubuntu（Ubuntu16.04）：  新版Ubuntu使用systemd作为管理系统，时间由timedatectl来管理，以下为修改方法：
$sudo timedatectl set-local-rtc 1  重启完成。
          
        
        </description>
    </item>
    
    <item>
      <title>魅族PRO 5安装Ubuntu Touch系统</title>
      <link>/post/meizu-pro-5-installs-ubuntu-touch-system/</link>
      <pubDate>Sat, 20 Apr 2019 19:37:00 +0000</pubDate>
      
      <guid>/post/meizu-pro-5-installs-ubuntu-touch-system/</guid>
      <description>
        
          
          
          
        
        
        
          首先，下载以下几个文件:
 魅族PRO 5国行出厂刷机包 Download 魅族PRO 5国际版刷机包 Download Fastboot工具 Download SuperSU Download Busybox Download RootBrowser Download  刷出厂版ROM 给魅族PRO 5刷出厂版ROM，请将出厂版ROM的文件名命名为“update.zip”，把它放在手机内置存储根目录，同时按住音量增加和电源，等待数秒，直至手机重启至Recovery模式。手机成功重启至Recovery模式后，手机屏幕将显示以下画面：
点击“开始”按钮刷机。
打开Root权限 刷机完成后，我们进入刚刚刷入的系统，登录你的Flyme帐户，然后，在“设置-指纹和安全”里开启系统的Root权限。Root权限开启成功后，手机将重启一次。
安装SuperSU 安装SuperSU并打开，选择“极客”模式并进入，SuperSU将提示你更新二进制文件，以“常规方式”安装即可。
在安装二进制文件的过程中，SuperSU将申请Root权限，请同意申请。
更新过二进制文件后，请重启手机。
安装Busybox 安装Busybox并打开，点击屏幕右下角的“INSTALL”按钮。 在安装的过程中，Busybox将申请系统的Root权限，请同意申请（此时Root授权将由SuperSU接管）。
如果Busybox的安装一切顺利，其安装日志如下：
修改系统标识 安装并打开RootBrowser，导航至以下目录：
 /dev/block/platform/15570000.ufs/by-name/ 找到文件：proinfo，点击文件，选择“Open as…”，选择“Text file”，再选择“RB Text Editor”。
 这期间，RootBrowser将申请系统的Root权限，请同意申请。
在“proinfo”里找到以下行： machine_type=M576_mobile_public 将其改为： machine_type=M576_intl_official 如下：
改过之后请保存更改，然后退出RootBrowser，重启手机。 手机重启过之后，请再次在RootBrowser里查看proinfo的状态。如果“machine_type=”后的文本为“M576_intl_official”，则说明我们的操作成功了。
刷国际版ROM 将国际版Flyme的刷机包命名为“update.zip”，将其放置在手机内置存储的根目录。 同时按住手机的音量增加键和电源键，等待数秒，直至手机重启到Recovery。 刷机的步骤和给魅族PRO 5刷出厂版系统一样，在Recovery里点“开始”按钮即可。 刷机完成后，国际版Flyme的桌面如下：
解锁bootloader 同时按住手机的音量减小键和电源键，等待数秒，直至其重启到Fastboot模式。 将手机通过数据线连接到计算机（请保证Fastboot驱动已经正确安装），进入Fastboot工具文件夹，在文件资源管理器里按住Shift键的同时单击鼠标右键，选择“在此处打开Powershell窗口”，并在Powershell里执行以下命令： ./fastboot oem unlock 成功解锁后，手机屏幕的右下角将显示“unlocked”字样如下：
安装Ubuntu Touch 进入https://github.com/ubports/ubports-installer，下载适应版本的UBports Installer安装程序 打开ubports installer，点击“Select device manually”按钮，在机型列表里选择“Meizu PRO 5”。
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu配置Livepatch服务</title>
      <link>/post/canonical-livepatch-service/</link>
      <pubDate>Fri, 25 May 2018 05:25:00 +0000</pubDate>
      
      <guid>/post/canonical-livepatch-service/</guid>
      <description>
        
          
          
          
        
        
        
          CLS(Canonical Livepatch Service)是Ubuntu母公司Canonical提供的一项服务，该服务可以为处于LTS的Ubuntu版本提供内核关键补丁修复，而不需要重新启动系统，特别适用于用作Server的系统。
使用CLS的前提是必须注册一个Ubuntu帐号，地址为https://login.ubuntu.com/+login
注册完成后，即可访问CLS主页https://www.ubuntu.com/server/livepatch进行登录配置。
登陆后选择用户类型，一般个人用户选择Ubuntu User，然后点击Get your Livepatch token获取密匙
按照下一步提示进行操作，启用CLS服务。
运行完成后即成功启用CLS服务。
检查CLS服务配置状态可以使用以下命令:
alair@e6440:~$ sudo canonical-livepatch status --verbose client-version: 8.0.2 machine-id: 08e0*****************750db machine-token: 4753a054c*****************a2eb84c7 architecture: x86_64 cpu-model: Intel(R) Core(TM) i5-4310M CPU @ 2.70GHz last-check: 2018-05-25T19:55:15.537634075+08:00 boot-time: 2018-05-25T19:47:51+08:00 uptime: 14m43s status: - kernel: 4.15.0-22.24-generic running: true livepatch: checkState: checked patchState: nothing-to-apply version: &amp;quot;&amp;quot; fixes: &amp;quot;&amp;quot; 
          
        
        </description>
    </item>
    
    <item>
      <title>Linux开启TCP BBR算法</title>
      <link>/post/linux_enable_tcp_bbr/</link>
      <pubDate>Mon, 17 Apr 2017 14:28:00 +0000</pubDate>
      
      <guid>/post/linux_enable_tcp_bbr/</guid>
      <description>
        
          
          
          
        
        
        
          Linux Kernel 4.9+已经支持tcp_bbr拥塞控制算法，因此建议将内核升级为最新版。
将内核升级到最新版 Debian/Ubuntu升级最新内核 最新内核下载地址 http://kernel.ubuntu.com/~kernel-ppa/mainline
下载安装新内核
wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.10/linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb` dpkg -i linux-image-4.10.10-041010-generic_4.10.10-041010.201704120813_amd64.deb 更新GRUB并且重启
update-grub reboot Centos 7 升级最新内核 内核下载地址 http://elrepo.org/linux/kernel/el7/x86_64/RPMS/
安装最新内核
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm yum --enablerepo=elrepo-kernel install kernel-ml -y 检查内核是否安装完成
rpm -qa | grep kernel
更新GRUB并重启主机
egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \&amp;#39; grub2-set-default 0 #default 0表示第一个内核设置为默认运行, 选择最新内核就对了 reboot http://elrepo.org/linux/kernel/下e15、e16分别对应Centos5、Centos6，可参考以上安装
开启BBR 重启后uname -r 检查内核版本是不是4.9+
然后执行以下操作
echo &amp;#34;net.core.default_qdisc=fq&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p sysctl net.
          
        
        </description>
    </item>
    
    <item>
      <title>ubuntu修改grub引导菜单</title>
      <link>/post/ubuntu-modify-the-grub-boot-menu/</link>
      <pubDate>Mon, 27 Jun 2016 17:42:00 +0000</pubDate>
      
      <guid>/post/ubuntu-modify-the-grub-boot-menu/</guid>
      <description>
        
          
          
          
        
        
        
          先运行update-grub命令生成一次grub配置，顺便查看一下识别出来的引导菜单内容
root@alairpc:~# update-grub Generating grub configuration file ... Found linux image: /boot/vmlinuz-4.4.0-21-generic Found initrd image: /boot/initrd.img-4.4.0-21-generic Found memtest86+ image: /boot/memtest86+.elf Found memtest86+ image: /boot/memtest86+.bin Found Windows 7 (loader) on /dev/sda1 done root@alairpc:~#  注意看，以上共有5个菜单项，最后一个是windows7
接下来我们来看看gurb配置文件/etc/default/grub
root@alairpc:~# cat /etc/default/grub # If you change this file, run &#39;update-grub&#39; afterwards to update # /boot/grub/grub.cfg. # For full documentation of the options in this file, see: # info -f grub -n &#39;Simple configuration&#39; GRUB_DEFAULT=4 #GRUB_HIDDEN_TIMEOUT=0 GRUB_HIDDEN_TIMEOUT_QUIET=true GRUB_TIMEOUT=3 GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian` GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot; GRUB_CMDLINE_LINUX=&amp;quot;locale=zh_CN&amp;quot; # Uncomment to enable BadRAM filtering, modify to suit your needs # This works with Linux (no patch required) and with any kernel that obtains # the memory map information from GRUB (GNU Mach, kernel of FreeBSD .
          
        
        </description>
    </item>
    
    <item>
      <title>Ubunt下安装H2O</title>
      <link>/post/install-h2o-on-ubuntu/</link>
      <pubDate>Sat, 26 Mar 2016 13:26:00 +0000</pubDate>
      
      <guid>/post/install-h2o-on-ubuntu/</guid>
      <description>
        
          
          
          
        
        
        
          更新系统 apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get dist-upgrade -y &amp;amp;&amp;amp; apt-get autoremove --purge -y &amp;amp;&amp;amp; apt-get autoclean -y  安装必备软件 apt-get install locate git cmake build-essential checkinstall autoconf pkg-config libtool python-sphinx wget libcunit1-dev nettle-dev libyaml-dev libuv-dev -y  安装wslay git clone https://github.com/tatsuhiro-t/wslay.git cd wslay/ autoreconf -i automake autoconf ./configure make make install  安装完成后检查lib文件，如下所示：
ls /usr/local/lib/ libuv.a libuv.so.1 libwslay.la libwslay.so.0.0.1 python3.4 libuv.la libuv.so.1.0.0 libwslay.so pkgconfig libuv.so libwslay.a libwslay.so.0 python2.
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下使用grive管理Google Drive</title>
      <link>/post/linux-use-grive-management-google-drive/</link>
      <pubDate>Wed, 26 Aug 2015 18:23:00 +0000</pubDate>
      
      <guid>/post/linux-use-grive-management-google-drive/</guid>
      <description>
        
          
          
          
        
        
        
          找到一个linux下可用的google drive客户端，纯cli操作，值得推荐
grive项目主页 https://github.com/Grive/grive
Ubuntu中下通过PPA安装grive
sudo add-apt-repository ppa:nilarimogard/webupd8 sudo apt-get update sudo apt-get install grive  使用grive同步Google Drive
mkdir googledrive cd googledrive grive -a  第一次运行，会有验证提示，将提示的url代码粘贴到浏览器中验证帐户，完了后将生成的验证代码粘贴到grive进行验证。
          
        
        </description>
    </item>
    
    <item>
      <title>无法使用add-apt-repository命令</title>
      <link>/post/can-not-use-add-apt-repository/</link>
      <pubDate>Sun, 23 Aug 2015 08:23:00 +0000</pubDate>
      
      <guid>/post/can-not-use-add-apt-repository/</guid>
      <description>
        
          
          
          
        
        
        
          在Ubuntu中使用PPA安装软件时，需要用到add-apt-repository命令，但有的VPS系统因为体量原因，可能没有该命令，因此需要通过以下方法来安装：
apt-get install python-software-properties apt-get install software-properties-common 
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu下安装Ghost博客系统</title>
      <link>/post/ubuntu-install-ghost-blog-system/</link>
      <pubDate>Sat, 06 Jun 2015 16:26:00 +0000</pubDate>
      
      <guid>/post/ubuntu-install-ghost-blog-system/</guid>
      <description>
        
          
          
          
        
        
        
          安装Nodejs sudo add-apt-repository ppa:chris-lea/node.js sudo apt-get update sudo apt-get install nodejs  检查是否安装成功
root@hkvps:~# node -v v0.10.37 root@hkvps:~# npm -v 1.4.28  安装Ghost Ghost下载地址https://ghost.org/download/
wget https://ghost.org/zip/ghost-0.6.4.zip unzip ghost-0.6.4.zip -d ghost cd ghost npm install --production  运行Ghost
npm start  可以通过127.0.0.1:2368来访问
通过nmp start来运行Ghost，退出后就会停止，因此需要一个方法让Ghost一直运行
让Ghost一直运行 安装forever
npm install forever -g  进入ghost目录，执行以下命令，让Ghost一直运行
NODE_ENV=production forever start index.js  停止ghost
forever stop index.js  查看forever运行列表
forever list  结合Nginx配置域名 安装Nginx
sudo apt-get install nginx  编辑配置文件
          
        
        </description>
    </item>
    
    <item>
      <title>Linux下安装最新版golang</title>
      <link>/post/install-the-last-version-golang-for-linux/</link>
      <pubDate>Mon, 11 May 2015 15:11:00 +0000</pubDate>
      
      <guid>/post/install-the-last-version-golang-for-linux/</guid>
      <description>
        
          
          
          
        
        
        
          ubuntu中可以使用apt-get install golang来安装go，但是版本稍旧
如果需要安装最新版的golang，那就得自己动手咧
安装golang 从官网下载最新版，手动安装
apt-get install build-essential wget https://storage.googleapis.com/golang/go1.4.2.linux-386.tar.gz tar zxf go1.4.2.linux-386.tar.gz cd go/src ./all.bash  设置PATH 安装完成后需要设置PATH才能随地使用go
export PATH=&amp;quot;/root/go/bin:$PATH&amp;quot;  检查版本 go version go version go1.4.2 linux/386 
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu下安装VPN</title>
      <link>/post/install-vpn-on-ubuntu/</link>
      <pubDate>Sun, 23 Feb 2014 12:23:00 +0000</pubDate>
      
      <guid>/post/install-vpn-on-ubuntu/</guid>
      <description>
        
          
          
          
        
        
        
          安装pptpd
#apt-get install pptpd  IP设置
#vi /etc/pptpd.conf  添加以下内容:
localip 192.18.0.1 remoteip 192.168.0.200-230  设置DNS
#vi/etc/ppp/pptpd-options  添加以下内容：
ms-dns 192.168.1.1 ms-dns 8.8.8.8  添加用户
#vi /etc/ppp/chap-secrets  添加以下内容:
name * passwd *  重启vpn
#/etc/init.d/pptpd restart  允许ip4访问外网
#vi /etc/sysctl.conf net.ipv4.ip_forward=1 //取消本行前注释符(*) #sysctl -p 
          
        
        </description>
    </item>
    
    <item>
      <title>Ubuntu Server中安装VNC Server</title>
      <link>/post/install-vnc-server-on-ubuntu-server/</link>
      <pubDate>Sat, 11 May 2013 15:11:00 +0000</pubDate>
      
      <guid>/post/install-vnc-server-on-ubuntu-server/</guid>
      <description>
        
          
          
          
        
        
        
          安装所有软件
#aptitude install openbox firefox ttf-wqy-microhei #aptitude install vnc4server  设置openbox启动
#update-alternatives --config x-session-manager 然后选择openbox-session  设置vncserver密码:
#vncpasswd Password: ****** Verify:*****  运行vncserver
# vncserver //运行 # vncserver -kill :1 //终止  编辑~/.vnc/xstartup文件
#vi ~/.vnc/xstartup #!/bin/sh # Uncomment the following two lines for normal desktop: # unset SESSION_MANAGER # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] &amp;amp;&amp;amp; exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic &amp;amp; x-terminal-emulator -geometry 80x24+10+10 -ls -title &amp;quot;$VNCDESKTOP Desktop&amp;quot; &amp;amp; x-window-manager &amp;amp; startx&amp;amp; //添加此行  链接VNC
          
        
        </description>
    </item>
    
  </channel>
</rss>