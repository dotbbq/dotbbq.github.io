<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on UNIXETC</title>
    
    
    
    <link>/tags/git/</link>
    <description>Recent content in Git on UNIXETC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 25 Nov 2017 11:25:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将静态站点部署到Coding.net</title>
      <link>/post/deploy-the-static-site-to-the-coding-net/</link>
      <pubDate>Sat, 25 Nov 2017 11:25:00 +0000</pubDate>
      
      <guid>/post/deploy-the-static-site-to-the-coding-net/</guid>
      <description>
        
          
          
          
        
        
        
          本站是基于https://github.com/wendal/gor生成的静态站点。
下面介绍如何将静态站点部署到coding.net上。
注册coding并新建项目 首先注册coding.net，注册完后新建项目。
项目名称为*.coding.me，以此格式新建的项目可以使用Coding Pages服务。
Pages服务设置 建立完成后，在项目设置中找到Pages服务服务进行设置。
 部署来源  选择master分支
 自定义域名  添加自定义域名，建议同时添加domain.com和www.domain.com，并且设置一个为首选项，另一个跳转到首选项。然后将自己的域名CNAME指向pages.coding.me
 强制HTTPS访问  打开该选项，则为你的域名自动申请设置** Let&amp;rsquo;s Encrypt**证书，并开启**https**访问。
 Hosted by Coding Pages  新站点都会有coding pages跳转页，按照Hosted by Coding Pages说明，在首页添加规定连接后，可以提交申请不显示跳转页。
使用Git部署站点 首先推荐配置SSH公钥以便于操作。
$ ssh-keygen -t rsa -C &amp;quot;name@domain.com&amp;quot; //在此设置为coding.net帐号邮箱 Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/dotbbq/.ssh/id_rsa): Created directory &#39;/c/Users/dotbbq/.ssh&#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /c/Users/dotbbq/.
          
        
        </description>
    </item>
    
    <item>
      <title>树莓派安装Dnsmasq加速DNS解析</title>
      <link>/post/raspberry-pi-install-dnsmasq-and-dnsmasq-china-list/</link>
      <pubDate>Mon, 18 Jan 2016 21:28:00 +0000</pubDate>
      
      <guid>/post/raspberry-pi-install-dnsmasq-and-dnsmasq-china-list/</guid>
      <description>
        
          
          
          
        
        
        
          天朝的dns服务商尿性不是一般的大，动不动就抽风或者劫持，为了避免这种情况，可以在树莓派上安装Dnsmasq来加速dns解析，提高网络浏览体验。
安装配置dnsmasq apt-get install dnsmasq  配置dnsmasq,vi /etc/dnsmasq.conf
我的配置文件如下：
domain=Raspi2 resolv-file=/etc/resolv.dnsmasq conf-dir=/etc/dnsmasq.d min-port=4096 server=114.114.114.114 server=114.114.115.115 server=223.5.5.5 server=223.6.6.6 server=119.29.29.29 server=182.254.116.116 server=112.124.47.27 server=114.215.126.16 server=101.226.4.6 server=218.30.118.6 server=42.120.21.30 server=199.91.73.222 server=178.79.131.110 server=8.8.8.8 server=8.8.4.4 cache-size=10000  配置完重启dnsmasq服务
service dnsmasq restart  其中的server字段为上游DNS
配置dnsmasq-china-list git clone https://github.com/felixonmars/dnsmasq-china-list.git cd dnsmasq-china-list/ cp *.conf /etc/dnsmasq.d/ service dnsmasq restart  至此设置完成，可以在路由器中将首选dns设为树莓派ip，这样局域网内的所有设备都可以体验dns解析加速了！
          
        
        </description>
    </item>
    
    <item>
      <title>将博客从Typcho转移至Gor</title>
      <link>/post/typecho-converted-to-gor/</link>
      <pubDate>Mon, 20 Jul 2015 17:20:00 +0000</pubDate>
      
      <guid>/post/typecho-converted-to-gor/</guid>
      <description>
        
          
          
          
        
        
        
          缘由 VPS快到期了，不想继续维护，太累，并且香港VPS价格也不菲。
于是打算选择一个静态博客平台，原来用过的不少:jekyll,hexo,gor,pelican，最后决定Gor
选择Gor的理由有两点
 安装方便 执行效率高  安装Gor 参考Gor主页https://github.com/wendal/gor安装Gor
将Typecho文章导出为Markdown文件(.md) Github上有现成的工具typecho-exporter，主页为https://github.com/aneasystone/typecho-exporter
这个工具可以将所有的文章导出为Markdown文件，但是以文章标题为文件名，不利于后期处理，建议使用slug为文件名。
编辑下载的main.py，将75行的p.title = r[1]替换为`p.title = r[2]&#39;，如下:
results = cur.fetchall() for r in results: p = Post() p.id = r[0] p.title = r[2] p.content = r[5] posts.append(p)  原来的r[1]对应typecho_contentsSQL表中的title列，我的r[2]对应slug列，可以根据实际情况更改。
编辑typecho-exporter的config.ini文件，设置数据库访问方式。
运行main.py，完成后会在typecho-exporter目录下生成files文件夹，里面就是导出的Markdown文件。
后期整理 导出后的Markdown没有Gor需要的文件头格式，需要手动整理
这里推荐使用Notepad++批量替换
  查找目标:
  替换为&amp;mdash;\n title: title\ndate: 2015-07-20\ndescription: \npermalink: \ncategories: \ntags: \n&amp;mdash;\n
  记得将查找模式重的扩展打开。
经过以上替换，就大概有了个Gor的Markdown头格式，后面的手动工作就少了多了。
          
        
        </description>
    </item>
    
    <item>
      <title>使用speedtest-cli测试带宽</title>
      <link>/post/use-speedtest-cli-tests-network-bandwidth/</link>
      <pubDate>Thu, 26 Mar 2015 13:26:00 +0000</pubDate>
      
      <guid>/post/use-speedtest-cli-tests-network-bandwidth/</guid>
      <description>
        
          
          
          
        
        
        
          安装speedtest-cli 安装speedtest-cli方法如下:
sudo apt-get install python-pip sudo pip install speedtest-cli  或
pip install git+https://github.com/sivel/speedtest-cli.git  或
git clone https://github.com/sivel/speedtest-cli.git python speedtest-cli/setup.py install  或
wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  或
curl -Lo speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest_cli.py chmod +x speedtest-cli  使用speedtest-cli root@MyUbuntuCloud:~# speedtest-cli -h usage: speedtest-cli [-h] [--bytes] [--share] [--simple] [--list] [--server SERVER] [--mini MINI] [--source SOURCE] [--timeout TIMEOUT] [--version] Command line interface for testing internet bandwidth using speedtest.
          
        
        </description>
    </item>
    
    <item>
      <title>使用SSH密匙登录Github</title>
      <link>/post/use-the-ssh-key-to-login-github/</link>
      <pubDate>Tue, 03 Sep 2013 19:23:00 +0000</pubDate>
      
      <guid>/post/use-the-ssh-key-to-login-github/</guid>
      <description>
        
          
          
          
        
        
        
          生成ssh密匙文件 ssh-keygen -t rsa -C &amp;quot;user@domain.com&amp;quot;  接下来会提示输入密码，推荐自定义密码，当然也可以置空
Enter passphrase(empty for no passphrase): Enter same passphrase again:  完成后会在用户目录下的.ssh文件夹中新建id_rsa与is_rsa.pub两个文件。
添加ssh密匙到github用户 登录至github.com,点击右上角的Account Settings
在左侧选择SSH Keys菜单，然后在右侧点击Add SSH Key按钮
将上一步生成的id_rsa.pub文件内容复制进去保存。
本地连接至github.com ssh -T git@github.com  如果前面设置了passphrase，那么就按照提示输入passphrase。如果置空的话，就直接点击回车。成功后会有如下提示：
Hi wrchiu! You`ve successfully authenticated, but GitHub does note provide shell access.  参考以上设置完成后，以后git push时就不需要每次输入密码了！
          
        
        </description>
    </item>
    
  </channel>
</rss>